{"version":3,"sources":["../src/codes/index.ts","../src/errors/base.ts","../src/errors/specific.ts","../src/errors/utils.ts","../src/responses/index.ts","../src/strategies/backoff.ts","../src/strategies/retry.ts","../src/strategies/circuit-breaker.ts","../src/strategies/fallback.ts","../src/decorators/index.ts","../src/monitoring/collector.ts","../src/monitoring/metrics.ts","../src/testing/index.ts","../src/config/index.ts","../src/index.ts"],"sourcesContent":["import { ErrorCategory } from '../types/index.js';\n\n// 系统级错误码 (100xxx)\nexport const SYSTEM_ERROR_CODES = {\n  GENERIC_ERROR: '100001',\n  SERVICE_UNAVAILABLE: '100002',\n  DATABASE_CONNECTION_FAILED: '100003',\n  TIMEOUT: '100004',\n  MEMORY_OVERFLOW: '100005',\n  RESOURCE_EXHAUSTED: '100006',\n  CONFIGURATION_ERROR: '100007',\n  DEPENDENCY_FAILURE: '100008',\n  NETWORK_ERROR: '100009',\n  FILE_SYSTEM_ERROR: '100010'\n} as const;\n\n// 业务级错误码 (200xxx)\nexport const BUSINESS_ERROR_CODES = {\n  VALIDATION_FAILED: '200001',\n  USER_NOT_FOUND: '201001',\n  USER_ALREADY_EXISTS: '201002',\n  USER_INACTIVE: '201003',\n  INVALID_CREDENTIALS: '201004',\n  PERMISSION_DENIED: '201005',\n  RESOURCE_NOT_FOUND: '202001',\n  RESOURCE_CONFLICT: '202002',\n  RESOURCE_LOCKED: '202003',\n  INVALID_INPUT: '203001',\n  INVALID_FORMAT: '203002',\n  INVALID_RANGE: '203003',\n  BUSINESS_RULE_VIOLATION: '204001',\n  WORKFLOW_ERROR: '204002',\n  STATE_TRANSITION_ERROR: '204003'\n} as const;\n\n// 集成级错误码 (300xxx)\nexport const INTEGRATION_ERROR_CODES = {\n  EXTERNAL_SERVICE_UNAVAILABLE: '300001',\n  EXTERNAL_SERVICE_TIMEOUT: '300002',\n  API_RATE_LIMIT_EXCEEDED: '300003',\n  PROTOCOL_ERROR: '300004',\n  SERIALIZATION_ERROR: '300005',\n  DESERIALIZATION_ERROR: '300006',\n  VERSION_MISMATCH: '300007',\n  AUTHENTICATION_FAILED: '300008',\n  AUTHORIZATION_FAILED: '300009',\n  CONTRACT_VIOLATION: '300010'\n} as const;\n\n// 安全级错误码 (400xxx)\nexport const SECURITY_ERROR_CODES = {\n  AUTHENTICATION_REQUIRED: '400001',\n  AUTHENTICATION_FAILED: '400002',\n  AUTHORIZATION_FAILED: '400003',\n  ACCESS_DENIED: '400004',\n  TOKEN_EXPIRED: '400005',\n  TOKEN_INVALID: '400006',\n  SECURITY_VIOLATION: '400007',\n  SUSPICIOUS_ACTIVITY: '400008',\n  RATE_LIMIT_EXCEEDED: '400009',\n  ENCRYPTION_FAILED: '400010',\n  DECRYPTION_FAILED: '400011',\n  SIGNATURE_INVALID: '400012'\n} as const;\n\n// 所有错误码集合\nexport const ERROR_CODES = {\n  ...SYSTEM_ERROR_CODES,\n  ...BUSINESS_ERROR_CODES,\n  ...INTEGRATION_ERROR_CODES,\n  ...SECURITY_ERROR_CODES\n} as const;\n\nexport type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];\n\n// 错误分类映射\nconst ERROR_CATEGORY_MAP: Record<string, ErrorCategory> = {};\n\n// 系统错误\nObject.values(SYSTEM_ERROR_CODES).forEach(code => {\n  ERROR_CATEGORY_MAP[code] = 'system';\n});\n\n// 业务错误\nObject.values(BUSINESS_ERROR_CODES).forEach(code => {\n  ERROR_CATEGORY_MAP[code] = 'business';\n});\n\n// 集成错误\nObject.values(INTEGRATION_ERROR_CODES).forEach(code => {\n  ERROR_CATEGORY_MAP[code] = 'integration';\n});\n\n// 安全错误\nObject.values(SECURITY_ERROR_CODES).forEach(code => {\n  ERROR_CATEGORY_MAP[code] = 'security';\n});\n\nexport function getErrorCategory(code: string): ErrorCategory {\n  return ERROR_CATEGORY_MAP[code] || 'system';\n}\n\nexport function isSystemError(code: string): boolean {\n  return getErrorCategory(code) === 'system';\n}\n\nexport function isBusinessError(code: string): boolean {\n  return getErrorCategory(code) === 'business';\n}\n\nexport function isIntegrationError(code: string): boolean {\n  return getErrorCategory(code) === 'integration';\n}\n\nexport function isSecurityError(code: string): boolean {\n  return getErrorCategory(code) === 'security';\n}\n\n// HTTP状态码映射\nexport const HTTP_STATUS_MAPPING: Record<ErrorCategory, number> = {\n  system: 500,\n  business: 400,\n  integration: 502,\n  security: 401\n};\n\nexport function getHttpStatusForCategory(category: ErrorCategory): number {\n  return HTTP_STATUS_MAPPING[category] || 500;\n}\n\nexport function getHttpStatusForErrorCode(code: string): number {\n  const category = getErrorCategory(code);\n  return getHttpStatusForCategory(category);\n}","import { ErrorOptions, ErrorResponse, ErrorDetail, ErrorCategory } from '../types/index.js';\n\nexport abstract class SkerError extends Error {\n  public readonly code: string;\n  public readonly details: ErrorDetail[];\n  public readonly context: Record<string, any>;\n  public readonly originalError?: Error | any;\n  public readonly httpStatusCode: number;\n  public readonly timestamp: Date;\n  public readonly traceId?: string;\n  public readonly requestId?: string;\n  public abstract readonly category: ErrorCategory;\n\n  constructor(options: ErrorOptions) {\n    super(options.message);\n    \n    this.name = this.constructor.name;\n    this.code = options.code || '000000';\n    this.details = options.details || [];\n    this.context = options.context || {};\n    this.originalError = options.originalError;\n    this.httpStatusCode = options.httpStatusCode || 500;\n    this.timestamp = options.timestamp || new Date();\n    this.traceId = options.traceId;\n    this.requestId = options.requestId;\n\n    // 设置原型链，确保 instanceof 工作正常\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    // 保持堆栈跟踪\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  toResponse(): ErrorResponse {\n    return {\n      error: {\n        code: this.code,\n        message: this.message,\n        details: this.details.length > 0 ? this.details : undefined,\n        timestamp: this.timestamp.toISOString(),\n        trace_id: this.traceId,\n        request_id: this.requestId\n      },\n      success: false\n    };\n  }\n\n  toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      category: this.category,\n      details: this.details,\n      context: this.context,\n      httpStatusCode: this.httpStatusCode,\n      timestamp: this.timestamp.toISOString(),\n      traceId: this.traceId,\n      requestId: this.requestId,\n      stack: this.stack,\n      originalError: this.originalError?.toString()\n    };\n  }\n\n  override toString(): string {\n    return `${this.name}: ${this.message} (${this.code})`;\n  }\n\n  withContext(additionalContext: Record<string, any>): this {\n    Object.assign(this.context, additionalContext);\n    return this;\n  }\n\n  withTraceId(traceId: string): this {\n    (this as any).traceId = traceId;\n    return this;\n  }\n\n  withRequestId(requestId: string): this {\n    (this as any).requestId = requestId;\n    return this;\n  }\n}","import { SkerError } from './base.js';\nimport { ErrorOptions, ErrorCategory } from '../types/index.js';\nimport { getHttpStatusForCategory } from '../codes/index.js';\n\nexport class SystemError extends SkerError {\n  public readonly category: ErrorCategory = 'system';\n\n  constructor(options: ErrorOptions) {\n    super({\n      ...options,\n      httpStatusCode: options.httpStatusCode || getHttpStatusForCategory('system')\n    });\n  }\n}\n\nexport class BusinessError extends SkerError {\n  public readonly category: ErrorCategory = 'business';\n\n  constructor(options: ErrorOptions) {\n    super({\n      ...options,\n      httpStatusCode: options.httpStatusCode || getHttpStatusForCategory('business')\n    });\n  }\n}\n\nexport class IntegrationError extends SkerError {\n  public readonly category: ErrorCategory = 'integration';\n\n  constructor(options: ErrorOptions) {\n    super({\n      ...options,\n      httpStatusCode: options.httpStatusCode || getHttpStatusForCategory('integration')\n    });\n  }\n}\n\nexport class SecurityError extends SkerError {\n  public readonly category: ErrorCategory = 'security';\n\n  constructor(options: ErrorOptions) {\n    super({\n      ...options,\n      httpStatusCode: options.httpStatusCode || getHttpStatusForCategory('security')\n    });\n  }\n}\n\n// 验证错误类\nexport class ValidationError extends BusinessError {\n  public readonly validationErrors: Array<{\n    field: string;\n    rule: string;\n    message: string;\n    value?: any;\n  }>;\n\n  constructor(options: ErrorOptions & { \n    validationErrors: Array<{\n      field: string;\n      rule: string;\n      message: string;\n      value?: any;\n    }> \n  }) {\n    super({\n      ...options,\n      code: options.code || '200001'\n    });\n    \n    this.validationErrors = options.validationErrors;\n    this.name = 'ValidationError';\n  }\n\n  override toResponse() {\n    const baseResponse = super.toResponse();\n    return {\n      ...baseResponse,\n      error: {\n        ...baseResponse.error,\n        validation_errors: this.validationErrors\n      }\n    };\n  }\n}\n\n// 工厂函数\nexport function createSystemError(options: Omit<ErrorOptions, 'httpStatusCode'>): SystemError {\n  return new SystemError(options);\n}\n\nexport function createBusinessError(options: Omit<ErrorOptions, 'httpStatusCode'>): BusinessError {\n  return new BusinessError(options);\n}\n\nexport function createIntegrationError(options: Omit<ErrorOptions, 'httpStatusCode'>): IntegrationError {\n  return new IntegrationError(options);\n}\n\nexport function createSecurityError(options: Omit<ErrorOptions, 'httpStatusCode'>): SecurityError {\n  return new SecurityError(options);\n}\n\nexport function createValidationError(\n  message: string,\n  validationErrors: Array<{\n    field: string;\n    rule: string;\n    message: string;\n    value?: any;\n  }>,\n  context?: Record<string, any>\n): ValidationError {\n  return new ValidationError({\n    message,\n    validationErrors,\n    context\n  });\n}","import { SkerError } from './base.js';\nimport { SystemError, BusinessError, IntegrationError, SecurityError } from './specific.js';\nimport { getErrorCategory } from '../codes/index.js';\n\nexport function isSkerError(error: any): error is SkerError {\n  return error instanceof SkerError;\n}\n\nexport function isSystemError(error: any): error is SystemError {\n  return error instanceof SystemError;\n}\n\nexport function isBusinessError(error: any): error is BusinessError {\n  return error instanceof BusinessError;\n}\n\nexport function isIntegrationError(error: any): error is IntegrationError {\n  return error instanceof IntegrationError;\n}\n\nexport function isSecurityError(error: any): error is SecurityError {\n  return error instanceof SecurityError;\n}\n\nexport function isErrorOfCategory(error: any, category: string): boolean {\n  if (isSkerError(error)) {\n    return error.category === category;\n  }\n  return false;\n}\n\nexport function wrapError(error: any, additionalContext?: Record<string, any>): SkerError {\n  if (isSkerError(error)) {\n    if (additionalContext) {\n      error.withContext(additionalContext);\n    }\n    return error;\n  }\n\n  // 包装原始错误\n  return new SystemError({\n    code: '100001',\n    message: error?.message || 'Unknown error',\n    originalError: error,\n    context: additionalContext || {}\n  });\n}\n\nexport function sanitizeErrorForLogging(error: SkerError, sensitiveFields: string[] = []): any {\n  const sanitized = error.toJSON();\n  \n  // 移除敏感字段\n  const defaultSensitiveFields = ['password', 'token', 'secret', 'key', 'authorization'];\n  const allSensitiveFields = [...defaultSensitiveFields, ...sensitiveFields];\n  \n  function removeSensitiveData(obj: any): any {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n    \n    if (Array.isArray(obj)) {\n      return obj.map(removeSensitiveData);\n    }\n    \n    const cleaned: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      if (allSensitiveFields.some(field => \n        key.toLowerCase().includes(field.toLowerCase())\n      )) {\n        cleaned[key] = '[REDACTED]';\n      } else {\n        cleaned[key] = removeSensitiveData(value);\n      }\n    }\n    return cleaned;\n  }\n  \n  return removeSensitiveData(sanitized);\n}\n\nexport function extractErrorInfo(error: any): {\n  message: string;\n  code: string;\n  category: string;\n  stack?: string;\n} {\n  if (isSkerError(error)) {\n    return {\n      message: error.message,\n      code: error.code,\n      category: error.category,\n      stack: error.stack\n    };\n  }\n  \n  return {\n    message: error?.message || 'Unknown error',\n    code: '100001',\n    category: 'system',\n    stack: error?.stack\n  };\n}\n\nexport function createErrorFromCode(\n  code: string,\n  message: string,\n  context?: Record<string, any>\n): SkerError {\n  const category = getErrorCategory(code);\n  \n  switch (category) {\n    case 'business':\n      return new BusinessError({ code, message, context });\n    case 'integration':\n      return new IntegrationError({ code, message, context });\n    case 'security':\n      return new SecurityError({ code, message, context });\n    case 'system':\n    default:\n      return new SystemError({ code, message, context });\n  }\n}","import { ErrorResponse, ErrorDetail } from '../types/index.js';\nimport { SkerError } from '../errors/index.js';\n\nexport function createErrorResponse(options: {\n  code: string;\n  message: string;\n  details?: ErrorDetail[];\n  traceId?: string;\n  requestId?: string;\n  timestamp?: Date;\n}): ErrorResponse {\n  return {\n    error: {\n      code: options.code,\n      message: options.message,\n      details: options.details,\n      timestamp: (options.timestamp || new Date()).toISOString(),\n      trace_id: options.traceId,\n      request_id: options.requestId\n    },\n    success: false\n  };\n}\n\nexport function errorToResponse(error: SkerError): ErrorResponse {\n  return error.toResponse();\n}\n\nexport function formatErrorForApi(error: any, options?: {\n  includeStackTrace?: boolean;\n  includeSensitiveData?: boolean;\n  traceId?: string;\n  requestId?: string;\n}): ErrorResponse {\n  const traceId = options?.traceId;\n  const requestId = options?.requestId;\n\n  if (error instanceof SkerError) {\n    const response = error.toResponse();\n    \n    // 添加 trace_id 和 request_id\n    if (traceId) response.error.trace_id = traceId;\n    if (requestId) response.error.request_id = requestId;\n    \n    return response;\n  }\n\n  // 处理原生错误\n  return createErrorResponse({\n    code: '100001',\n    message: error?.message || 'Internal server error',\n    traceId,\n    requestId\n  });\n}\n\nexport function formatErrorForClient(error: any): ErrorResponse {\n  return formatErrorForApi(error, {\n    includeStackTrace: false,\n    includeSensitiveData: false\n  });\n}\n\nexport function formatErrorForDevelopment(error: any): ErrorResponse & { \n  debug?: { \n    stack?: string; \n    originalError?: any;\n    context?: Record<string, any>;\n  } \n} {\n  const baseResponse = formatErrorForApi(error, {\n    includeStackTrace: true,\n    includeSensitiveData: true\n  });\n\n  if (error instanceof SkerError) {\n    return {\n      ...baseResponse,\n      debug: {\n        stack: error.stack,\n        originalError: error.originalError,\n        context: error.context\n      }\n    };\n  }\n\n  return {\n    ...baseResponse,\n    debug: {\n      stack: error?.stack,\n      originalError: error\n    }\n  };\n}\n\nexport class ApiErrorFormatter {\n  constructor(\n    private options: {\n      includeStackTrace: boolean;\n      includeSensitiveData: boolean;\n      defaultTraceIdProvider?: () => string;\n      defaultRequestIdProvider?: () => string;\n    }\n  ) {}\n\n  format(error: any, context?: {\n    traceId?: string;\n    requestId?: string;\n  }): ErrorResponse {\n    const traceId = context?.traceId || this.options.defaultTraceIdProvider?.();\n    const requestId = context?.requestId || this.options.defaultRequestIdProvider?.();\n\n    return formatErrorForApi(error, {\n      includeStackTrace: this.options.includeStackTrace,\n      includeSensitiveData: this.options.includeSensitiveData,\n      traceId,\n      requestId\n    });\n  }\n}\n\n// 预定义的格式化器\nexport const productionFormatter = new ApiErrorFormatter({\n  includeStackTrace: false,\n  includeSensitiveData: false\n});\n\nexport const developmentFormatter = new ApiErrorFormatter({\n  includeStackTrace: true,\n  includeSensitiveData: true\n});\n\nexport const testingFormatter = new ApiErrorFormatter({\n  includeStackTrace: true,\n  includeSensitiveData: true,\n  defaultTraceIdProvider: () => 'test-trace-id',\n  defaultRequestIdProvider: () => 'test-request-id'\n});","import { BackoffStrategy } from '../types/index.js';\n\nexport class ExponentialBackoffStrategy implements BackoffStrategy {\n  constructor(\n    private multiplier: number = 2,\n    private maxDelay: number = 30000,\n    private jitter: boolean = true\n  ) {}\n\n  calculateDelay(attempt: number, baseDelay: number): number {\n    const exponentialDelay = baseDelay * Math.pow(this.multiplier, attempt - 1);\n    let delay = Math.min(exponentialDelay, this.maxDelay);\n    \n    if (this.jitter) {\n      // 添加 ±25% 的抖动\n      const jitterRange = delay * 0.25;\n      delay += (Math.random() - 0.5) * 2 * jitterRange;\n    }\n    \n    return Math.max(0, delay);\n  }\n}\n\nexport class LinearBackoffStrategy implements BackoffStrategy {\n  constructor(\n    private increment: number = 1000,\n    private maxDelay: number = 30000,\n    private jitter: boolean = false\n  ) {}\n\n  calculateDelay(attempt: number, baseDelay: number): number {\n    const linearDelay = baseDelay + (this.increment * (attempt - 1));\n    let delay = Math.min(linearDelay, this.maxDelay);\n    \n    if (this.jitter) {\n      const jitterRange = delay * 0.1;\n      delay += (Math.random() - 0.5) * 2 * jitterRange;\n    }\n    \n    return Math.max(0, delay);\n  }\n}\n\nexport class FixedBackoffStrategy implements BackoffStrategy {\n  constructor(private jitter: boolean = false) {}\n\n  calculateDelay(_attempt: number, baseDelay: number): number {\n    let delay = baseDelay;\n    \n    if (this.jitter) {\n      const jitterRange = delay * 0.1;\n      delay += (Math.random() - 0.5) * 2 * jitterRange;\n    }\n    \n    return delay;\n  }\n}","import { RetryOptions, BackoffStrategy } from '../types/index.js';\nimport { ExponentialBackoffStrategy, LinearBackoffStrategy, FixedBackoffStrategy } from './backoff.js';\n\nexport class RetryStrategy {\n  private backoffStrategy: BackoffStrategy;\n\n  constructor(private options: RetryOptions) {\n    this.backoffStrategy = this.createBackoffStrategy();\n  }\n\n  private createBackoffStrategy(): BackoffStrategy {\n    const backoffMultiplier = this.options.backoffMultiplier || 2;\n    const maxDelay = this.options.maxDelay || 30000;\n    const jitter = this.options.jitter || false;\n\n    if (backoffMultiplier === 1) {\n      return new FixedBackoffStrategy(jitter);\n    } else if (backoffMultiplier > 1) {\n      return new ExponentialBackoffStrategy(backoffMultiplier, maxDelay, jitter);\n    } else {\n      return new LinearBackoffStrategy(1000, maxDelay, jitter);\n    }\n  }\n\n  async execute<T>(fn: () => Promise<T>, _context?: Record<string, any>): Promise<T> {\n    let lastError: any;\n    \n    for (let attempt = 1; attempt <= this.options.maxAttempts; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n        \n        // 检查是否应该重试\n        if (attempt >= this.options.maxAttempts) {\n          break;\n        }\n        \n        if (this.options.retryCondition && !this.options.retryCondition(error, attempt)) {\n          break;\n        }\n        \n        // 计算延迟时间\n        const delay = this.backoffStrategy.calculateDelay(attempt, this.options.initialDelay);\n        \n        if (delay > 0) {\n          await this.sleep(delay);\n        }\n      }\n    }\n    \n    throw lastError;\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nexport class RetryBuilder {\n  private options: Partial<RetryOptions> = {};\n\n  maxAttempts(attempts: number): this {\n    this.options.maxAttempts = attempts;\n    return this;\n  }\n\n  initialDelay(delay: number): this {\n    this.options.initialDelay = delay;\n    return this;\n  }\n\n  backoffMultiplier(multiplier: number): this {\n    this.options.backoffMultiplier = multiplier;\n    return this;\n  }\n\n  maxDelay(delay: number): this {\n    this.options.maxDelay = delay;\n    return this;\n  }\n\n  withJitter(): this {\n    this.options.jitter = true;\n    return this;\n  }\n\n  retryOn(condition: (error: any, attempt: number) => boolean): this {\n    this.options.retryCondition = condition;\n    return this;\n  }\n\n  build(): RetryStrategy {\n    if (!this.options.maxAttempts) {\n      throw new Error('maxAttempts is required');\n    }\n    if (!this.options.initialDelay) {\n      throw new Error('initialDelay is required');\n    }\n\n    return new RetryStrategy(this.options as RetryOptions);\n  }\n}\n\n// 预定义的重试策略\nexport const DEFAULT_RETRY_STRATEGY = new RetryStrategy({\n  maxAttempts: 3,\n  initialDelay: 1000,\n  backoffMultiplier: 2,\n  maxDelay: 10000,\n  jitter: true\n});\n\nexport const AGGRESSIVE_RETRY_STRATEGY = new RetryStrategy({\n  maxAttempts: 5,\n  initialDelay: 500,\n  backoffMultiplier: 1.5,\n  maxDelay: 5000,\n  jitter: true\n});\n\nexport const CONSERVATIVE_RETRY_STRATEGY = new RetryStrategy({\n  maxAttempts: 2,\n  initialDelay: 2000,\n  backoffMultiplier: 2,\n  maxDelay: 30000,\n  jitter: false\n});\n\n// 工厂函数\nexport function createRetryStrategy(): RetryBuilder {\n  return new RetryBuilder();\n}\n\nexport function retryWithExponentialBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  initialDelay: number = 1000\n): Promise<T> {\n  const strategy = new RetryStrategy({\n    maxAttempts,\n    initialDelay,\n    backoffMultiplier: 2,\n    jitter: true\n  });\n  \n  return strategy.execute(fn);\n}\n\nexport function retryWithLinearBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  initialDelay: number = 1000\n): Promise<T> {\n  const strategy = new RetryStrategy({\n    maxAttempts,\n    initialDelay,\n    backoffMultiplier: 1,\n    jitter: false\n  });\n  \n  return strategy.execute(fn);\n}","import { CircuitBreakerOptions, CircuitBreakerState } from '../types/index.js';\n\nexport class CircuitBreakerStrategy {\n  private state: CircuitBreakerState = 'closed';\n  private failureCount = 0;\n  private successCount = 0;\n  private nextAttemptTime?: Date;\n\n  constructor(private options: CircuitBreakerOptions) {}\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    if (this.state === 'open') {\n      if (this.shouldAttemptReset()) {\n        this.state = 'half-open';\n        this.successCount = 0;\n        this.notifyStateChange();\n      } else {\n        throw new Error('Circuit breaker is OPEN');\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failureCount = 0;\n\n    if (this.state === 'half-open') {\n      this.successCount++;\n      const halfOpenMaxCalls = this.options.halfOpenMaxCalls || 1;\n      \n      if (this.successCount >= halfOpenMaxCalls) {\n        this.state = 'closed';\n        this.notifyStateChange();\n      }\n    }\n  }\n\n  private onFailure(): void {\n    this.failureCount++;\n\n    if (this.state === 'half-open') {\n      this.state = 'open';\n      this.setNextAttemptTime();\n      this.notifyStateChange();\n    } else if (this.state === 'closed' && this.failureCount >= this.options.failureThreshold) {\n      this.state = 'open';\n      this.setNextAttemptTime();\n      this.notifyStateChange();\n    }\n  }\n\n  private shouldAttemptReset(): boolean {\n    return this.nextAttemptTime ? new Date() >= this.nextAttemptTime : false;\n  }\n\n  private setNextAttemptTime(): void {\n    this.nextAttemptTime = new Date(Date.now() + this.options.resetTimeout);\n  }\n\n  private notifyStateChange(): void {\n    if (this.options.onStateChange) {\n      this.options.onStateChange(this.state);\n    }\n  }\n\n  getState(): CircuitBreakerState {\n    return this.state;\n  }\n\n  getFailureCount(): number {\n    return this.failureCount;\n  }\n\n  getSuccessCount(): number {\n    return this.successCount;\n  }\n\n  reset(): void {\n    this.state = 'closed';\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttemptTime = undefined;\n    this.notifyStateChange();\n  }\n\n  forceOpen(): void {\n    this.state = 'open';\n    this.setNextAttemptTime();\n    this.notifyStateChange();\n  }\n\n  forceClose(): void {\n    this.state = 'closed';\n    this.failureCount = 0;\n    this.nextAttemptTime = undefined;\n    this.notifyStateChange();\n  }\n}\n\nexport class CircuitBreakerBuilder {\n  private options: Partial<CircuitBreakerOptions> = {};\n\n  failureThreshold(threshold: number): this {\n    this.options.failureThreshold = threshold;\n    return this;\n  }\n\n  resetTimeout(timeout: number): this {\n    this.options.resetTimeout = timeout;\n    return this;\n  }\n\n  halfOpenMaxCalls(calls: number): this {\n    this.options.halfOpenMaxCalls = calls;\n    return this;\n  }\n\n  monitoringPeriod(period: number): this {\n    this.options.monitoringPeriod = period;\n    return this;\n  }\n\n  onStateChange(callback: (state: CircuitBreakerState) => void): this {\n    this.options.onStateChange = callback;\n    return this;\n  }\n\n  build(): CircuitBreakerStrategy {\n    if (!this.options.failureThreshold) {\n      throw new Error('failureThreshold is required');\n    }\n    if (!this.options.resetTimeout) {\n      throw new Error('resetTimeout is required');\n    }\n\n    return new CircuitBreakerStrategy(this.options as CircuitBreakerOptions);\n  }\n}\n\n// 预定义的熔断器策略\nexport const DEFAULT_CIRCUIT_BREAKER = new CircuitBreakerStrategy({\n  failureThreshold: 5,\n  resetTimeout: 60000,\n  halfOpenMaxCalls: 3\n});\n\nexport const AGGRESSIVE_CIRCUIT_BREAKER = new CircuitBreakerStrategy({\n  failureThreshold: 3,\n  resetTimeout: 30000,\n  halfOpenMaxCalls: 1\n});\n\nexport const CONSERVATIVE_CIRCUIT_BREAKER = new CircuitBreakerStrategy({\n  failureThreshold: 10,\n  resetTimeout: 120000,\n  halfOpenMaxCalls: 5\n});\n\nexport function createCircuitBreaker(): CircuitBreakerBuilder {\n  return new CircuitBreakerBuilder();\n}","import { FallbackOptions } from '../types/index.js';\n\nexport class FallbackStrategy {\n  constructor(private options: FallbackOptions) {}\n\n  async execute<T>(fn: () => Promise<T>, context?: Record<string, any>): Promise<T> {\n    try {\n      return await fn();\n    } catch (error) {\n      if (this.shouldUseFallback(error)) {\n        return await this.options.fallback(error, context || {});\n      }\n      throw error;\n    }\n  }\n\n  private shouldUseFallback(error: any): boolean {\n    if (this.options.condition) {\n      return this.options.condition(error);\n    }\n    return true; // 默认总是使用降级\n  }\n}\n\n// 组合策略\nexport class ErrorRecoveryStrategy {\n  constructor(private strategies: Array<{\n    type: 'retry' | 'fallback' | 'circuit-breaker';\n    strategy: any;\n  }>) {}\n\n  async execute<T>(fn: () => Promise<T>, context?: Record<string, any>): Promise<T> {\n    let currentFn = fn;\n    \n    // 按顺序应用所有策略\n    for (const { strategy } of this.strategies) {\n      const wrappedFn = currentFn;\n      currentFn = () => strategy.execute(wrappedFn, context);\n    }\n    \n    return await currentFn();\n  }\n}\n\n// 内置降级策略\nexport class CacheFallbackStrategy extends FallbackStrategy {\n  constructor(\n    private cache: Map<string, any> = new Map(),\n    private keyGenerator: (context: Record<string, any>) => string = (ctx) => JSON.stringify(ctx),\n    condition?: (error: any) => boolean\n  ) {\n    super({\n      fallback: async (error, context) => {\n        const key = this.keyGenerator(context);\n        const cachedValue = this.cache.get(key);\n        \n        if (cachedValue !== undefined) {\n          return cachedValue;\n        }\n        \n        throw new Error(`No cached value available for fallback: ${error.message}`);\n      },\n      condition\n    });\n  }\n\n  setCachedValue(context: Record<string, any>, value: any): void {\n    const key = this.keyGenerator(context);\n    this.cache.set(key, value);\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n}\n\nexport class DefaultValueFallbackStrategy extends FallbackStrategy {\n  constructor(\n    private defaultValue: any,\n    condition?: (error: any) => boolean\n  ) {\n    super({\n      fallback: async () => this.defaultValue,\n      condition\n    });\n  }\n}\n\nexport class AlternativeServiceFallbackStrategy extends FallbackStrategy {\n  constructor(\n    private alternativeService: () => Promise<any>,\n    condition?: (error: any) => boolean\n  ) {\n    super({\n      fallback: async () => await this.alternativeService(),\n      condition\n    });\n  }\n}\n\n// 工厂函数\nexport function createFallbackStrategy(\n  fallback: (error: any, context: any) => Promise<any>,\n  condition?: (error: any) => boolean\n): FallbackStrategy {\n  return new FallbackStrategy({ fallback, condition });\n}\n\nexport function createCacheFallback(\n  cache?: Map<string, any>,\n  keyGenerator?: (context: Record<string, any>) => string,\n  condition?: (error: any) => boolean\n): CacheFallbackStrategy {\n  return new CacheFallbackStrategy(cache, keyGenerator, condition);\n}\n\nexport function createDefaultValueFallback<T>(\n  defaultValue: T,\n  condition?: (error: any) => boolean\n): DefaultValueFallbackStrategy {\n  return new DefaultValueFallbackStrategy(defaultValue, condition);\n}\n\nexport function createAlternativeServiceFallback(\n  alternativeService: () => Promise<any>,\n  condition?: (error: any) => boolean\n): AlternativeServiceFallbackStrategy {\n  return new AlternativeServiceFallbackStrategy(alternativeService, condition);\n}","import { RetryStrategy, CircuitBreakerStrategy } from '../strategies/index.js';\nimport { SkerError, wrapError } from '../errors/index.js';\nimport \"reflect-metadata\";\n// 错误处理装饰器选项\ninterface HandleErrorsOptions {\n  onError?: (error: any, context?: any) => void;\n  rethrow?: boolean;\n  wrapUnknownErrors?: boolean;\n  contextProvider?: () => Record<string, any>;\n}\n\n// 重试装饰器选项\ninterface RetryOnErrorOptions {\n  maxAttempts: number;\n  delay: number;\n  backoff?: 'fixed' | 'linear' | 'exponential';\n  retryCondition?: (error: any) => boolean;\n}\n\n// 熔断器装饰器选项\ninterface CircuitBreakerOptions {\n  failureThreshold: number;\n  resetTimeout: number;\n  monitoringPeriod?: number;\n  onStateChange?: (state: string) => void;\n}\n\n// 方法装饰器：错误处理\nexport function HandleErrors(options: HandleErrorsOptions = {}) {\n  return function (_target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await method.apply(this, args);\n      } catch (error) {\n        const context = options.contextProvider ? options.contextProvider() : {\n          method: propertyName,\n          arguments: args,\n          className: this.constructor.name\n        };\n\n        if (options.onError) {\n          options.onError(error, context);\n        }\n\n        if (options.rethrow !== false) {\n          if (options.wrapUnknownErrors && !(error instanceof SkerError)) {\n            throw wrapError(error, context);\n          }\n          throw error;\n        }\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n// 方法装饰器：重试\nexport function RetryOnError(options: RetryOnErrorOptions) {\n  return function (_target: any, _propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    const retryStrategy = new RetryStrategy({\n      maxAttempts: options.maxAttempts,\n      initialDelay: options.delay,\n      backoffMultiplier: options.backoff === 'exponential' ? 2 : \n                        options.backoff === 'linear' ? 1 : 1,\n      retryCondition: options.retryCondition\n    });\n\n    descriptor.value = async function (...args: any[]) {\n      return await retryStrategy.execute(() => method.apply(this, args));\n    };\n\n    return descriptor;\n  };\n}\n\n// 方法装饰器：熔断器\nexport function CircuitBreaker(options: CircuitBreakerOptions) {\n  const circuitBreaker = new CircuitBreakerStrategy({\n    failureThreshold: options.failureThreshold,\n    resetTimeout: options.resetTimeout,\n    monitoringPeriod: options.monitoringPeriod,\n    onStateChange: options.onStateChange\n  });\n\n  return function (_target: any, _propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      return await circuitBreaker.execute(() => method.apply(this, args));\n    };\n\n    return descriptor;\n  };\n}\n\n// 方法装饰器：降级\nexport function FallbackOnError(fallbackMethod: string | Function) {\n  return function (_target: any, _propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      try {\n        return await method.apply(this, args);\n      } catch (error) {\n        if (typeof fallbackMethod === 'string') {\n          const fallback = (this as any)[fallbackMethod];\n          if (typeof fallback === 'function') {\n            return await fallback.apply(this, args);\n          }\n          throw new Error(`Fallback method '${fallbackMethod}' not found`);\n        } else {\n          return await fallbackMethod.apply(this, args);\n        }\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n// 组合装饰器：带超时的重试\nexport function RetryWithTimeout(options: {\n  maxAttempts: number;\n  delay: number;\n  timeout: number;\n  timeoutError?: string;\n}) {\n  return function (_target: any, _propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    const retryStrategy = new RetryStrategy({\n      maxAttempts: options.maxAttempts,\n      initialDelay: options.delay,\n      backoffMultiplier: 2\n    });\n\n    descriptor.value = async function (...args: any[]) {\n      return await retryStrategy.execute(async () => {\n        return await Promise.race([\n          method.apply(this, args),\n          new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error(options.timeoutError || 'Method timeout'));\n            }, options.timeout);\n          })\n        ]);\n      });\n    };\n\n    return descriptor;\n  };\n}\n\n// 类装饰器：全局错误处理\nexport function GlobalErrorHandler(options: HandleErrorsOptions = {}) {\n  return function <T extends { new (...args: any[]): {} }>(constructor: T) {\n    return class extends constructor {\n      constructor(...args: any[]) {\n        super(...args);\n        \n        // 为所有方法添加错误处理\n        const proto = constructor.prototype;\n        const propertyNames = Object.getOwnPropertyNames(proto);\n        \n        propertyNames.forEach(propertyName => {\n          if (propertyName !== 'constructor') {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n            if (descriptor && typeof descriptor.value === 'function') {\n              const originalMethod = descriptor.value;\n              \n              descriptor.value = async function (...args: any[]) {\n                try {\n                  return await originalMethod.apply(this, args);\n                } catch (error) {\n                  const context = options.contextProvider ? options.contextProvider() : {\n                    method: propertyName,\n                    arguments: args,\n                    className: constructor.name\n                  };\n\n                  if (options.onError) {\n                    options.onError(error, context);\n                  }\n\n                  if (options.rethrow !== false) {\n                    if (options.wrapUnknownErrors && !(error instanceof SkerError)) {\n                      throw wrapError(error, context);\n                    }\n                    throw error;\n                  }\n                }\n              };\n              \n              Object.defineProperty(proto, propertyName, descriptor);\n            }\n          }\n        });\n      }\n    };\n  };\n}\n\n// 参数装饰器：参数验证\nexport function ValidateParam(validator: (value: any) => boolean | string) {\n  return function (target: any, propertyName: string | symbol, parameterIndex: number) {\n    const existingValidators = Reflect.getMetadata('validate:params', target, propertyName) || [];\n    existingValidators[parameterIndex] = validator;\n    Reflect.defineMetadata('validate:params', existingValidators, target, propertyName);\n  };\n}\n\n// 方法装饰器：参数验证执行\nexport function ValidateParams() {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = function (...args: any[]) {\n      const validators = Reflect.getMetadata('validate:params', target, propertyName);\n      \n      if (validators) {\n        validators.forEach((validator: Function, index: number) => {\n          if (validator && index < args.length) {\n            const result = validator(args[index]);\n            if (typeof result === 'string') {\n              throw new Error(`Parameter ${index} validation failed: ${result}`);\n            } else if (result === false) {\n              throw new Error(`Parameter ${index} validation failed`);\n            }\n          }\n        });\n      }\n      \n      return method.apply(this, args);\n    };\n    \n    return descriptor;\n  };\n}","import { ErrorCollectorOptions, ErrorReporter } from '../types/index.js';\nimport { SkerError, sanitizeErrorForLogging } from '../errors/index.js';\n\nexport class ErrorCollector {\n  private collectedErrors: any[] = [];\n  private reporters: ErrorReporter[] = [];\n\n  constructor(private options: ErrorCollectorOptions = {}) {\n    this.reporters = options.reporters || [];\n  }\n\n  async collect(error: any, context?: Record<string, any>): Promise<void> {\n    // 采样过滤\n    if (this.options.samplingRate && Math.random() > this.options.samplingRate) {\n      return;\n    }\n\n    // 应用过滤器\n    if (this.options.filters) {\n      const shouldSkip = this.options.filters.some(filter => !filter(error));\n      if (shouldSkip) {\n        return;\n      }\n    }\n\n    // 错误增强\n    let enrichedError = error;\n    if (this.options.enrichers) {\n      for (const enricher of this.options.enrichers) {\n        try {\n          enrichedError = await enricher(enrichedError, context || {});\n        } catch (enrichError) {\n          console.warn('Error enricher failed:', enrichError);\n        }\n      }\n    }\n\n    // 添加到本地收集\n    const errorInfo = {\n      error: enrichedError instanceof SkerError \n        ? sanitizeErrorForLogging(enrichedError)\n        : this.sanitizeGenericError(enrichedError),\n      context: context || {},\n      timestamp: new Date(),\n      id: this.generateErrorId()\n    };\n\n    this.collectedErrors.push(errorInfo);\n\n    // 上报到外部系统\n    await this.reportError(errorInfo);\n  }\n\n  private sanitizeGenericError(error: any): any {\n    return {\n      name: error?.name || 'Error',\n      message: error?.message || 'Unknown error',\n      stack: error?.stack,\n      code: error?.code || 'UNKNOWN',\n      category: 'system'\n    };\n  }\n\n  private generateErrorId(): string {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async reportError(errorInfo: any): Promise<void> {\n    const reportPromises = this.reporters.map(async reporter => {\n      try {\n        await this.reportToReporter(reporter, errorInfo);\n      } catch (reportError) {\n        console.error(`Failed to report error to ${reporter.type}:`, reportError);\n      }\n    });\n\n    await Promise.allSettled(reportPromises);\n  }\n\n  private async reportToReporter(reporter: ErrorReporter, errorInfo: any): Promise<void> {\n    switch (reporter.type) {\n      case 'console':\n        console.error('Error collected:', errorInfo);\n        break;\n      case 'sentry':\n        // 模拟 Sentry 上报\n        if (reporter.config.dsn) {\n          console.log(`Reporting to Sentry (${reporter.config.dsn}):`, errorInfo);\n        }\n        break;\n      case 'elasticsearch':\n        // 模拟 Elasticsearch 上报\n        if (reporter.config.host) {\n          console.log(`Reporting to Elasticsearch (${reporter.config.host}):`, errorInfo);\n        }\n        break;\n      case 'webhook':\n        // 模拟 Webhook 上报\n        if (reporter.config.url) {\n          console.log(`Reporting to Webhook (${reporter.config.url}):`, errorInfo);\n        }\n        break;\n      default:\n        console.warn(`Unknown reporter type: ${reporter.type}`);\n    }\n  }\n\n  getCollectedErrors(): any[] {\n    return [...this.collectedErrors];\n  }\n\n  getErrorCount(): number {\n    return this.collectedErrors.length;\n  }\n\n  getErrorsByCategory(): Record<string, number> {\n    const categories: Record<string, number> = {};\n    \n    this.collectedErrors.forEach(errorInfo => {\n      const category = errorInfo.error.category || 'unknown';\n      categories[category] = (categories[category] || 0) + 1;\n    });\n\n    return categories;\n  }\n\n  getErrorsByTimeRange(startTime: Date, endTime: Date): any[] {\n    return this.collectedErrors.filter(errorInfo => {\n      const timestamp = errorInfo.timestamp;\n      return timestamp >= startTime && timestamp <= endTime;\n    });\n  }\n\n  clear(): void {\n    this.collectedErrors = [];\n  }\n\n  addReporter(reporter: ErrorReporter): void {\n    this.reporters.push(reporter);\n  }\n\n  removeReporter(type: string): void {\n    this.reporters = this.reporters.filter(reporter => reporter.type !== type);\n  }\n}\n\n// 全局错误收集器实例\nlet globalErrorCollector: ErrorCollector | null = null;\n\nexport function getGlobalErrorCollector(): ErrorCollector {\n  if (!globalErrorCollector) {\n    globalErrorCollector = new ErrorCollector();\n  }\n  return globalErrorCollector;\n}\n\nexport function setGlobalErrorCollector(collector: ErrorCollector): void {\n  globalErrorCollector = collector;\n}\n\nexport function collectError(error: any, context?: Record<string, any>): Promise<void> {\n  return getGlobalErrorCollector().collect(error, context);\n}\n\n// 自动错误收集设置\nexport function setupGlobalErrorHandling(collector?: ErrorCollector): void {\n  const errorCollector = collector || getGlobalErrorCollector();\n\n  // 捕获未处理的 Promise 拒绝\n  process.on('unhandledRejection', (reason, promise) => {\n    errorCollector.collect(reason, {\n      source: 'unhandledRejection',\n      promise: promise.toString()\n    }).catch(console.error);\n  });\n\n  // 捕获未处理的异常\n  process.on('uncaughtException', (error) => {\n    errorCollector.collect(error, {\n      source: 'uncaughtException',\n      fatal: true\n    }).catch(console.error);\n  });\n\n  // 捕获 warning 事件\n  process.on('warning', (warning) => {\n    if (warning.name === 'DeprecationWarning') {\n      errorCollector.collect(warning, {\n        source: 'warning',\n        type: 'deprecation'\n      }).catch(console.error);\n    }\n  });\n}","import { AlertingRule } from '../types/index.js';\n\nexport interface ErrorMetric {\n  name: string;\n  value: number;\n  labels: Record<string, string>;\n  timestamp: Date;\n}\n\nexport class ErrorMetrics {\n  private metrics: ErrorMetric[] = [];\n  private counters: Record<string, number> = {};\n  private timers: Record<string, number[]> = {};\n\n  constructor(\n    private options: {\n      collectionInterval?: number;\n      dimensions?: string[];\n      metrics?: string[];\n    } = {}\n  ) {\n    if (options.collectionInterval) {\n      this.startCollection();\n    }\n  }\n\n  private startCollection(): void {\n    const interval = this.options.collectionInterval || 60000;\n    \n    setInterval(() => {\n      this.collectMetrics();\n    }, interval);\n  }\n\n  private collectMetrics(): void {\n    const timestamp = new Date();\n    \n    // 收集错误计数指标\n    Object.entries(this.counters).forEach(([key, value]) => {\n      this.addMetric({\n        name: 'error_count',\n        value,\n        labels: this.parseLabelsFromKey(key),\n        timestamp\n      });\n    });\n\n    // 收集错误率指标\n    this.calculateErrorRates(timestamp);\n    \n    // 收集平均恢复时间指标\n    this.calculateRecoveryTimes(timestamp);\n  }\n\n  private parseLabelsFromKey(key: string): Record<string, string> {\n    const parts = key.split(':');\n    const labels: Record<string, string> = {};\n    \n    parts.forEach(part => {\n      const [name, value] = part.split('=');\n      if (name && value) {\n        labels[name] = value;\n      }\n    });\n    \n    return labels;\n  }\n\n  private calculateErrorRates(timestamp: Date): void {\n    // 简化的错误率计算\n    const totalRequests = this.counters['total_requests'] || 1;\n    const totalErrors = Object.values(this.counters).reduce((sum, count) => sum + count, 0);\n    const errorRate = totalErrors / totalRequests;\n    \n    this.addMetric({\n      name: 'error_rate',\n      value: errorRate,\n      labels: {},\n      timestamp\n    });\n  }\n\n  private calculateRecoveryTimes(timestamp: Date): void {\n    Object.entries(this.timers).forEach(([key, times]) => {\n      if (times.length > 0) {\n        const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;\n        \n        this.addMetric({\n          name: 'avg_error_recovery_time',\n          value: avgTime,\n          labels: this.parseLabelsFromKey(key),\n          timestamp\n        });\n      }\n    });\n  }\n\n  addMetric(metric: ErrorMetric): void {\n    this.metrics.push(metric);\n    \n    // 保持最近的指标数据\n    const maxMetrics = 10000;\n    if (this.metrics.length > maxMetrics) {\n      this.metrics = this.metrics.slice(-maxMetrics);\n    }\n  }\n\n  incrementCounter(key: string, labels?: Record<string, string>, value: number = 1): void {\n    const metricKey = this.buildMetricKey(key, labels);\n    this.counters[metricKey] = (this.counters[metricKey] || 0) + value;\n  }\n\n  recordTime(key: string, labels: Record<string, string>, duration: number): void {\n    const metricKey = this.buildMetricKey(key, labels);\n    if (!this.timers[metricKey]) {\n      this.timers[metricKey] = [];\n    }\n    this.timers[metricKey].push(duration);\n  }\n\n  private buildMetricKey(name: string, labels?: Record<string, string>): string {\n    if (!labels || Object.keys(labels).length === 0) {\n      return name;\n    }\n    \n    const labelParts = Object.entries(labels).map(([key, value]) => `${key}=${value}`);\n    return `${name}:${labelParts.join(':')}`;\n  }\n\n  getMetrics(filter?: {\n    name?: string;\n    startTime?: Date;\n    endTime?: Date;\n    labels?: Record<string, string>;\n  }): ErrorMetric[] {\n    let filtered = this.metrics;\n    \n    if (filter) {\n      if (filter.name) {\n        filtered = filtered.filter(m => m.name === filter.name);\n      }\n      \n      if (filter.startTime) {\n        filtered = filtered.filter(m => m.timestamp >= filter.startTime!);\n      }\n      \n      if (filter.endTime) {\n        filtered = filtered.filter(m => m.timestamp <= filter.endTime!);\n      }\n      \n      if (filter.labels) {\n        filtered = filtered.filter(m => {\n          return Object.entries(filter.labels!).every(([key, value]) => \n            m.labels[key] === value\n          );\n        });\n      }\n    }\n    \n    return filtered;\n  }\n\n  getCounters(): Record<string, number> {\n    return { ...this.counters };\n  }\n\n  resetMetrics(): void {\n    this.metrics = [];\n    this.counters = {};\n    this.timers = {};\n  }\n}\n\nexport class ErrorAlerting {\n  private rules: AlertingRule[] = [];\n  private alertHistory: Array<{\n    rule: AlertingRule;\n    timestamp: Date;\n    value: number;\n  }> = [];\n\n  constructor(\n    private options: {\n      rules?: AlertingRule[];\n      notifiers?: Array<{\n        type: string;\n        config: Record<string, any>;\n      }>;\n    } = {}\n  ) {\n    if (options.rules) {\n      this.rules = options.rules;\n    }\n  }\n\n  addRule(rule: AlertingRule): void {\n    this.rules.push(rule);\n  }\n\n  removeRule(name: string): void {\n    this.rules = this.rules.filter(rule => rule.name !== name);\n  }\n\n  checkAlerts(metrics: ErrorMetrics): void {\n    this.rules.forEach(rule => {\n      const shouldAlert = this.evaluateRule(rule, metrics);\n      \n      if (shouldAlert) {\n        this.triggerAlert(rule, metrics);\n      }\n    });\n  }\n\n  private evaluateRule(rule: AlertingRule, metrics: ErrorMetrics): boolean {\n    // 简化的规则评估\n    // 实际实现应该支持更复杂的查询语法\n    \n    if (rule.condition.includes('error_rate >')) {\n      const threshold = parseFloat(rule.condition.split('>')[1]!.trim());\n      const currentMetrics = metrics.getMetrics({ name: 'error_rate' });\n      \n      if (currentMetrics.length > 0) {\n        const latestMetric = currentMetrics[currentMetrics.length - 1]!;\n        return latestMetric.value > threshold;\n      }\n    }\n    \n    if (rule.condition.includes('error_count >')) {\n      const threshold = parseFloat(rule.condition.split('>')[1]!.trim());\n      const currentMetrics = metrics.getMetrics({ name: 'error_count' });\n      \n      if (currentMetrics.length > 0) {\n        const latestMetric = currentMetrics[currentMetrics.length - 1]!;\n        return latestMetric.value > threshold;\n      }\n    }\n    \n    return false;\n  }\n\n  private triggerAlert(rule: AlertingRule, metrics: ErrorMetrics): void {\n    const alertInfo = {\n      rule,\n      timestamp: new Date(),\n      value: this.getCurrentMetricValue(rule, metrics)\n    };\n    \n    this.alertHistory.push(alertInfo);\n    \n    // 发送通知\n    this.sendNotifications(alertInfo);\n  }\n\n  private getCurrentMetricValue(rule: AlertingRule, metrics: ErrorMetrics): number {\n    // 获取当前指标值用于告警信息\n    const metricName = rule.condition.includes('error_rate') ? 'error_rate' : 'error_count';\n    const currentMetrics = metrics.getMetrics({ name: metricName });\n    \n    if (currentMetrics.length > 0) {\n      return currentMetrics[currentMetrics.length - 1]!.value;\n    }\n    \n    return 0;\n  }\n\n  private sendNotifications(alertInfo: any): void {\n    const notifiers = this.options.notifiers || [];\n    \n    notifiers.forEach(notifier => {\n      try {\n        this.sendNotification(notifier, alertInfo);\n      } catch (error) {\n        console.error(`Failed to send notification via ${notifier.type}:`, error);\n      }\n    });\n  }\n\n  private sendNotification(notifier: any, alertInfo: any): void {\n    const message = this.formatAlertMessage(alertInfo);\n    \n    switch (notifier.type) {\n      case 'console':\n        console.warn('🚨 ALERT:', message);\n        break;\n      case 'slack':\n        if (notifier.config.webhook) {\n          console.log(`Sending Slack alert to ${notifier.config.webhook}:`, message);\n        }\n        break;\n      case 'email':\n        if (notifier.config.recipients) {\n          console.log(`Sending email alert to ${notifier.config.recipients.join(', ')}:`, message);\n        }\n        break;\n      default:\n        console.warn(`Unknown notifier type: ${notifier.type}`);\n    }\n  }\n\n  private formatAlertMessage(alertInfo: any): string {\n    const { rule, timestamp, value } = alertInfo;\n    \n    return `Alert: ${rule.name}\nCondition: ${rule.condition}\nCurrent Value: ${value}\nTime: ${timestamp.toISOString()}\nDescription: ${rule.annotations.description || 'No description'}`;\n  }\n\n  getAlertHistory(): Array<{\n    rule: AlertingRule;\n    timestamp: Date;\n    value: number;\n  }> {\n    return [...this.alertHistory];\n  }\n\n  clearAlertHistory(): void {\n    this.alertHistory = [];\n  }\n}","import { SkerError, SystemError, BusinessError, IntegrationError, SecurityError } from '../errors/index.js';\nimport { ERROR_CODES } from '../codes/index.js';\n\nexport class ErrorTestHelper {\n  private collectedErrors: any[] = [];\n  private originalErrorHandlers: any = {};\n\n  constructor() {\n    this.setupErrorCapture();\n  }\n\n  private setupErrorCapture(): void {\n    // 捕获进程错误事件用于测试\n    const originalUnhandledRejection = process.listeners('unhandledRejection');\n    const originalUncaughtException = process.listeners('uncaughtException');\n\n    this.originalErrorHandlers = {\n      unhandledRejection: originalUnhandledRejection,\n      uncaughtException: originalUncaughtException\n    };\n\n    process.on('unhandledRejection', (error) => {\n      this.collectedErrors.push({\n        type: 'unhandledRejection',\n        error,\n        timestamp: new Date()\n      });\n    });\n\n    process.on('uncaughtException', (error) => {\n      this.collectedErrors.push({\n        type: 'uncaughtException',\n        error,\n        timestamp: new Date()\n      });\n    });\n  }\n\n  collectError(error: any): void {\n    this.collectedErrors.push({\n      type: 'manual',\n      error,\n      timestamp: new Date()\n    });\n  }\n\n  getCollectedErrors(): any[] {\n    return [...this.collectedErrors];\n  }\n\n  getErrorsByType(type: string): any[] {\n    return this.collectedErrors.filter(item => item.type === type);\n  }\n\n  getErrorCount(): number {\n    return this.collectedErrors.length;\n  }\n\n  hasErrorOfType(errorType: typeof SkerError): boolean {\n    return this.collectedErrors.some(item => item.error instanceof errorType);\n  }\n\n  hasErrorWithCode(code: string): boolean {\n    return this.collectedErrors.some(item => \n      item.error instanceof SkerError && item.error.code === code\n    );\n  }\n\n  reset(): void {\n    this.collectedErrors = [];\n  }\n\n  cleanup(): void {\n    this.reset();\n    // 恢复原始错误处理器\n    process.removeAllListeners('unhandledRejection');\n    process.removeAllListeners('uncaughtException');\n    \n    this.originalErrorHandlers.unhandledRejection.forEach((listener: any) => {\n      process.on('unhandledRejection', listener);\n    });\n    \n    this.originalErrorHandlers.uncaughtException.forEach((listener: any) => {\n      process.on('uncaughtException', listener);\n    });\n  }\n}\n\nexport class MockErrorProvider {\n  static createSystemError(options?: Partial<{\n    code: string;\n    message: string;\n    context: Record<string, any>;\n  }>): SystemError {\n    return new SystemError({\n      code: options?.code || ERROR_CODES.GENERIC_ERROR,\n      message: options?.message || 'Mock system error',\n      context: options?.context || { mock: true }\n    });\n  }\n\n  static createBusinessError(options?: Partial<{\n    code: string;\n    message: string;\n    context: Record<string, any>;\n  }>): BusinessError {\n    return new BusinessError({\n      code: options?.code || ERROR_CODES.VALIDATION_FAILED,\n      message: options?.message || 'Mock business error',\n      context: options?.context || { mock: true }\n    });\n  }\n\n  static createIntegrationError(options?: Partial<{\n    code: string;\n    message: string;\n    context: Record<string, any>;\n  }>): IntegrationError {\n    return new IntegrationError({\n      code: options?.code || ERROR_CODES.EXTERNAL_SERVICE_UNAVAILABLE,\n      message: options?.message || 'Mock integration error',\n      context: options?.context || { mock: true }\n    });\n  }\n\n  static createSecurityError(options?: Partial<{\n    code: string;\n    message: string;\n    context: Record<string, any>;\n  }>): SecurityError {\n    return new SecurityError({\n      code: options?.code || ERROR_CODES.AUTHENTICATION_FAILED,\n      message: options?.message || 'Mock security error',\n      context: options?.context || { mock: true }\n    });\n  }\n\n  static createGenericError(message: string = 'Mock error'): Error {\n    return new Error(message);\n  }\n\n  static createAsyncError(delay: number = 100, error?: Error): Promise<never> {\n    return new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(error || new Error('Mock async error'));\n      }, delay);\n    });\n  }\n}\n\n// 自定义断言扩展\nexport interface ErrorAssertions {\n  toThrowSkerError(expectedCode?: string): void;\n  toMatchErrorPattern(pattern: {\n    code?: string;\n    category?: string;\n    message?: string;\n    httpStatusCode?: number;\n  }): void;\n  toHaveErrorDetails(expectedDetails?: any[]): void;\n  toBeRetryableError(): void;\n  toBeNonRetryableError(): void;\n}\n\nexport function extendExpect(expect: any): void {\n  expect.extend({\n    toThrowSkerError(received: any, expectedCode?: string) {\n      let pass = false;\n      let message = '';\n\n      try {\n        if (typeof received === 'function') {\n          received();\n        }\n      } catch (error) {\n        if (error instanceof SkerError) {\n          if (expectedCode) {\n            pass = error.code === expectedCode;\n            message = pass \n              ? `Expected SkerError with code ${expectedCode}` \n              : `Expected SkerError with code ${expectedCode}, but got ${error.code}`;\n          } else {\n            pass = true;\n            message = 'Expected SkerError';\n          }\n        } else {\n          pass = false;\n          message = `Expected SkerError, but got ${error?.constructor?.name || 'unknown error'}`;\n        }\n      }\n\n      return {\n        message: () => message,\n        pass\n      };\n    },\n\n    toMatchErrorPattern(received: any, pattern: {\n      code?: string;\n      category?: string;\n      message?: string;\n      httpStatusCode?: number;\n    }) {\n      if (!(received instanceof SkerError)) {\n        return {\n          message: () => `Expected SkerError, but got ${received?.constructor?.name || 'unknown'}`,\n          pass: false\n        };\n      }\n\n      const failures: string[] = [];\n\n      if (pattern.code && received.code !== pattern.code) {\n        failures.push(`code: expected ${pattern.code}, got ${received.code}`);\n      }\n\n      if (pattern.category && received.category !== pattern.category) {\n        failures.push(`category: expected ${pattern.category}, got ${received.category}`);\n      }\n\n      if (pattern.message && !received.message.includes(pattern.message)) {\n        failures.push(`message: expected to include \"${pattern.message}\", got \"${received.message}\"`);\n      }\n\n      if (pattern.httpStatusCode && received.httpStatusCode !== pattern.httpStatusCode) {\n        failures.push(`httpStatusCode: expected ${pattern.httpStatusCode}, got ${received.httpStatusCode}`);\n      }\n\n      const pass = failures.length === 0;\n      const message = pass \n        ? `Expected error to not match pattern`\n        : `Error pattern mismatch: ${failures.join(', ')}`;\n\n      return {\n        message: () => message,\n        pass\n      };\n    },\n\n    toHaveErrorDetails(received: any, expectedDetails?: any[]) {\n      if (!(received instanceof SkerError)) {\n        return {\n          message: () => `Expected SkerError, but got ${received?.constructor?.name || 'unknown'}`,\n          pass: false\n        };\n      }\n\n      if (!expectedDetails) {\n        const pass = received.details && received.details.length > 0;\n        return {\n          message: () => pass \n            ? 'Expected error to not have details'\n            : 'Expected error to have details',\n          pass\n        };\n      }\n\n      const pass = JSON.stringify(received.details) === JSON.stringify(expectedDetails);\n      return {\n        message: () => pass\n          ? 'Expected error details to not match'\n          : `Expected error details to match ${JSON.stringify(expectedDetails)}, got ${JSON.stringify(received.details)}`,\n        pass\n      };\n    }\n  });\n}\n\n// 测试工具函数\nexport function createTestError(type: 'system' | 'business' | 'integration' | 'security' = 'system'): SkerError {\n  switch (type) {\n    case 'business':\n      return MockErrorProvider.createBusinessError();\n    case 'integration':\n      return MockErrorProvider.createIntegrationError();\n    case 'security':\n      return MockErrorProvider.createSecurityError();\n    default:\n      return MockErrorProvider.createSystemError();\n  }\n}\n\nexport async function expectAsyncError(\n  asyncFn: () => Promise<any>,\n  expectedErrorType?: typeof SkerError,\n  expectedCode?: string\n): Promise<void> {\n  let error: any;\n  \n  try {\n    await asyncFn();\n    throw new Error('Expected function to throw, but it did not');\n  } catch (e) {\n    error = e;\n  }\n\n  if (expectedErrorType && !(error instanceof expectedErrorType)) {\n    throw new Error(`Expected ${expectedErrorType.name}, but got ${error?.constructor?.name || 'unknown'}`);\n  }\n\n  if (expectedCode && error instanceof SkerError && error.code !== expectedCode) {\n    throw new Error(`Expected error code ${expectedCode}, but got ${error.code}`);\n  }\n}\n\nexport function mockAsyncOperation<T>(\n  result: T,\n  delay: number = 100,\n  shouldFail: boolean = false,\n  error?: Error\n): () => Promise<T> {\n  return () => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldFail) {\n        reject(error || new Error('Mock operation failed'));\n      } else {\n        resolve(result);\n      }\n    }, delay);\n  });\n}","import { ErrorCategory } from '../types/index.js';\nimport { ErrorCollector, setupGlobalErrorHandling } from '../monitoring/index.js';\nimport { DEFAULT_RETRY_STRATEGY, DEFAULT_CIRCUIT_BREAKER } from '../strategies/index.js';\n\nexport interface ErrorHandlingConfig {\n  global?: {\n    includeStackTrace?: boolean;\n    maxContextDepth?: number;\n    sensitiveFields?: string[];\n    httpStatusMapping?: Record<ErrorCategory, number>;\n  };\n  retry?: {\n    defaultMaxAttempts?: number;\n    defaultInitialDelay?: number;\n    defaultBackoffMultiplier?: number;\n    defaultMaxDelay?: number;\n  };\n  circuitBreaker?: {\n    defaultFailureThreshold?: number;\n    defaultResetTimeout?: number;\n    defaultMonitoringPeriod?: number;\n  };\n  collection?: {\n    enabled?: boolean;\n    samplingRate?: number;\n    batchSize?: number;\n    flushInterval?: number;\n  };\n  monitoring?: {\n    enabled?: boolean;\n    metricsInterval?: number;\n    alertingEnabled?: boolean;\n  };\n}\n\nlet globalConfig: ErrorHandlingConfig = {\n  global: {\n    includeStackTrace: process.env.NODE_ENV !== 'production',\n    maxContextDepth: 5,\n    sensitiveFields: ['password', 'token', 'creditCard', 'ssn'],\n    httpStatusMapping: {\n      business: 400,\n      system: 500,\n      integration: 502,\n      security: 401\n    }\n  },\n  retry: {\n    defaultMaxAttempts: 3,\n    defaultInitialDelay: 1000,\n    defaultBackoffMultiplier: 2,\n    defaultMaxDelay: 30000\n  },\n  circuitBreaker: {\n    defaultFailureThreshold: 5,\n    defaultResetTimeout: 60000,\n    defaultMonitoringPeriod: 10000\n  },\n  collection: {\n    enabled: true,\n    samplingRate: 1.0,\n    batchSize: 100,\n    flushInterval: 5000\n  },\n  monitoring: {\n    enabled: true,\n    metricsInterval: 30000,\n    alertingEnabled: process.env.NODE_ENV === 'production'\n  }\n};\n\nexport function configureErrorHandling(config: ErrorHandlingConfig): void {\n  // 深度合并配置\n  globalConfig = deepMerge(globalConfig, config);\n\n  // 应用全局配置\n  if (globalConfig.collection?.enabled) {\n    const collector = new ErrorCollector({\n      samplingRate: globalConfig.collection.samplingRate\n    });\n    \n    setupGlobalErrorHandling(collector);\n  }\n\n  // 配置默认策略\n  if (globalConfig.retry) {\n    Object.assign(DEFAULT_RETRY_STRATEGY, {\n      maxAttempts: globalConfig.retry.defaultMaxAttempts,\n      initialDelay: globalConfig.retry.defaultInitialDelay,\n      backoffMultiplier: globalConfig.retry.defaultBackoffMultiplier,\n      maxDelay: globalConfig.retry.defaultMaxDelay\n    });\n  }\n\n  if (globalConfig.circuitBreaker) {\n    Object.assign(DEFAULT_CIRCUIT_BREAKER, {\n      failureThreshold: globalConfig.circuitBreaker.defaultFailureThreshold,\n      resetTimeout: globalConfig.circuitBreaker.defaultResetTimeout,\n      monitoringPeriod: globalConfig.circuitBreaker.defaultMonitoringPeriod\n    });\n  }\n}\n\nexport function getErrorHandlingConfig(): ErrorHandlingConfig {\n  return JSON.parse(JSON.stringify(globalConfig));\n}\n\nexport function resetErrorHandlingConfig(): void {\n  globalConfig = {\n    global: {\n      includeStackTrace: process.env.NODE_ENV !== 'production',\n      maxContextDepth: 5,\n      sensitiveFields: ['password', 'token', 'creditCard', 'ssn'],\n      httpStatusMapping: {\n        business: 400,\n        system: 500,\n        integration: 502,\n        security: 401\n      }\n    },\n    retry: {\n      defaultMaxAttempts: 3,\n      defaultInitialDelay: 1000,\n      defaultBackoffMultiplier: 2,\n      defaultMaxDelay: 30000\n    },\n    circuitBreaker: {\n      defaultFailureThreshold: 5,\n      defaultResetTimeout: 60000,\n      defaultMonitoringPeriod: 10000\n    },\n    collection: {\n      enabled: true,\n      samplingRate: 1.0,\n      batchSize: 100,\n      flushInterval: 5000\n    },\n    monitoring: {\n      enabled: true,\n      metricsInterval: 30000,\n      alertingEnabled: process.env.NODE_ENV === 'production'\n    }\n  };\n}\n\nfunction deepMerge(target: any, source: any): any {\n  const result = { ...target };\n  \n  for (const key in source) {\n    if (source[key] !== null && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n      result[key] = deepMerge(target[key] || {}, source[key]);\n    } else {\n      result[key] = source[key];\n    }\n  }\n  \n  return result;\n}\n\n// 环境变量配置\nexport function configureFromEnvironment(): void {\n  const envConfig: ErrorHandlingConfig = {};\n\n  // 全局配置\n  if (process.env.SKER_ERROR_INCLUDE_STACK_TRACE) {\n    envConfig.global = envConfig.global || {};\n    envConfig.global.includeStackTrace = process.env.SKER_ERROR_INCLUDE_STACK_TRACE === 'true';\n  }\n\n  if (process.env.SKER_ERROR_MAX_CONTEXT_DEPTH) {\n    envConfig.global = envConfig.global || {};\n    envConfig.global.maxContextDepth = parseInt(process.env.SKER_ERROR_MAX_CONTEXT_DEPTH, 10);\n  }\n\n  if (process.env.SKER_ERROR_SENSITIVE_FIELDS) {\n    envConfig.global = envConfig.global || {};\n    envConfig.global.sensitiveFields = process.env.SKER_ERROR_SENSITIVE_FIELDS.split(',');\n  }\n\n  // 重试配置\n  if (process.env.SKER_RETRY_MAX_ATTEMPTS) {\n    envConfig.retry = envConfig.retry || {};\n    envConfig.retry.defaultMaxAttempts = parseInt(process.env.SKER_RETRY_MAX_ATTEMPTS, 10);\n  }\n\n  if (process.env.SKER_RETRY_INITIAL_DELAY) {\n    envConfig.retry = envConfig.retry || {};\n    envConfig.retry.defaultInitialDelay = parseInt(process.env.SKER_RETRY_INITIAL_DELAY, 10);\n  }\n\n  // 熔断器配置\n  if (process.env.SKER_CIRCUIT_BREAKER_FAILURE_THRESHOLD) {\n    envConfig.circuitBreaker = envConfig.circuitBreaker || {};\n    envConfig.circuitBreaker.defaultFailureThreshold = parseInt(process.env.SKER_CIRCUIT_BREAKER_FAILURE_THRESHOLD, 10);\n  }\n\n  if (process.env.SKER_CIRCUIT_BREAKER_RESET_TIMEOUT) {\n    envConfig.circuitBreaker = envConfig.circuitBreaker || {};\n    envConfig.circuitBreaker.defaultResetTimeout = parseInt(process.env.SKER_CIRCUIT_BREAKER_RESET_TIMEOUT, 10);\n  }\n\n  // 收集配置\n  if (process.env.SKER_ERROR_COLLECTION_ENABLED) {\n    envConfig.collection = envConfig.collection || {};\n    envConfig.collection.enabled = process.env.SKER_ERROR_COLLECTION_ENABLED === 'true';\n  }\n\n  if (process.env.SKER_ERROR_SAMPLING_RATE) {\n    envConfig.collection = envConfig.collection || {};\n    envConfig.collection.samplingRate = parseFloat(process.env.SKER_ERROR_SAMPLING_RATE);\n  }\n\n  // 监控配置\n  if (process.env.SKER_MONITORING_ENABLED) {\n    envConfig.monitoring = envConfig.monitoring || {};\n    envConfig.monitoring.enabled = process.env.SKER_MONITORING_ENABLED === 'true';\n  }\n\n  if (process.env.SKER_MONITORING_METRICS_INTERVAL) {\n    envConfig.monitoring = envConfig.monitoring || {};\n    envConfig.monitoring.metricsInterval = parseInt(process.env.SKER_MONITORING_METRICS_INTERVAL, 10);\n  }\n\n  if (Object.keys(envConfig).length > 0) {\n    configureErrorHandling(envConfig);\n  }\n}\n\n// 预设配置\nexport const DEVELOPMENT_CONFIG: ErrorHandlingConfig = {\n  global: {\n    includeStackTrace: true,\n    maxContextDepth: 10\n  },\n  collection: {\n    enabled: true,\n    samplingRate: 1.0\n  },\n  monitoring: {\n    enabled: true,\n    alertingEnabled: false\n  }\n};\n\nexport const PRODUCTION_CONFIG: ErrorHandlingConfig = {\n  global: {\n    includeStackTrace: false,\n    maxContextDepth: 3\n  },\n  collection: {\n    enabled: true,\n    samplingRate: 0.1\n  },\n  monitoring: {\n    enabled: true,\n    alertingEnabled: true\n  }\n};\n\nexport const TESTING_CONFIG: ErrorHandlingConfig = {\n  global: {\n    includeStackTrace: true,\n    maxContextDepth: 5\n  },\n  collection: {\n    enabled: false\n  },\n  monitoring: {\n    enabled: false,\n    alertingEnabled: false\n  }\n};","// Types\nexport * from './types/index.js';\n\n// Error Codes\nexport {\n  SYSTEM_ERROR_CODES,\n  BUSINESS_ERROR_CODES,\n  INTEGRATION_ERROR_CODES,\n  SECURITY_ERROR_CODES,\n  ERROR_CODES,\n  type ErrorCode,\n  getErrorCategory,\n  getHttpStatusForCategory,\n  getHttpStatusForErrorCode,\n  HTTP_STATUS_MAPPING\n} from './codes/index.js';\n\n// Core Error Classes\nexport * from './errors/index.js';\n\n// Response Formatting\nexport * from './responses/index.js';\n\n// Recovery Strategies\nexport * from './strategies/index.js';\n\n// Decorators\nexport * from './decorators/index.js';\n\n// Monitoring\nexport * from './monitoring/index.js';\n\n// Testing Utilities\nexport * from './testing/index.js';\n\n// Configuration\nexport * from './config/index.js';\n\n// Context and Propagation\nimport { ErrorContext } from './types/index.js';\nimport { SkerError, wrapError } from './errors/index.js';\nimport { getGlobalErrorCollector } from './monitoring/index.js';\n\nlet currentErrorContext: ErrorContext | null = null;\n\nexport async function withErrorContext<T>(\n  context: ErrorContext,\n  fn: () => Promise<T>\n): Promise<T> {\n  const previousContext = currentErrorContext;\n  currentErrorContext = { ...previousContext, ...context };\n  \n  try {\n    return await fn();\n  } catch (error) {\n    // 自动添加上下文信息到错误\n    const enrichedError = error instanceof SkerError \n      ? error.withContext(currentErrorContext) \n      : wrapError(error, currentErrorContext);\n    \n    // 收集错误\n    getGlobalErrorCollector().collect(enrichedError, currentErrorContext);\n    \n    throw enrichedError;\n  } finally {\n    currentErrorContext = previousContext;\n  }\n}\n\nexport function getCurrentErrorContext(): ErrorContext | null {\n  return currentErrorContext ? { ...currentErrorContext } : null;\n}\n\nexport class ErrorPropagator {\n  constructor(\n    private options: {\n      includeStackTrace?: boolean;\n      includeContext?: boolean;\n      maxContextDepth?: number;\n    } = {}\n  ) {}\n\n  propagate(error: any, additionalContext?: Record<string, any>): SkerError {\n    const context = {\n      ...getCurrentErrorContext(),\n      ...additionalContext\n    };\n\n    // 应用配置选项\n    if (!this.options.includeContext) {\n      // 如果不包含上下文，则清空上下文\n      Object.keys(context).forEach(key => delete context[key]);\n    }\n\n    if (error instanceof SkerError) {\n      return error.withContext(context);\n    }\n\n    return wrapError(error, context);\n  }\n}\n\n// Version info\nexport const VERSION = '1.0.0';\n\n// Auto-configure from environment on import\nimport { configureFromEnvironment } from './config/index.js';\nconfigureFromEnvironment();"],"mappings":"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","names":["args","pass"]}