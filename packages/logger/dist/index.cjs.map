{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/logger.ts","../src/outputs.ts","../src/tracing.ts","../src/performance.ts","../src/core-logger.ts","../src/processors.ts","../src/factory.ts","../src/middleware.ts"],"sourcesContent":["export { \n  LogLevel, \n  LogFormat\n} from './types.js';\n\nexport type { \n  LogEntry, \n  LoggerConfig, \n  ServiceInfo,\n  LogContext,\n  LogMetadata,\n  TraceContext,\n  Span,\n  TracingConfig,\n  PerformanceConfig,\n  OutputConfig,\n  OutputAdapter,\n  BatchOutputAdapter,\n  LogFilter,\n  ContextProvider,\n  MetricValue,\n  PerformanceMetrics,\n  MonitoringDecorator,\n  ErrorReportingConfig,\n  LoggerMiddlewareConfig,\n  // New Core Logger types\n  CoreLoggerOptions,\n  StructuredLogData,\n  LogProcessor,\n  TracingProcessor,\n  PerformanceProcessor,\n  SecurityProcessor,\n  EnhancedOutputConfig\n} from './types.js';\n\nexport { Logger } from './logger.js';\nexport { TracingLogger, createTraceContext } from './tracing.js';\nexport { PerformanceLogger } from './performance.js';\n\n// New Core Logger exports\nexport { CoreLogger } from './core-logger.js';\nexport { \n  PerformanceLogProcessor,\n  TracingLogProcessor,\n  SecurityLogProcessor,\n  ErrorEnhancementProcessor,\n  AggregationProcessor\n} from './processors.js';\n\nexport { \n  ConsoleOutputAdapter,\n  FileOutputAdapter,\n  ElasticsearchOutputAdapter,\n  BatchElasticsearchOutputAdapter,\n  MultiOutputAdapter,\n  createFilter\n} from './outputs.js';\n\nexport {\n  createLogger,\n  createConsoleLogger,\n  createFileLogger,\n  createElasticsearchLogger,\n  createProductionLogger,\n  createDevelopmentLogger,\n  createTestLogger,\n  createStructuredLogger,\n  createOutputAdapter\n} from './factory.js';\n\nexport {\n  createLoggerMiddleware,\n  createKoaLoggerMiddleware,\n  createGrpcLoggerInterceptor,\n  createFastifyPlugin\n} from './middleware.js';\n\n","export enum LogLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  FATAL = 5\n}\n\nexport enum LogFormat {\n  JSON = 'json',\n  PRETTY = 'pretty',\n  TEXT = 'text'\n}\n\nexport interface ServiceInfo {\n  name: string;\n  version: string;\n  instance_id?: string;\n  environment?: string;\n}\n\nexport interface LogMetadata {\n  source_file?: string;\n  function_name?: string;\n  line_number?: number;\n  [key: string]: any;\n}\n\nexport interface LogContext {\n  request_id?: string;\n  trace_id?: string;\n  span_id?: string;\n  user_id?: string;\n  correlation_id?: string;\n  [key: string]: any;\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  service: ServiceInfo;\n  context?: LogContext;\n  metadata?: LogMetadata;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n    code?: string | number;\n  };\n}\n\nexport interface TraceContext {\n  traceId: string;\n  spanId: string;\n  parentSpanId?: string;\n  flags?: number;\n  baggage?: Record<string, string>;\n}\n\nexport interface Span {\n  spanId: string;\n  traceId: string;\n  operationName: string;\n  startTime: number;\n  endTime?: number;\n  tags: Record<string, any>;\n  logs: Array<{\n    timestamp: number;\n    fields: Record<string, any>;\n  }>;\n  references: Array<{\n    type: 'childOf' | 'followsFrom';\n    spanContext: TraceContext;\n  }>;\n  \n  setTag(key: string, value: any): Span;\n  log(fields: Record<string, any>): Span;\n  recordException(error: Error): Span;\n  end(): void;\n}\n\nexport interface TracingConfig {\n  enabled: boolean;\n  sampling: number;\n  exporters?: string[];\n  serviceName?: string;\n}\n\nexport interface PerformanceConfig {\n  enabled: boolean;\n  includeSystemMetrics: boolean;\n  customMetrics?: string[];\n  metricsInterval?: number;\n}\n\nexport interface OutputConfig {\n  type: 'console' | 'file' | 'elasticsearch' | 'custom';\n  enabled: boolean;\n  format?: LogFormat;\n  config?: {\n    filename?: string;\n    maxSize?: string;\n    maxFiles?: number;\n    compress?: boolean;\n    host?: string;\n    index?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface LoggerConfig {\n  name?: string;\n  service?: ServiceInfo;\n  level?: LogLevel;\n  format?: LogFormat;\n  outputs?: OutputConfig[];\n  tracing?: TracingConfig;\n  performance?: PerformanceConfig;\n  context?: {\n    autoInjectTraceId?: boolean;\n    autoInjectRequestId?: boolean;\n    includeSourceInfo?: boolean;\n  };\n  filters?: Array<(entry: LogEntry) => LogEntry | null>;\n  async?: boolean;\n  bufferSize?: number;\n  flushInterval?: number;\n  onError?: (error: Error) => void;\n}\n\nexport interface OutputAdapter {\n  write(entry: LogEntry): Promise<void> | void;\n  close?(): Promise<void> | void;\n  flush?(): Promise<void> | void;\n}\n\nexport interface BatchOutputAdapter extends OutputAdapter {\n  writeBatch(entries: LogEntry[]): Promise<void> | void;\n}\n\nexport interface LogFilter {\n  condition: (entry: LogEntry) => boolean;\n  transform: (entry: LogEntry) => LogEntry | null;\n}\n\nexport interface ContextProvider {\n  getContext(): LogContext;\n}\n\nexport interface MetricValue {\n  name: string;\n  value: number;\n  tags?: Record<string, string>;\n  timestamp?: number;\n}\n\nexport interface PerformanceMetrics {\n  cpu_usage_percent?: number;\n  memory_usage_bytes?: number;\n  response_time_ms?: number;\n  request_count?: number;\n  error_count?: number;\n  [key: string]: any;\n}\n\nexport interface MonitoringDecorator {\n  (target: any, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor;\n}\n\nexport interface ErrorReportingConfig {\n  enabled: boolean;\n  service?: string;\n  config?: Record<string, any>;\n}\n\nexport interface LoggerMiddlewareConfig {\n  logger: any;\n  includeRequest?: boolean;\n  includeResponse?: boolean;\n  sensitiveFields?: string[];\n  logRequests?: boolean;\n  logResponses?: boolean;\n  logErrors?: boolean;\n  logCalls?: boolean;\n  logResults?: boolean;\n}\n\n// Core Logger Types for @sker/core integration\n\nexport interface CoreLoggerOptions {\n  serviceName?: string;\n  version?: string;\n  environment?: string;\n  config?: Record<string, any>;\n  plugins?: any[];\n  lifecycle?: any;\n  logger?: LoggerConfig;\n}\n\nexport interface StructuredLogData {\n  [key: string]: any;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n    code?: string | number;\n  };\n  performance?: {\n    duration?: number;\n    memory?: number;\n    cpu?: number;\n  };\n  tracing?: {\n    traceId?: string;\n    spanId?: string;\n    parentSpanId?: string;\n  };\n}\n\nexport interface LogProcessor {\n  name: string;\n  process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined>;\n}\n\nexport interface TracingProcessor extends LogProcessor {\n  startSpan(operation: string, context?: LogContext): string;\n  endSpan(spanId: string, result?: 'success' | 'error'): void;\n}\n\nexport interface PerformanceProcessor extends LogProcessor {\n  startMeasurement(operation: string): string;\n  endMeasurement(measurementId: string): { duration: number; memory: number };\n}\n\nexport interface SecurityProcessor extends LogProcessor {\n  sanitizeData(data: StructuredLogData): StructuredLogData;\n  checkSensitiveFields(data: StructuredLogData): boolean;\n}\n\n// Enhanced output adapters for structured logging\n\nexport interface ElasticsearchOutputConfig {\n  type: 'elasticsearch';\n  enabled: boolean;\n  config: {\n    host: string;\n    port?: number;\n    index: string;\n    indexPattern?: string;\n    username?: string;\n    password?: string;\n    apiKey?: string;\n    ssl?: boolean;\n    maxRetries?: number;\n    requestTimeout?: number;\n    batchSize?: number;\n    flushInterval?: number;\n  };\n}\n\nexport interface FileOutputConfig {\n  type: 'file';\n  enabled: boolean;\n  config: {\n    filename: string;\n    maxSize: string;\n    maxFiles: number;\n    compress?: boolean;\n    datePattern?: string;\n    createSymlink?: boolean;\n    symlinkName?: string;\n  };\n}\n\nexport interface SyslogOutputConfig {\n  type: 'syslog';\n  enabled: boolean;\n  config: {\n    host: string;\n    port: number;\n    protocol: 'tcp' | 'udp';\n    facility?: number;\n    appName?: string;\n    hostname?: string;\n  };\n}\n\nexport type EnhancedOutputConfig = \n  | OutputConfig\n  | ElasticsearchOutputConfig \n  | FileOutputConfig \n  | SyslogOutputConfig;","import { EventEmitter } from 'events';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { \n  LogLevel, \n  LogFormat, \n  LogEntry, \n  LoggerConfig, \n  OutputAdapter, \n  LogContext, \n  LogMetadata,\n  ContextProvider \n} from './types.js';\nimport { ConsoleOutputAdapter } from './outputs.js';\n\nexport class Logger extends EventEmitter {\n  private config: Required<LoggerConfig>;\n  private outputs: OutputAdapter[] = [];\n  private contextStorage = new AsyncLocalStorage<LogContext>();\n  private buffer: LogEntry[] = [];\n  private flushTimer?: NodeJS.Timeout;\n  private contextProvider?: ContextProvider;\n\n  constructor(config: LoggerConfig = {}) {\n    super();\n    \n    this.config = {\n      name: config.name || 'default',\n      service: config.service || { \n        name: config.name || 'unknown', \n        version: '1.0.0' \n      },\n      level: config.level || LogLevel.INFO,\n      format: config.format || LogFormat.JSON,\n      outputs: config.outputs || [{ type: 'console', enabled: true }],\n      tracing: config.tracing || { enabled: false, sampling: 0.1 },\n      performance: config.performance || { \n        enabled: false, \n        includeSystemMetrics: false \n      },\n      context: config.context || {\n        autoInjectTraceId: true,\n        autoInjectRequestId: true,\n        includeSourceInfo: false\n      },\n      filters: config.filters || [],\n      async: config.async || false,\n      bufferSize: config.bufferSize || 1000,\n      flushInterval: config.flushInterval || 5000,\n      onError: config.onError || ((error: Error) => {\n        console.error('[Logger Error]:', error);\n      })\n    };\n\n    this.initializeOutputs();\n    \n    if (this.config.async) {\n      this.startFlushTimer();\n    }\n\n    // contextProvider can be set externally if needed\n  }\n\n  private initializeOutputs(): void {\n    this.outputs = this.config.outputs\n      .filter(output => output.enabled)\n      .map(outputConfig => this.createOutputAdapter(outputConfig));\n  }\n\n  private createOutputAdapter(config: any): OutputAdapter {\n    return new ConsoleOutputAdapter(config.format || this.config.format);\n  }\n\n  private startFlushTimer(): void {\n    this.flushTimer = setInterval(() => {\n      this.flush().catch(this.config.onError);\n    }, this.config.flushInterval);\n  }\n\n  protected getCurrentContext(): LogContext {\n    let context: LogContext = {};\n\n    if (this.contextProvider) {\n      context = { ...context, ...this.contextProvider.getContext() };\n    }\n\n    const storageContext = this.contextStorage.getStore();\n    if (storageContext) {\n      context = { ...context, ...storageContext };\n    }\n\n    if (this.config.context.autoInjectRequestId && !context.request_id) {\n      context.request_id = this.generateUUID();\n    }\n\n    if (this.config.context.autoInjectTraceId && !context.trace_id) {\n      context.trace_id = this.generateTraceId();\n    }\n\n    return context;\n  }\n\n  private getSourceInfo(): LogMetadata {\n    if (!this.config.context.includeSourceInfo) {\n      return {};\n    }\n\n    const stack = new Error().stack;\n    if (!stack) return {};\n\n    const stackLines = stack.split('\\n');\n    const callerLine = stackLines[4] || '';\n    \n    if (callerLine) {\n      const match = callerLine.match(/at\\s+(.+?)\\s+\\((.+?):(\\d+):\\d+\\)/);\n      if (match) {\n        return {\n          function_name: match[1],\n          source_file: match[2],\n          line_number: parseInt(match[3]!, 10)\n        };\n      }\n    }\n\n    return {};\n  }\n\n  private createLogEntry(\n    level: LogLevel, \n    message: string, \n    context?: LogContext,\n    error?: Error\n  ): LogEntry {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      service: this.config.service,\n      context: { ...this.getCurrentContext(), ...context },\n      metadata: this.getSourceInfo()\n    };\n\n    if (error) {\n      entry.error = {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n        code: (error as any).code\n      };\n    }\n\n    return entry;\n  }\n\n  private applyFilters(entry: LogEntry): LogEntry | null {\n    let filteredEntry: LogEntry | null = entry;\n    \n    for (const filter of this.config.filters) {\n      filteredEntry = filter(filteredEntry!);\n      if (!filteredEntry) {\n        return null;\n      }\n    }\n    \n    return filteredEntry;\n  }\n\n  private async writeEntry(entry: LogEntry): Promise<void> {\n    const filteredEntry = this.applyFilters(entry);\n    if (!filteredEntry) return;\n\n    if (this.config.async) {\n      this.buffer.push(filteredEntry);\n      if (this.buffer.length >= this.config.bufferSize) {\n        await this.flush();\n      }\n    } else {\n      await this.writeToOutputs(filteredEntry);\n    }\n  }\n\n  private async writeToOutputs(entry: LogEntry): Promise<void> {\n    const promises = this.outputs.map(async output => {\n      try {\n        await output.write(entry);\n      } catch (error) {\n        this.config.onError(error as Error);\n      }\n    });\n\n    await Promise.all(promises);\n  }\n\n  public isLevelEnabled(level: LogLevel): boolean {\n    return level >= this.config.level;\n  }\n\n  public setLevel(level: LogLevel): void {\n    this.config.level = level;\n  }\n\n  public child(context: LogContext): Logger {\n    const childConfig = { ...this.config };\n    const childLogger = new Logger(childConfig);\n    \n    childLogger.contextStorage = this.contextStorage;\n    childLogger.contextProvider = {\n      getContext: () => ({ ...this.getCurrentContext(), ...context })\n    };\n    \n    return childLogger;\n  }\n\n  public trace(message: string, context?: LogContext): void {\n    if (this.isLevelEnabled(LogLevel.TRACE)) {\n      this.writeEntry(this.createLogEntry(LogLevel.TRACE, message, context));\n    }\n  }\n\n  public debug(message: string, context?: LogContext): void {\n    if (this.isLevelEnabled(LogLevel.DEBUG)) {\n      this.writeEntry(this.createLogEntry(LogLevel.DEBUG, message, context));\n    }\n  }\n\n  public info(message: string, context?: LogContext): void {\n    if (this.isLevelEnabled(LogLevel.INFO)) {\n      this.writeEntry(this.createLogEntry(LogLevel.INFO, message, context));\n    }\n  }\n\n  public warn(message: string, context?: LogContext): void {\n    if (this.isLevelEnabled(LogLevel.WARN)) {\n      this.writeEntry(this.createLogEntry(LogLevel.WARN, message, context));\n    }\n  }\n\n  public error(message: string, context?: LogContext, error?: Error): void {\n    if (this.isLevelEnabled(LogLevel.ERROR)) {\n      this.writeEntry(this.createLogEntry(LogLevel.ERROR, message, context, error));\n    }\n  }\n\n  public fatal(message: string, context?: LogContext, error?: Error): void {\n    if (this.isLevelEnabled(LogLevel.FATAL)) {\n      this.writeEntry(this.createLogEntry(LogLevel.FATAL, message, context, error));\n    }\n  }\n\n  public async flush(): Promise<void> {\n    if (this.buffer.length === 0) return;\n\n    const entriesToFlush = [...this.buffer];\n    this.buffer = [];\n\n    const promises = entriesToFlush.map(entry => this.writeToOutputs(entry));\n    await Promise.all(promises);\n\n    const flushPromises = this.outputs\n      .filter(output => output.flush)\n      .map(output => output.flush!());\n    \n    await Promise.all(flushPromises);\n  }\n\n  public async close(): Promise<void> {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n\n    await this.flush();\n\n    const closePromises = this.outputs\n      .filter(output => output.close)\n      .map(output => output.close!());\n    \n    await Promise.all(closePromises);\n  }\n\n  public runInContext<T>(context: LogContext, fn: () => T): T {\n    return this.contextStorage.run(context, fn);\n  }\n\n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  private generateTraceId(): string {\n    return Math.random().toString(36).substr(2, 16);\n  }\n}","import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { \n  OutputAdapter, \n  BatchOutputAdapter, \n  LogEntry, \n  LogLevel, \n  LogFormat \n} from './types.js';\n\nexport class FileOutputAdapter implements OutputAdapter {\n  private writeStream?: fs.FileHandle;\n  private currentSize = 0;\n\n  constructor(private config: {\n    filename: string;\n    maxSize?: string;\n    maxFiles?: number;\n    compress?: boolean;\n  }) {}\n\n  async write(entry: LogEntry): Promise<void> {\n    if (!this.writeStream) {\n      await this.openFile();\n    }\n\n    const content = JSON.stringify(entry) + '\\n';\n    const size = Buffer.byteLength(content, 'utf8');\n    \n    if (this.shouldRotate(size)) {\n      await this.rotateFile();\n    }\n\n    await this.writeStream!.write(content);\n    this.currentSize += size;\n  }\n\n  private async openFile(): Promise<void> {\n    const dir = path.dirname(this.config.filename);\n    await fs.mkdir(dir, { recursive: true });\n    \n    this.writeStream = await fs.open(this.config.filename, 'a');\n    \n    const stats = await this.writeStream.stat();\n    this.currentSize = stats.size;\n  }\n\n  private shouldRotate(additionalSize: number): boolean {\n    if (!this.config.maxSize) return false;\n    \n    const maxBytes = this.parseSize(this.config.maxSize);\n    return this.currentSize + additionalSize > maxBytes;\n  }\n\n  private parseSize(size: string): number {\n    const units: Record<string, number> = {\n      'B': 1,\n      'KB': 1024,\n      'MB': 1024 * 1024,\n      'GB': 1024 * 1024 * 1024\n    };\n\n    const match = size.match(/^(\\d+(?:\\.\\d+)?)\\s*([KMGT]?B)$/i);\n    if (!match) {\n      throw new Error(`Invalid size format: ${size}`);\n    }\n\n    const [, value, unit] = match;\n    return parseFloat(value || '0') * (units[unit?.toUpperCase() || 'B'] || 1);\n  }\n\n  private async rotateFile(): Promise<void> {\n    if (this.writeStream) {\n      await this.writeStream.close();\n    }\n\n    const { dir, name, ext } = path.parse(this.config.filename);\n    \n    if (this.config.maxFiles && this.config.maxFiles > 0) {\n      for (let i = this.config.maxFiles - 1; i > 0; i--) {\n        const oldFile = path.join(dir, `${name}.${i}${ext}`);\n        const newFile = path.join(dir, `${name}.${i + 1}${ext}`);\n        \n        try {\n          await fs.rename(oldFile, newFile);\n        } catch (error) {\n        }\n      }\n      \n      const rotatedFile = path.join(dir, `${name}.1${ext}`);\n      try {\n        await fs.rename(this.config.filename, rotatedFile);\n        \n        if (this.config.compress) {\n          await this.compressFile(rotatedFile);\n        }\n      } catch (error) {\n        console.error('Failed to rotate log file:', error);\n      }\n    }\n\n    await this.openFile();\n    this.currentSize = 0;\n  }\n\n  private async compressFile(filename: string): Promise<void> {\n    console.log(`[FileOutputAdapter] Compression not implemented for: ${filename}`);\n  }\n\n  async flush(): Promise<void> {\n    if (this.writeStream) {\n      await this.writeStream.sync();\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.writeStream) {\n      await this.writeStream.close();\n      this.writeStream = undefined;\n    }\n  }\n}\n\nexport class ElasticsearchOutputAdapter implements OutputAdapter {\n  private readonly baseUrl: string;\n\n  constructor(private config: {\n    host: string;\n    index: string;\n    type?: string;\n    username?: string;\n    password?: string;\n  }) {\n    this.baseUrl = config.host.endsWith('/') ? config.host : `${config.host}/`;\n  }\n\n  async write(entry: LogEntry): Promise<void> {\n    try {\n      const url = `${this.baseUrl}${this.config.index}/${this.config.type || '_doc'}`;\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getAuthHeaders()\n        },\n        body: JSON.stringify(entry)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Elasticsearch write failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('[ElasticsearchOutputAdapter] Failed to write entry:', error);\n      throw error;\n    }\n  }\n\n  private getAuthHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    \n    if (this.config.username && this.config.password) {\n      const credentials = Buffer.from(`${this.config.username}:${this.config.password}`).toString('base64');\n      headers['Authorization'] = `Basic ${credentials}`;\n    }\n    \n    return headers;\n  }\n}\n\nexport class BatchElasticsearchOutputAdapter implements BatchOutputAdapter {\n  private buffer: LogEntry[] = [];\n  private timer?: NodeJS.Timeout;\n\n  constructor(\n    private config: {\n      host: string;\n      index: string;\n      type?: string;\n      username?: string;\n      password?: string;\n    },\n    private options: {\n      batchSize: number;\n      flushInterval: number;\n      maxRetries: number;\n    } = {\n      batchSize: 100,\n      flushInterval: 5000,\n      maxRetries: 3\n    }\n  ) {\n    this.startFlushTimer();\n  }\n\n  async write(entry: LogEntry): Promise<void> {\n    this.buffer.push(entry);\n    \n    if (this.buffer.length >= this.options.batchSize) {\n      await this.flush();\n    }\n  }\n\n  async writeBatch(entries: LogEntry[]): Promise<void> {\n    const baseUrl = this.config.host.endsWith('/') ? this.config.host : `${this.config.host}/`;\n    \n    const body = entries.flatMap(entry => [\n      { index: { _index: this.config.index, _type: this.config.type || '_doc' } },\n      entry\n    ]);\n\n    let retries = 0;\n    while (retries < this.options.maxRetries) {\n      try {\n        const response = await fetch(`${baseUrl}_bulk`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...this.getAuthHeaders()\n          },\n          body: body.map(item => JSON.stringify(item)).join('\\n') + '\\n'\n        });\n\n        if (!response.ok) {\n          throw new Error(`Elasticsearch bulk write failed: ${response.status} ${response.statusText}`);\n        }\n\n        const result = await response.json() as any;\n        if (result.errors) {\n          console.warn('[BatchElasticsearchOutputAdapter] Some documents failed to index:', result.items);\n        }\n\n        return;\n      } catch (error) {\n        retries++;\n        if (retries >= this.options.maxRetries) {\n          console.error('[BatchElasticsearchOutputAdapter] Failed to write batch after retries:', error);\n          throw error;\n        }\n        \n        await new Promise(resolve => setTimeout(resolve, 1000 * retries));\n      }\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.buffer.length === 0) return;\n\n    const entries = [...this.buffer];\n    this.buffer = [];\n\n    await this.writeBatch(entries);\n  }\n\n  private startFlushTimer(): void {\n    this.timer = setInterval(() => {\n      this.flush().catch(error => {\n        console.error('[BatchElasticsearchOutputAdapter] Timer flush failed:', error);\n      });\n    }, this.options.flushInterval);\n  }\n\n  private getAuthHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    \n    if (this.config.username && this.config.password) {\n      const credentials = Buffer.from(`${this.config.username}:${this.config.password}`).toString('base64');\n      headers['Authorization'] = `Basic ${credentials}`;\n    }\n    \n    return headers;\n  }\n\n  async close(): Promise<void> {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    \n    await this.flush();\n  }\n}\n\nexport class ConsoleOutputAdapter implements OutputAdapter {\n  constructor(private format: LogFormat = LogFormat.PRETTY) {}\n\n  write(entry: LogEntry): void {\n    const output = this.format === LogFormat.JSON \n      ? JSON.stringify(entry, null, 2)\n      : this.formatPretty(entry);\n    \n    const logFunction = this.getLogFunction(entry.level);\n    logFunction(output);\n  }\n\n  private getLogFunction(level: LogLevel): typeof console.log {\n    switch (level) {\n      case LogLevel.TRACE:\n      case LogLevel.DEBUG:\n        return console.debug;\n      case LogLevel.INFO:\n        return console.info;\n      case LogLevel.WARN:\n        return console.warn;\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        return console.error;\n      default:\n        return console.log;\n    }\n  }\n\n  private formatPretty(entry: LogEntry): string {\n    const levelColors: Record<LogLevel, string> = {\n      [LogLevel.TRACE]: '\\x1b[90m',    // Bright Black (Gray)\n      [LogLevel.DEBUG]: '\\x1b[36m',    // Cyan\n      [LogLevel.INFO]: '\\x1b[32m',     // Green  \n      [LogLevel.WARN]: '\\x1b[33m',     // Yellow\n      [LogLevel.ERROR]: '\\x1b[31m',    // Red\n      [LogLevel.FATAL]: '\\x1b[35m'     // Magenta\n    };\n    \n    const reset = '\\x1b[0m';\n    const color = levelColors[entry.level] || '';\n    \n    const level = LogLevel[entry.level].padEnd(5);\n    const timestamp = new Date(entry.timestamp).toLocaleString();\n    const service = `[${entry.service.name}]`;\n    \n    let output = `${color}${timestamp} ${level}${reset} ${service} ${entry.message}`;\n    \n    if (entry.context && Object.keys(entry.context).length > 0) {\n      output += ` ${JSON.stringify(entry.context)}`;\n    }\n    \n    if (entry.error) {\n      output += `\\n  ${color}Error: ${entry.error.message}${reset}`;\n      if (entry.error.stack) {\n        output += `\\n  ${color}Stack: ${entry.error.stack}${reset}`;\n      }\n    }\n    \n    return output;\n  }\n}\n\nexport class MultiOutputAdapter implements OutputAdapter {\n  constructor(private outputs: OutputAdapter[]) {}\n\n  async write(entry: LogEntry): Promise<void> {\n    const promises = this.outputs.map(async output => {\n      try {\n        await output.write(entry);\n      } catch (error) {\n        console.error('[MultiOutputAdapter] Output failed:', error);\n      }\n    });\n\n    await Promise.all(promises);\n  }\n\n  async flush(): Promise<void> {\n    const promises = this.outputs\n      .filter(output => output.flush)\n      .map(output => output.flush!());\n    \n    await Promise.all(promises);\n  }\n\n  async close(): Promise<void> {\n    const promises = this.outputs\n      .filter(output => output.close)\n      .map(output => output.close!());\n    \n    await Promise.all(promises);\n  }\n}\n\nexport function createFilter(options: {\n  condition: (entry: LogEntry) => boolean;\n  transform: (entry: LogEntry) => LogEntry | null;\n}) {\n  return (entry: LogEntry): LogEntry | null => {\n    if (options.condition(entry)) {\n      return options.transform(entry);\n    }\n    return entry;\n  };\n}","import { AsyncLocalStorage } from 'async_hooks';\nimport { Logger } from './logger.js';\nimport { \n  LoggerConfig, \n  TraceContext, \n  Span, \n  TracingConfig,\n  LogContext \n} from './types.js';\n\nexport class TracingLogger extends Logger {\n  private traceStorage = new AsyncLocalStorage<TraceContext>();\n  private activeSpans = new Map<string, SpanImpl>();\n  private tracingConfig: TracingConfig;\n\n  constructor(config: LoggerConfig = {}) {\n    super(config);\n    this.tracingConfig = config.tracing || { enabled: true, sampling: 0.1 };\n  }\n\n  public startSpan(operationName: string, parentSpan?: Span): Span {\n    if (!this.tracingConfig.enabled) {\n      return new NoOpSpan();\n    }\n\n    const traceContext = this.getCurrentTraceContext();\n    const spanId = this.createSpanId();\n    \n    const span = new SpanImpl({\n      spanId,\n      traceId: traceContext?.traceId || this.createTraceId(),\n      operationName,\n      startTime: Date.now(),\n      tags: {},\n      logs: [],\n      references: parentSpan ? [{\n        type: 'childOf',\n        spanContext: {\n          traceId: parentSpan.traceId,\n          spanId: parentSpan.spanId\n        }\n      }] : []\n    });\n\n    this.activeSpans.set(spanId, span);\n    \n    return span;\n  }\n\n  public getCurrentTraceContext(): TraceContext | undefined {\n    return this.traceStorage.getStore();\n  }\n\n  public runInTrace<T>(traceContext: TraceContext, fn: () => T): T {\n    return this.traceStorage.run(traceContext, fn);\n  }\n\n  public async runInTraceAsync<T>(traceContext: TraceContext, fn: () => Promise<T>): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.traceStorage.run(traceContext, async () => {\n        try {\n          const result = await fn();\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  protected override getCurrentContext(): LogContext {\n    const baseContext = super.getCurrentContext();\n    const traceContext = this.getCurrentTraceContext();\n    \n    if (traceContext) {\n      return {\n        ...baseContext,\n        trace_id: traceContext.traceId,\n        span_id: traceContext.spanId,\n        parent_span_id: traceContext.parentSpanId\n      };\n    }\n    \n    return baseContext;\n  }\n\n\n  private createTraceId(): string {\n    return Array.from({ length: 32 }, () => \n      Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n  }\n\n  private createSpanId(): string {\n    return Array.from({ length: 16 }, () => \n      Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n  }\n}\n\nclass SpanImpl implements Span {\n  public spanId: string;\n  public traceId: string;\n  public operationName: string;\n  public startTime: number;\n  public endTime?: number;\n  public tags: Record<string, any>;\n  public logs: Array<{ timestamp: number; fields: Record<string, any> }>;\n  public references: Array<{\n    type: 'childOf' | 'followsFrom';\n    spanContext: TraceContext;\n  }>;\n\n  constructor(data: {\n    spanId: string;\n    traceId: string;\n    operationName: string;\n    startTime: number;\n    tags: Record<string, any>;\n    logs: Array<{ timestamp: number; fields: Record<string, any> }>;\n    references: Array<{\n      type: 'childOf' | 'followsFrom';\n      spanContext: TraceContext;\n    }>;\n  }) {\n    this.spanId = data.spanId;\n    this.traceId = data.traceId;\n    this.operationName = data.operationName;\n    this.startTime = data.startTime;\n    this.tags = data.tags;\n    this.logs = data.logs;\n    this.references = data.references;\n  }\n\n  setTag(key: string, value: any): Span {\n    this.tags[key] = value;\n    return this;\n  }\n\n  log(fields: Record<string, any>): Span {\n    this.logs.push({\n      timestamp: Date.now(),\n      fields\n    });\n    return this;\n  }\n\n  recordException(error: Error): Span {\n    this.setTag('error', true);\n    this.log({\n      event: 'error',\n      'error.object': error,\n      'error.kind': error.constructor.name,\n      message: error.message,\n      stack: error.stack\n    });\n    return this;\n  }\n\n  end(): void {\n    this.endTime = Date.now();\n    \n    console.log(`[Span] ${this.operationName} completed in ${this.endTime - this.startTime}ms`, {\n      traceId: this.traceId,\n      spanId: this.spanId,\n      duration: this.endTime - this.startTime,\n      tags: this.tags,\n      logs: this.logs\n    });\n  }\n}\n\nclass NoOpSpan implements Span {\n  spanId = '';\n  traceId = '';\n  operationName = '';\n  startTime = 0;\n  endTime = 0;\n  tags = {};\n  logs = [];\n  references = [];\n\n  setTag(): Span { return this; }\n  log(): Span { return this; }\n  recordException(): Span { return this; }\n  end(): void {}\n}\n\nexport function createTraceContext(data: {\n  traceId?: string;\n  spanId?: string;\n  parentSpanId?: string;\n  flags?: number;\n  baggage?: Record<string, string>;\n}): TraceContext {\n  return {\n    traceId: data.traceId || createRandomTraceId(),\n    spanId: data.spanId || createRandomSpanId(),\n    parentSpanId: data.parentSpanId,\n    flags: data.flags || 0,\n    baggage: data.baggage || {}\n  };\n}\n\nfunction createRandomTraceId(): string {\n  return Array.from({ length: 32 }, () => \n    Math.floor(Math.random() * 16).toString(16)\n  ).join('');\n}\n\nfunction createRandomSpanId(): string {\n  return Array.from({ length: 16 }, () => \n    Math.floor(Math.random() * 16).toString(16)\n  ).join('');\n}","import * as os from 'os';\nimport { performance } from 'perf_hooks';\nimport { TracingLogger } from './tracing.js';\nimport { \n  LoggerConfig, \n  PerformanceConfig, \n  PerformanceMetrics,\n  MonitoringDecorator \n} from './types.js';\n\nexport class PerformanceLogger extends TracingLogger {\n  private performanceConfig: PerformanceConfig;\n  private counters = new Map<string, number>();\n  private histograms = new Map<string, number[]>();\n  private gauges = new Map<string, number>();\n  private metricsTimer?: NodeJS.Timeout;\n\n  constructor(config: LoggerConfig = {}) {\n    super(config);\n    this.performanceConfig = config.performance || {\n      enabled: true,\n      includeSystemMetrics: false,\n      metricsInterval: 30000\n    };\n\n    if (this.performanceConfig.enabled && this.performanceConfig.includeSystemMetrics) {\n      this.startSystemMetricsCollection();\n    }\n  }\n\n  private startSystemMetricsCollection(): void {\n    this.metricsTimer = setInterval(() => {\n      this.collectSystemMetrics();\n    }, this.performanceConfig.metricsInterval || 30000);\n  }\n\n  private collectSystemMetrics(): void {\n    const metrics: PerformanceMetrics = {\n      cpu_usage_percent: this.getCpuUsage(),\n      memory_usage_bytes: process.memoryUsage().heapUsed,\n      memory_total_bytes: os.totalmem(),\n      memory_free_bytes: os.freemem(),\n      uptime_seconds: process.uptime(),\n      load_average: os.loadavg()\n    };\n\n    this.info('System metrics collected', { metrics });\n\n    this.recordGauge('system_cpu_usage_percent', metrics.cpu_usage_percent || 0);\n    this.recordGauge('system_memory_usage_bytes', metrics.memory_usage_bytes || 0);\n    this.recordGauge('system_memory_free_bytes', metrics.memory_free_bytes);\n    this.recordGauge('system_uptime_seconds', metrics.uptime_seconds);\n  }\n\n  private getCpuUsage(): number {\n    const cpus = os.cpus();\n    let totalIdle = 0;\n    let totalTick = 0;\n\n    cpus.forEach(cpu => {\n      for (const type in cpu.times) {\n        totalTick += (cpu.times as any)[type];\n      }\n      totalIdle += cpu.times.idle;\n    });\n\n    return 100 - ~~(100 * totalIdle / totalTick);\n  }\n\n  public incrementCounter(name: string, tags: Record<string, string> = {}): void {\n    const key = this.createMetricKey(name, tags);\n    const current = this.counters.get(key) || 0;\n    this.counters.set(key, current + 1);\n    \n    this.debug('Counter incremented', {\n      metric: name,\n      value: current + 1,\n      tags\n    });\n  }\n\n  public recordHistogram(name: string, value: number, tags: Record<string, string> = {}): void {\n    const key = this.createMetricKey(name, tags);\n    const values = this.histograms.get(key) || [];\n    values.push(value);\n    this.histograms.set(key, values);\n    \n    this.debug('Histogram recorded', {\n      metric: name,\n      value,\n      tags,\n      count: values.length\n    });\n  }\n\n  public recordGauge(name: string, value: number, tags: Record<string, string> = {}): void {\n    const key = this.createMetricKey(name, tags);\n    this.gauges.set(key, value);\n    \n    this.debug('Gauge recorded', {\n      metric: name,\n      value,\n      tags\n    });\n  }\n\n  public getMetricsSummary(): {\n    counters: Record<string, number>;\n    histograms: Record<string, { count: number; min: number; max: number; avg: number; p95: number }>;\n    gauges: Record<string, number>;\n  } {\n    const summary = {\n      counters: Object.fromEntries(this.counters),\n      histograms: {} as any,\n      gauges: Object.fromEntries(this.gauges)\n    };\n\n    for (const [key, values] of this.histograms) {\n      const sorted = [...values].sort((a, b) => a - b);\n      const count = sorted.length;\n      const sum = sorted.reduce((a, b) => a + b, 0);\n      const p95Index = Math.floor(count * 0.95);\n\n      summary.histograms[key] = {\n        count,\n        min: sorted[0] || 0,\n        max: sorted[count - 1] || 0,\n        avg: count > 0 ? sum / count : 0,\n        p95: sorted[p95Index] || 0\n      };\n    }\n\n    return summary;\n  }\n\n  public monitor(operationName: string): MonitoringDecorator {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n      const originalMethod = descriptor.value;\n\n      descriptor.value = async function (this: any, ...args: any[]) {\n        const logger = this.logger || new PerformanceLogger();\n        const startTime = performance.now();\n        const span = logger.startSpan(operationName);\n        \n        try {\n          span.setTag('method', propertyKey);\n          span.setTag('class', target.constructor.name);\n          \n          const result = await originalMethod.apply(this, args);\n          \n          const duration = performance.now() - startTime;\n          \n          logger.recordHistogram(`${operationName}_duration_ms`, duration, {\n            method: propertyKey,\n            status: 'success'\n          });\n          \n          logger.incrementCounter(`${operationName}_total`, {\n            method: propertyKey,\n            status: 'success'\n          });\n\n          logger.info(`Operation completed: ${operationName}`, {\n            method: propertyKey,\n            duration_ms: duration,\n            success: true\n          });\n\n          span.setTag('success', true);\n          span.setTag('duration_ms', duration);\n          span.end();\n\n          return result;\n        } catch (error) {\n          const duration = performance.now() - startTime;\n          \n          logger.recordHistogram(`${operationName}_duration_ms`, duration, {\n            method: propertyKey,\n            status: 'error',\n            error_type: (error as Error).constructor.name\n          });\n          \n          logger.incrementCounter(`${operationName}_total`, {\n            method: propertyKey,\n            status: 'error',\n            error_type: (error as Error).constructor.name\n          });\n\n          logger.error(`Operation failed: ${operationName}`, {\n            method: propertyKey,\n            duration_ms: duration,\n            error: (error as Error).message\n          }, error as Error);\n\n          span.recordException(error as Error);\n          span.setTag('success', false);\n          span.setTag('duration_ms', duration);\n          span.end();\n\n          throw error;\n        }\n      };\n\n      return descriptor;\n    };\n  }\n\n  public async measureAsync<T>(\n    operationName: string, \n    operation: () => Promise<T>,\n    tags: Record<string, string> = {}\n  ): Promise<T> {\n    const startTime = performance.now();\n    const span = this.startSpan(operationName);\n    \n    try {\n      Object.entries(tags).forEach(([key, value]) => {\n        span.setTag(key, value);\n      });\n      \n      const result = await operation();\n      const duration = performance.now() - startTime;\n      \n      this.recordHistogram(`${operationName}_duration_ms`, duration, {\n        ...tags,\n        status: 'success'\n      });\n      \n      this.incrementCounter(`${operationName}_total`, {\n        ...tags,\n        status: 'success'\n      });\n\n      span.setTag('success', true);\n      span.setTag('duration_ms', duration);\n      span.end();\n\n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      \n      this.recordHistogram(`${operationName}_duration_ms`, duration, {\n        ...tags,\n        status: 'error',\n        error_type: (error as Error).constructor.name\n      });\n      \n      this.incrementCounter(`${operationName}_total`, {\n        ...tags,\n        status: 'error',\n        error_type: (error as Error).constructor.name\n      });\n\n      span.recordException(error as Error);\n      span.setTag('success', false);\n      span.setTag('duration_ms', duration);\n      span.end();\n\n      throw error;\n    }\n  }\n\n  public measure<T>(\n    operationName: string, \n    operation: () => T,\n    tags: Record<string, string> = {}\n  ): T {\n    const startTime = performance.now();\n    \n    try {\n      const result = operation();\n      const duration = performance.now() - startTime;\n      \n      this.recordHistogram(`${operationName}_duration_ms`, duration, {\n        ...tags,\n        status: 'success'\n      });\n      \n      this.incrementCounter(`${operationName}_total`, {\n        ...tags,\n        status: 'success'\n      });\n\n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      \n      this.recordHistogram(`${operationName}_duration_ms`, duration, {\n        ...tags,\n        status: 'error',\n        error_type: (error as Error).constructor.name\n      });\n      \n      this.incrementCounter(`${operationName}_total`, {\n        ...tags,\n        status: 'error',\n        error_type: (error as Error).constructor.name\n      });\n\n      throw error;\n    }\n  }\n\n  private createMetricKey(name: string, tags: Record<string, string>): string {\n    const tagString = Object.entries(tags)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([key, value]) => `${key}:${value}`)\n      .join(',');\n    \n    return tagString ? `${name}{${tagString}}` : name;\n  }\n\n  public override async close(): Promise<void> {\n    if (this.metricsTimer) {\n      clearInterval(this.metricsTimer);\n    }\n    \n    await super.close();\n  }\n}","import { Logger } from './logger.js';\nimport { \n  LogLevel, \n  LogFormat, \n  LogEntry, \n  LoggerConfig, \n  OutputAdapter, \n  LogContext, \n  LogProcessor,\n  CoreLoggerOptions,\n  StructuredLogData\n} from './types.js';\n\n/**\n * Core-integrated Logger that provides structured logging capabilities\n * 可以被Core系统集成的日志器实现\n */\nexport class CoreLogger {\n  private logger: Logger;\n  private processors: Map<string, LogProcessor> = new Map();\n  private serviceName: string;\n  private version: string;\n  private environment: string;\n  private startTime: number = Date.now();\n\n  constructor(options: CoreLoggerOptions) {\n    this.serviceName = options.serviceName || 'sker-logger';\n    this.version = options.version || '1.0.0';\n    this.environment = options.environment || 'development';\n\n    const loggerConfig: LoggerConfig = {\n      name: this.serviceName,\n      service: {\n        name: this.serviceName,\n        version: this.version,\n        environment: this.environment\n      },\n      ...options.logger\n    };\n\n    this.logger = new Logger(loggerConfig);\n    \n    // 如果没有提供核心实例，则仅初始化基本功能\n    this.setupCoreIntegration();\n  }\n\n  /**\n   * 获取运行时长（毫秒）\n   */\n  get uptime(): number {\n    return Date.now() - this.startTime;\n  }\n\n  /**\n   * 设置核心集成 (当与Core系统集成时可选调用)\n   */\n  setupCoreIntegration(coreInstance?: any): void {\n    if (!coreInstance) {\n      // 如果没有核心实例，仅设置基本日志功能\n      this.logger.info('Logger initialized without core integration', {\n        service: this.serviceName,\n        version: this.version\n      });\n      return;\n    }\n\n    // 监听配置变更\n    if (coreInstance.getConfig && typeof coreInstance.getConfig === 'function') {\n      const config = coreInstance.getConfig();\n      if (config && config.on) {\n        config.on('change', ({ key, newValue }: any) => {\n          if (key.startsWith('logger.')) {\n            this.handleConfigChange(key, newValue);\n          }\n        });\n      }\n    }\n\n    // 监听生命周期事件\n    if (coreInstance.getLifecycle && typeof coreInstance.getLifecycle === 'function') {\n      const lifecycle = coreInstance.getLifecycle();\n      if (lifecycle) {\n        if (lifecycle.onStart) {\n          lifecycle.onStart(async () => {\n            this.logger.info('Logger service starting', {\n              service: this.serviceName,\n              version: this.version\n            });\n          });\n        }\n\n        if (lifecycle.onStop) {\n          lifecycle.onStop(async () => {\n            this.logger.info('Logger service stopping');\n            await this.logger.close();\n          });\n        }\n      }\n    }\n\n    // 集成事件系统\n    if (coreInstance.on && typeof coreInstance.on === 'function') {\n      coreInstance.on('CORE_PLUGIN_ERROR', ({ error, plugin }: any) => {\n        this.logger.error('Plugin error occurred', {\n          plugin,\n          error: error.message\n        }, error);\n      });\n\n      coreInstance.on('CORE_MIDDLEWARE_ERROR', ({ error, middleware }: any) => {\n        this.logger.error('Middleware error occurred', {\n          middleware,\n          error: error.message\n        }, error);\n      });\n    }\n  }\n\n  /**\n   * 处理配置变更\n   */\n  private handleConfigChange(key: string, value: any): void {\n    const configKey = key.replace('logger.', '');\n    \n    switch (configKey) {\n      case 'level':\n        this.logger.setLevel(value);\n        this.logger.info('Log level changed', { newLevel: value });\n        break;\n      default:\n        this.logger.debug('Logger configuration updated', { key, value });\n        break;\n    }\n  }\n\n  /**\n   * 注册日志处理器\n   */\n  public registerProcessor(name: string, processor: LogProcessor): void {\n    this.processors.set(name, processor);\n    this.logger.info('Log processor registered', { processor: name });\n  }\n\n  /**\n   * 移除日志处理器\n   */\n  public unregisterProcessor(name: string): boolean {\n    const removed = this.processors.delete(name);\n    if (removed) {\n      this.logger.info('Log processor unregistered', { processor: name });\n    }\n    return removed;\n  }\n\n  /**\n   * 获取所有处理器\n   */\n  public getProcessors(): string[] {\n    return Array.from(this.processors.keys());\n  }\n\n  /**\n   * 增强的日志方法，支持结构化数据和处理器\n   */\n  public async logStructured(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<void> {\n    // 应用处理器\n    let processedData = data;\n    for (const [name, processor] of this.processors) {\n      try {\n        processedData = await processor.process(level, message, processedData, context);\n      } catch (error) {\n        this.logger.warn('Log processor failed', {\n          processor: name,\n          error: (error as Error).message\n        });\n      }\n    }\n\n    // 添加核心上下文信息\n    const enrichedContext = {\n      ...context,\n      serviceName: this.serviceName,\n      version: this.version,\n      environment: this.environment,\n      uptime: this.uptime,\n      ...processedData\n    };\n\n    // 根据级别调用对应的日志方法\n    switch (level) {\n      case LogLevel.TRACE:\n        this.logger.trace(message, enrichedContext);\n        break;\n      case LogLevel.DEBUG:\n        this.logger.debug(message, enrichedContext);\n        break;\n      case LogLevel.INFO:\n        this.logger.info(message, enrichedContext);\n        break;\n      case LogLevel.WARN:\n        this.logger.warn(message, enrichedContext);\n        break;\n      case LogLevel.ERROR:\n        this.logger.error(message, enrichedContext);\n        break;\n      case LogLevel.FATAL:\n        this.logger.fatal(message, enrichedContext);\n        break;\n    }\n  }\n\n  /**\n   * 创建子日志记录器，继承当前配置\n   */\n  public createChildLogger(context: LogContext): Logger {\n    return this.logger.child({\n      ...context,\n      parentService: this.serviceName,\n      parentVersion: this.version\n    });\n  }\n\n  /**\n   * 获取内部Logger实例\n   */\n  public getLogger(): Logger {\n    return this.logger;\n  }\n\n  /**\n   * 便捷方法\n   */\n  public trace(message: string, data?: StructuredLogData, context?: LogContext): Promise<void> {\n    return this.logStructured(LogLevel.TRACE, message, data, context);\n  }\n\n  public debug(message: string, data?: StructuredLogData, context?: LogContext): Promise<void> {\n    return this.logStructured(LogLevel.DEBUG, message, data, context);\n  }\n\n  public info(message: string, data?: StructuredLogData, context?: LogContext): Promise<void> {\n    return this.logStructured(LogLevel.INFO, message, data, context);\n  }\n\n  public warn(message: string, data?: StructuredLogData, context?: LogContext): Promise<void> {\n    return this.logStructured(LogLevel.WARN, message, data, context);\n  }\n\n  public error(message: string, data?: StructuredLogData, context?: LogContext, error?: Error): Promise<void> {\n    const errorData = error ? {\n      ...data,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      }\n    } : data;\n\n    return this.logStructured(LogLevel.ERROR, message, errorData, context);\n  }\n\n  public fatal(message: string, data?: StructuredLogData, context?: LogContext, error?: Error): Promise<void> {\n    const errorData = error ? {\n      ...data,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      }\n    } : data;\n\n    return this.logStructured(LogLevel.FATAL, message, errorData, context);\n  }\n\n  /**\n   * 链路追踪集成\n   */\n  public startTrace(operation: string, context?: LogContext): string {\n    const traceId = this.generateTraceId();\n    const startTime = Date.now();\n\n    this.info('Trace started', {\n      traceId,\n      operation,\n      startTime,\n      ...context\n    });\n\n    return traceId;\n  }\n\n  public endTrace(traceId: string, result?: 'success' | 'error', context?: LogContext): void {\n    const endTime = Date.now();\n    \n    this.info('Trace ended', {\n      traceId,\n      result: result || 'success',\n      endTime,\n      ...context\n    });\n  }\n\n  /**\n   * 性能监控\n   */\n  public async measurePerformance<T>(\n    operation: string,\n    fn: () => Promise<T>,\n    context?: LogContext\n  ): Promise<T> {\n    const startTime = process.hrtime.bigint();\n    const traceId = this.startTrace(operation, context);\n\n    try {\n      const result = await fn();\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n\n      this.info('Performance measurement', {\n        traceId,\n        operation,\n        duration,\n        status: 'success',\n        ...context\n      });\n\n      this.endTrace(traceId, 'success');\n      return result;\n    } catch (error) {\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000;\n\n      this.error('Performance measurement failed', {\n        traceId,\n        operation,\n        duration,\n        status: 'error',\n        ...context\n      }, error as Error);\n\n      this.endTrace(traceId, 'error');\n      throw error;\n    }\n  }\n\n  private generateTraceId(): string {\n    return `trace-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}","import { \n  LogLevel, \n  LogContext, \n  StructuredLogData, \n  TracingProcessor,\n  PerformanceProcessor,\n  SecurityProcessor \n} from './types.js';\n\n/**\n * 性能监控处理器\n */\nexport class PerformanceLogProcessor implements PerformanceProcessor {\n  public readonly name = 'performance';\n  private measurements = new Map<string, { startTime: bigint; startMemory: number }>();\n\n  async process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined> {\n    const enhancedData = { ...data };\n\n    // 添加系统性能指标\n    const memoryUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    enhancedData.performance = {\n      ...enhancedData.performance,\n      memory: memoryUsage.heapUsed,\n      cpu: cpuUsage.user + cpuUsage.system\n    };\n\n    // Add additional performance data as metadata\n    if (!enhancedData.metadata) {\n      enhancedData.metadata = {};\n    }\n    \n    enhancedData.metadata.performance = {\n      memoryTotal: memoryUsage.heapTotal,\n      memoryExternal: memoryUsage.external,\n      cpuUser: cpuUsage.user,\n      cpuSystem: cpuUsage.system,\n      uptime: process.uptime(),\n      timestamp: Date.now()\n    };\n\n    return enhancedData;\n  }\n\n  startMeasurement(operation: string): string {\n    const measurementId = `${operation}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    this.measurements.set(measurementId, {\n      startTime: process.hrtime.bigint(),\n      startMemory: process.memoryUsage().heapUsed\n    });\n    return measurementId;\n  }\n\n  endMeasurement(measurementId: string): { duration: number; memory: number } {\n    const measurement = this.measurements.get(measurementId);\n    if (!measurement) {\n      return { duration: 0, memory: 0 };\n    }\n\n    const endTime = process.hrtime.bigint();\n    const endMemory = process.memoryUsage().heapUsed;\n    \n    const duration = Number(endTime - measurement.startTime) / 1000000; // Convert to milliseconds\n    const memoryDelta = endMemory - measurement.startMemory;\n\n    this.measurements.delete(measurementId);\n\n    return { duration, memory: memoryDelta };\n  }\n}\n\n/**\n * 链路追踪处理器\n */\nexport class TracingLogProcessor implements TracingProcessor {\n  public readonly name = 'tracing';\n  private spans = new Map<string, { startTime: number; operation: string; context?: LogContext }>();\n\n  async process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined> {\n    const enhancedData = { ...data };\n\n    // 从上下文中提取追踪信息\n    if (context?.trace_id || context?.span_id) {\n      enhancedData.tracing = {\n        ...enhancedData.tracing,\n        traceId: context.trace_id,\n        spanId: context.span_id,\n        parentSpanId: context.parent_span_id\n      };\n    }\n\n    // 如果没有 trace_id，生成一个\n    if (!enhancedData.tracing?.traceId) {\n      enhancedData.tracing = {\n        ...enhancedData.tracing,\n        traceId: this.generateTraceId()\n      };\n    }\n\n    return enhancedData;\n  }\n\n  startSpan(operation: string, context?: LogContext): string {\n    const spanId = this.generateSpanId();\n    this.spans.set(spanId, {\n      startTime: Date.now(),\n      operation,\n      context\n    });\n    return spanId;\n  }\n\n  endSpan(spanId: string, result?: 'success' | 'error'): void {\n    const span = this.spans.get(spanId);\n    if (!span) return;\n\n    const duration = Date.now() - span.startTime;\n    this.spans.delete(spanId);\n\n    // 这里可以发送追踪数据到外部系统\n    console.log(`Span ended: ${span.operation}, duration: ${duration}ms, result: ${result || 'success'}`);\n  }\n\n  private generateTraceId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 16)}`;\n  }\n\n  private generateSpanId(): string {\n    return Math.random().toString(36).substr(2, 16);\n  }\n}\n\n/**\n * 安全处理器 - 清理敏感数据\n */\nexport class SecurityLogProcessor implements SecurityProcessor {\n  public readonly name = 'security';\n  private sensitiveFields = new Set([\n    'password',\n    'token',\n    'secret',\n    'key',\n    'authorization',\n    'credit_card',\n    'ssn',\n    'email',\n    'phone',\n    'address',\n    'api_key',\n    'access_token',\n    'refresh_token'\n  ]);\n\n  async process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined> {\n    if (!data) return data;\n\n    return this.sanitizeData(data);\n  }\n\n  sanitizeData(data: StructuredLogData): StructuredLogData {\n    const sanitized = { ...data };\n\n    for (const [key, value] of Object.entries(sanitized)) {\n      if (this.isSensitiveField(key)) {\n        sanitized[key] = this.maskValue(value);\n      } else if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        sanitized[key] = this.sanitizeData(value);\n      } else if (Array.isArray(value)) {\n        sanitized[key] = value.map(item => \n          typeof item === 'object' && item !== null ? this.sanitizeData(item) : item\n        );\n      }\n    }\n\n    return sanitized;\n  }\n\n  checkSensitiveFields(data: StructuredLogData): boolean {\n    for (const key of Object.keys(data)) {\n      if (this.isSensitiveField(key)) {\n        return true;\n      }\n      \n      const value = data[key];\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        if (this.checkSensitiveFields(value)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private isSensitiveField(fieldName: string): boolean {\n    const lowerFieldName = fieldName.toLowerCase();\n    return Array.from(this.sensitiveFields).some(sensitive => \n      lowerFieldName.includes(sensitive)\n    );\n  }\n\n  private maskValue(value: any): string {\n    if (typeof value === 'string') {\n      if (value.length <= 4) return '*'.repeat(value.length);\n      return value.substring(0, 2) + '*'.repeat(value.length - 4) + value.substring(value.length - 2);\n    }\n    return '[REDACTED]';\n  }\n\n  addSensitiveField(field: string): void {\n    this.sensitiveFields.add(field.toLowerCase());\n  }\n\n  removeSensitiveField(field: string): void {\n    this.sensitiveFields.delete(field.toLowerCase());\n  }\n}\n\n/**\n * 错误增强处理器\n */\nexport class ErrorEnhancementProcessor {\n  public readonly name = 'error-enhancement';\n\n  async process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined> {\n    if (level !== LogLevel.ERROR && level !== LogLevel.FATAL) {\n      return data;\n    }\n\n    const enhancedData = { ...data };\n\n    // 增强错误信息\n    if (enhancedData.error) {\n      enhancedData.error = {\n        ...enhancedData.error\n      };\n\n      // Add enhanced error information as metadata\n      if (!enhancedData.metadata) {\n        enhancedData.metadata = {};\n      }\n\n      enhancedData.metadata.errorEnhancement = {\n        timestamp: new Date().toISOString(),\n        severity: level === LogLevel.FATAL ? 'critical' : 'error',\n        fingerprint: this.generateErrorFingerprint(enhancedData.error),\n        context: {\n          ...context,\n          process: {\n            pid: process.pid,\n            title: process.title,\n            version: process.version,\n            platform: process.platform,\n            arch: process.arch\n          }\n        }\n      };\n    }\n\n    return enhancedData;\n  }\n\n  private generateErrorFingerprint(error: any): string {\n    const input = `${error.name || 'Error'}-${error.message || 'Unknown'}`;\n    // 简单的哈希函数\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n}\n\n/**\n * 聚合处理器 - 统计日志指标\n */\nexport class AggregationProcessor {\n  public readonly name = 'aggregation';\n  private stats = {\n    totalLogs: 0,\n    levelCounts: new Map<LogLevel, number>(),\n    errorFingerprints: new Map<string, number>(),\n    lastReset: Date.now()\n  };\n\n  async process(\n    level: LogLevel,\n    message: string,\n    data?: StructuredLogData,\n    context?: LogContext\n  ): Promise<StructuredLogData | undefined> {\n    this.updateStats(level, data);\n\n    const enhancedData = { ...data };\n    enhancedData.statistics = {\n      totalLogs: this.stats.totalLogs,\n      logsSinceReset: this.stats.totalLogs,\n      resetTime: new Date(this.stats.lastReset).toISOString()\n    };\n\n    return enhancedData;\n  }\n\n  private updateStats(level: LogLevel, data?: StructuredLogData): void {\n    this.stats.totalLogs++;\n    \n    const currentCount = this.stats.levelCounts.get(level) || 0;\n    this.stats.levelCounts.set(level, currentCount + 1);\n\n    // 统计错误指纹\n    if ((level === LogLevel.ERROR || level === LogLevel.FATAL) && data?.error) {\n      const fingerprint = this.generateErrorFingerprint(data.error);\n      const errorCount = this.stats.errorFingerprints.get(fingerprint) || 0;\n      this.stats.errorFingerprints.set(fingerprint, errorCount + 1);\n    }\n  }\n\n  getStatistics() {\n    return {\n      ...this.stats,\n      levelCounts: Object.fromEntries(this.stats.levelCounts),\n      errorFingerprints: Object.fromEntries(this.stats.errorFingerprints)\n    };\n  }\n\n  resetStatistics(): void {\n    this.stats.totalLogs = 0;\n    this.stats.levelCounts.clear();\n    this.stats.errorFingerprints.clear();\n    this.stats.lastReset = Date.now();\n  }\n\n  private generateErrorFingerprint(error: any): string {\n    const input = `${error.name || 'Error'}-${error.message || 'Unknown'}`;\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash).toString(36);\n  }\n}","import { Logger } from './logger.js';\nimport { TracingLogger } from './tracing.js';\nimport { PerformanceLogger } from './performance.js';\nimport { \n  ConsoleOutputAdapter, \n  FileOutputAdapter, \n  ElasticsearchOutputAdapter\n} from './outputs.js';\nimport { \n  LoggerConfig, \n  LogLevel, \n  LogFormat, \n  OutputConfig,\n  OutputAdapter\n} from './types.js';\n\nexport function createLogger(config: LoggerConfig = {}): Logger {\n  const mergedConfig = mergeWithDefaults(config);\n  \n  if (config.performance?.enabled && config.tracing?.enabled) {\n    return new PerformanceLogger(mergedConfig);\n  }\n  \n  if (config.tracing?.enabled) {\n    return new TracingLogger(mergedConfig);\n  }\n  \n  return new Logger(mergedConfig);\n}\n\nexport function createConsoleLogger(config: Partial<LoggerConfig> = {}): Logger {\n  return createLogger({\n    ...config,\n    outputs: [{\n      type: 'console',\n      enabled: true,\n      format: config.format || LogFormat.PRETTY\n    }]\n  });\n}\n\nexport function createFileLogger(filename: string, config: Partial<LoggerConfig> = {}): Logger {\n  return createLogger({\n    ...config,\n    outputs: [{\n      type: 'file',\n      enabled: true,\n      config: {\n        filename,\n        maxSize: '10MB',\n        maxFiles: 5,\n        compress: true,\n        ...config.outputs?.[0]?.config\n      }\n    }]\n  });\n}\n\nexport function createElasticsearchLogger(\n  elasticsearchConfig: {\n    host: string;\n    index: string;\n    type?: string;\n    username?: string;\n    password?: string;\n  }, \n  config: Partial<LoggerConfig> = {}\n): Logger {\n  return createLogger({\n    ...config,\n    outputs: [{\n      type: 'elasticsearch',\n      enabled: true,\n      config: elasticsearchConfig\n    }]\n  });\n}\n\nexport function createProductionLogger(config: Partial<LoggerConfig> = {}): Logger {\n  const productionConfig: LoggerConfig = {\n    level: LogLevel.INFO,\n    format: LogFormat.JSON,\n    async: true,\n    bufferSize: 1000,\n    flushInterval: 5000,\n    outputs: [\n      {\n        type: 'console',\n        enabled: true,\n        format: LogFormat.JSON\n      },\n      {\n        type: 'file',\n        enabled: true,\n        config: {\n          filename: './logs/app.log',\n          maxSize: '50MB',\n          maxFiles: 10,\n          compress: true\n        }\n      }\n    ],\n    tracing: {\n      enabled: true,\n      sampling: 0.1\n    },\n    performance: {\n      enabled: true,\n      includeSystemMetrics: true,\n      metricsInterval: 60000\n    },\n    context: {\n      autoInjectTraceId: true,\n      autoInjectRequestId: true,\n      includeSourceInfo: false\n    },\n    filters: [\n      (entry) => {\n        if (entry.context?.password) {\n          entry.context.password = '[REDACTED]';\n        }\n        if (entry.context?.token) {\n          entry.context.token = '[REDACTED]';\n        }\n        if (entry.context?.authorization) {\n          entry.context.authorization = '[REDACTED]';\n        }\n        return entry;\n      }\n    ],\n    ...config\n  };\n\n  return createLogger(productionConfig);\n}\n\nexport function createDevelopmentLogger(config: Partial<LoggerConfig> = {}): Logger {\n  const developmentConfig: LoggerConfig = {\n    level: LogLevel.DEBUG,\n    format: LogFormat.PRETTY,\n    async: false,\n    outputs: [{\n      type: 'console',\n      enabled: true,\n      format: LogFormat.PRETTY\n    }],\n    tracing: {\n      enabled: true,\n      sampling: 1.0\n    },\n    performance: {\n      enabled: true,\n      includeSystemMetrics: false\n    },\n    context: {\n      autoInjectTraceId: true,\n      autoInjectRequestId: true,\n      includeSourceInfo: true\n    },\n    ...config\n  };\n\n  return createLogger(developmentConfig);\n}\n\nexport function createTestLogger(config: Partial<LoggerConfig> = {}): Logger {\n  const testConfig: LoggerConfig = {\n    level: LogLevel.ERROR,\n    format: LogFormat.JSON,\n    async: false,\n    outputs: [],\n    tracing: {\n      enabled: false,\n      sampling: 0\n    },\n    performance: {\n      enabled: false,\n      includeSystemMetrics: false\n    },\n    ...config\n  };\n\n  return createLogger(testConfig);\n}\n\nexport function createStructuredLogger(\n  serviceName: string, \n  version: string, \n  config: Partial<LoggerConfig> = {}\n): Logger {\n  return createLogger({\n    service: {\n      name: serviceName,\n      version,\n      instance_id: process.env.HOSTNAME || process.env.INSTANCE_ID || 'unknown',\n      environment: process.env.NODE_ENV || 'development'\n    },\n    format: LogFormat.JSON,\n    ...config\n  });\n}\n\nfunction mergeWithDefaults(config: LoggerConfig): LoggerConfig {\n  const defaults: LoggerConfig = {\n    name: 'default',\n    service: {\n      name: config.name || 'unknown',\n      version: '1.0.0',\n      instance_id: process.env.HOSTNAME || 'unknown',\n      environment: process.env.NODE_ENV || 'development'\n    },\n    level: parseLogLevel(process.env.LOG_LEVEL) || LogLevel.INFO,\n    format: LogFormat.JSON,\n    outputs: [{\n      type: 'console',\n      enabled: true\n    }],\n    tracing: {\n      enabled: false,\n      sampling: 0.1\n    },\n    performance: {\n      enabled: false,\n      includeSystemMetrics: false\n    },\n    context: {\n      autoInjectTraceId: true,\n      autoInjectRequestId: true,\n      includeSourceInfo: false\n    },\n    filters: [],\n    async: false,\n    bufferSize: 1000,\n    flushInterval: 5000,\n    onError: (error: Error) => {\n      console.error('[Logger Error]:', error);\n    }\n  };\n\n  const merged = {\n    ...defaults,\n    ...config\n  };\n\n  if (config.service || defaults.service) {\n    merged.service = {\n      ...defaults.service!,\n      ...config.service\n    };\n  }\n\n  if (config.tracing || defaults.tracing) {\n    merged.tracing = {\n      ...defaults.tracing!,\n      ...config.tracing\n    };\n  }\n\n  if (config.performance || defaults.performance) {\n    merged.performance = {\n      ...defaults.performance!,\n      ...config.performance\n    };\n  }\n\n  if (config.context || defaults.context) {\n    merged.context = {\n      ...defaults.context!,\n      ...config.context\n    };\n  }\n\n  if (config.outputs) {\n    merged.outputs = config.outputs.map(output => ({\n      ...output,\n      config: output.config ? {\n        ...output.config\n      } : undefined\n    }));\n  } else {\n    merged.outputs = defaults.outputs!;\n  }\n\n  return merged;\n}\n\nfunction parseLogLevel(levelString?: string): LogLevel | undefined {\n  if (!levelString) return undefined;\n  \n  const upperLevel = levelString.toUpperCase();\n  const levelMap: Record<string, LogLevel> = {\n    'TRACE': LogLevel.TRACE,\n    'DEBUG': LogLevel.DEBUG,\n    'INFO': LogLevel.INFO,\n    'WARN': LogLevel.WARN,\n    'WARNING': LogLevel.WARN,\n    'ERROR': LogLevel.ERROR,\n    'FATAL': LogLevel.FATAL\n  };\n  \n  return levelMap[upperLevel];\n}\n\nexport function createOutputAdapter(config: OutputConfig): OutputAdapter {\n  switch (config.type) {\n    case 'console':\n      return new ConsoleOutputAdapter(config.format);\n    case 'file':\n      if (!config.config?.filename) {\n        throw new Error('File output requires filename configuration');\n      }\n      return new FileOutputAdapter({\n        filename: config.config.filename,\n        maxSize: config.config.maxSize,\n        maxFiles: config.config.maxFiles,\n        compress: config.config.compress\n      });\n    case 'elasticsearch':\n      if (!config.config?.host || !config.config?.index) {\n        throw new Error('Elasticsearch output requires host and index configuration');\n      }\n      return new ElasticsearchOutputAdapter({\n        host: config.config.host,\n        index: config.config.index,\n        type: config.config.type,\n        username: config.config.username,\n        password: config.config.password\n      });\n    default:\n      throw new Error(`Unsupported output type: ${config.type}`);\n  }\n}","import { Logger } from './logger.js';\nimport { LoggerMiddlewareConfig, LogContext } from './types.js';\n\nexport function createLoggerMiddleware(config: LoggerMiddlewareConfig) {\n  const {\n    logger,\n    includeRequest = true,\n    includeResponse = false,\n    sensitiveFields = ['password', 'token', 'authorization', 'cookie']\n  } = config;\n\n  return (req: any, res: any, next: any) => {\n    const startTime = Date.now();\n    const requestId = req.headers['x-request-id'] || generateRequestId();\n    const traceId = req.headers['x-trace-id'] || generateTraceId();\n    \n    req.requestId = requestId;\n    req.traceId = traceId;\n    \n    const context: LogContext = {\n      request_id: requestId,\n      trace_id: traceId,\n      method: req.method,\n      url: req.url || req.originalUrl,\n      user_agent: req.headers['user-agent'],\n      ip_address: req.ip || req.connection?.remoteAddress,\n      user_id: req.user?.id || req.userId\n    };\n\n    logger.runInContext(context, () => {\n      if (includeRequest) {\n        const requestData = sanitizeObject({\n          method: req.method,\n          url: req.url || req.originalUrl,\n          headers: req.headers,\n          query: req.query,\n          body: req.body,\n          params: req.params\n        }, sensitiveFields);\n\n        logger.info('HTTP request started', {\n          ...context,\n          request: requestData\n        });\n      }\n\n      const originalSend = res.send;\n      const originalJson = res.json;\n      \n      res.send = function(body: any) {\n        res.responseBody = body;\n        return originalSend.call(this, body);\n      };\n\n      res.json = function(body: any) {\n        res.responseBody = body;\n        return originalJson.call(this, body);\n      };\n\n      res.on('finish', () => {\n        const duration = Date.now() - startTime;\n        const responseContext: any = {\n          ...context,\n          status_code: res.statusCode,\n          duration_ms: duration\n        };\n\n        if (includeResponse && res.responseBody) {\n          const responseData = sanitizeObject({\n            status: res.statusCode,\n            headers: res.getHeaders ? res.getHeaders() : {},\n            body: res.responseBody\n          }, sensitiveFields);\n          \n          responseContext.response = responseData;\n        }\n\n        if (res.statusCode >= 400) {\n          logger.warn('HTTP request completed with error', responseContext);\n        } else {\n          logger.info('HTTP request completed', responseContext);\n        }\n      });\n\n      res.on('error', (error: Error) => {\n        const duration = Date.now() - startTime;\n        logger.error('HTTP request failed', {\n          ...context,\n          duration_ms: duration,\n          error: error.message\n        }, error);\n      });\n\n      next();\n    });\n  };\n}\n\nexport function createKoaLoggerMiddleware(config: LoggerMiddlewareConfig) {\n  const {\n    logger,\n    logRequests = true,\n    logResponses = false,\n    logErrors = true,\n    sensitiveFields = ['password', 'token', 'authorization', 'cookie']\n  } = config;\n\n  return async (ctx: any, next: any) => {\n    const startTime = Date.now();\n    const requestId = ctx.headers['x-request-id'] || generateRequestId();\n    const traceId = ctx.headers['x-trace-id'] || generateTraceId();\n    \n    ctx.state.requestId = requestId;\n    ctx.state.traceId = traceId;\n    \n    const context: LogContext = {\n      request_id: requestId,\n      trace_id: traceId,\n      method: ctx.method,\n      url: ctx.url,\n      user_agent: ctx.headers['user-agent'],\n      ip_address: ctx.ip,\n      user_id: ctx.state.user?.id || ctx.state.userId\n    };\n\n    await logger.runInContext(context, async () => {\n      if (logRequests) {\n        const requestData = sanitizeObject({\n          method: ctx.method,\n          url: ctx.url,\n          headers: ctx.headers,\n          query: ctx.query,\n          body: ctx.request.body\n        }, sensitiveFields);\n\n        logger.info('Koa request started', {\n          ...context,\n          request: requestData\n        });\n      }\n\n      try {\n        await next();\n        \n        const duration = Date.now() - startTime;\n        const responseContext: any = {\n          ...context,\n          status_code: ctx.status,\n          duration_ms: duration\n        };\n\n        if (logResponses && ctx.body) {\n          const responseData = sanitizeObject({\n            status: ctx.status,\n            headers: ctx.response.headers,\n            body: ctx.body\n          }, sensitiveFields);\n          \n          responseContext.response = responseData;\n        }\n\n        if (ctx.status >= 400) {\n          logger.warn('Koa request completed with error', responseContext);\n        } else {\n          logger.info('Koa request completed', responseContext);\n        }\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        \n        if (logErrors) {\n          logger.error('Koa request failed', {\n            ...context,\n            duration_ms: duration,\n            error: (error as Error).message\n          }, error as Error);\n        }\n\n        throw error;\n      }\n    });\n  };\n}\n\nexport function createGrpcLoggerInterceptor(config: LoggerMiddlewareConfig) {\n  const {\n    logger,\n    logCalls = true,\n    logResults = true,\n    logErrors = true,\n    sensitiveFields = []\n  } = config;\n\n  return (call: any, callback: any) => {\n    const startTime = Date.now();\n    const requestId = call.metadata?.get('x-request-id')?.[0] || generateRequestId();\n    const traceId = call.metadata?.get('x-trace-id')?.[0] || generateTraceId();\n    \n    const context: LogContext = {\n      request_id: requestId,\n      trace_id: traceId,\n      grpc_method: call.handler?.path,\n      grpc_type: call.handler?.type,\n      remote_address: call.getPeer?.()\n    };\n\n    logger.runInContext(context, () => {\n      if (logCalls) {\n        const requestData = sanitizeObject({\n          method: call.handler?.path,\n          metadata: call.metadata?.getMap(),\n          request: call.request\n        }, sensitiveFields);\n\n        logger.info('gRPC call started', {\n          ...context,\n          grpc_call: requestData\n        });\n      }\n\n      const originalCallback = callback;\n      const wrappedCallback = (error: any, response: any) => {\n        const duration = Date.now() - startTime;\n        \n        if (error) {\n          if (logErrors) {\n            logger.error('gRPC call failed', {\n              ...context,\n              duration_ms: duration,\n              grpc_code: error.code,\n              error: error.message\n            }, error);\n          }\n        } else {\n          const responseContext: any = {\n            ...context,\n            duration_ms: duration\n          };\n\n          if (logResults && response) {\n            const responseData = sanitizeObject({\n              response: response\n            }, sensitiveFields);\n            \n            responseContext.grpc_response = responseData;\n          }\n\n          logger.info('gRPC call completed', responseContext);\n        }\n\n        originalCallback(error, response);\n      };\n\n      try {\n        call.handler.func(call, wrappedCallback);\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        \n        if (logErrors) {\n          logger.error('gRPC call exception', {\n            ...context,\n            duration_ms: duration,\n            error: (error as Error).message\n          }, error as Error);\n        }\n\n        wrappedCallback(error, null);\n      }\n    });\n  };\n}\n\nexport function createFastifyPlugin(logger: Logger) {\n  return async function fastifyLogger(fastify: any) {\n    fastify.addHook('onRequest', async (request: any) => {\n      const startTime = Date.now();\n      const requestId = request.headers['x-request-id'] || generateRequestId();\n      const traceId = request.headers['x-trace-id'] || generateTraceId();\n      \n      request.requestId = requestId;\n      request.traceId = traceId;\n      request.startTime = startTime;\n      \n      const context: LogContext = {\n        request_id: requestId,\n        trace_id: traceId,\n        method: request.method,\n        url: request.url,\n        user_agent: request.headers['user-agent'],\n        ip_address: request.ip\n      };\n\n      logger.runInContext(context, () => {\n        logger.info('Fastify request started', context);\n      });\n    });\n\n    fastify.addHook('onResponse', async (request: any, reply: any) => {\n      const duration = Date.now() - request.startTime;\n      \n      const context: LogContext = {\n        request_id: request.requestId,\n        trace_id: request.traceId,\n        method: request.method,\n        url: request.url,\n        status_code: reply.statusCode,\n        duration_ms: duration\n      };\n\n      logger.runInContext(context, () => {\n        if (reply.statusCode >= 400) {\n          logger.warn('Fastify request completed with error', context);\n        } else {\n          logger.info('Fastify request completed', context);\n        }\n      });\n    });\n\n    fastify.addHook('onError', async (request: any, _reply: any, error: Error) => {\n      const duration = Date.now() - request.startTime;\n      \n      const context: LogContext = {\n        request_id: request.requestId,\n        trace_id: request.traceId,\n        method: request.method,\n        url: request.url,\n        duration_ms: duration,\n        error: error.message\n      };\n\n      logger.runInContext(context, () => {\n        logger.error('Fastify request error', context, error);\n      });\n    });\n  };\n}\n\nfunction sanitizeObject(obj: any, sensitiveFields: string[] = []): any {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item, sensitiveFields));\n  }\n\n  const sanitized = { ...obj };\n  \n  for (const field of sensitiveFields) {\n    if (field.toLowerCase() in sanitized) {\n      sanitized[field.toLowerCase()] = '[REDACTED]';\n    }\n    if (field in sanitized) {\n      sanitized[field] = '[REDACTED]';\n    }\n  }\n\n  Object.keys(sanitized).forEach(key => {\n    if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      sanitized[key] = sanitizeObject(sanitized[key], sensitiveFields);\n    }\n  });\n\n  return sanitized;\n}\n\nfunction generateRequestId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nfunction generateTraceId(): string {\n  return Math.random().toString(36).substr(2, 16);\n}"],"mappings":"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","names":["LogLevel","LogFormat","import_async_hooks","cpus"]}