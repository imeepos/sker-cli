{"version":3,"sources":["../src/types/index.ts","../src/errors/index.ts","../src/events/index.ts","../src/config/index.ts","../src/lifecycle/index.ts","../src/plugins/index.ts","../src/middleware/index.ts","../src/core/index.ts","../src/context/index.ts"],"sourcesContent":["export type AsyncHandler<T = any> = (data?: T) => Promise<void>;\nexport type SyncHandler<T = any> = (data?: T) => void;\nexport type EventHandler<T = any> = AsyncHandler<T> | SyncHandler<T>;\n\nexport interface CoreOptions {\n  serviceName: string;\n  version: string;\n  environment?: string;\n  plugins?: PluginConfig[];\n  config?: ConfigOptions;\n  lifecycle?: LifecycleOptions;\n}\n\nexport interface PluginConfig {\n  name: string;\n  package?: string;\n  options?: Record<string, any>;\n  enabled?: boolean;\n}\n\nexport interface ConfigOptions {\n  sources?: ConfigSource[];\n  defaultConfig?: Record<string, any>;\n  schema?: any;\n}\n\nexport interface ConfigSource {\n  type: 'env' | 'file' | 'remote';\n  prefix?: string;\n  path?: string;\n  url?: string;\n}\n\nexport interface LifecycleOptions {\n  startTimeout?: number;\n  stopTimeout?: number;\n  gracefulShutdown?: boolean;\n}\n\nexport interface LifecycleHook {\n  name: string | undefined;\n  handler: AsyncHandler;\n  timeout: number | undefined;\n}\n\nexport interface Plugin {\n  name: string;\n  version: string;\n  initialize: (context: PluginContext) => Promise<void>;\n  destroy: () => Promise<void>;\n}\n\nexport interface PluginContext {\n  core: any;\n  config: Record<string, any>;\n  logger?: any;\n}\n\nexport interface MiddlewareContext {\n  request?: any;\n  response?: any;\n  data?: any;\n  metadata?: Record<string, any>;\n}\n\nexport type MiddlewareHandler = (\n  context: MiddlewareContext,\n  next: () => Promise<void>\n) => Promise<void>;\n\nexport interface ContextData {\n  requestId?: string;\n  userId?: string;\n  traceId?: string;\n  [key: string]: any;\n}\n\nexport enum ErrorCodes {\n  UNKNOWN = 'UNKNOWN',\n  INITIALIZATION_FAILED = 'INITIALIZATION_FAILED',\n  START_FAILED = 'START_FAILED',\n  STOP_FAILED = 'STOP_FAILED',\n  CONFIG_ERROR = 'CONFIG_ERROR',\n  PLUGIN_ERROR = 'PLUGIN_ERROR',\n  CONTEXT_ERROR = 'CONTEXT_ERROR',\n  MIDDLEWARE_ERROR = 'MIDDLEWARE_ERROR',\n  EVENT_ERROR = 'EVENT_ERROR'\n}\n\nexport type StringToken<T> = string & { __type?: T }\nexport const ERROR: StringToken<{ error: unknown, event: StringToken<any> }> = `ERROR`;\nexport const MEMORY_USAGE: StringToken<{\n  memoryUsage: NodeJS.MemoryUsage;\n  usage: number;\n  threshold: number;\n}> = `MEMORY_USAGE`;\n\nexport const MEMORY_THRESHOLD_EXCEEDED: StringToken<{\n  memoryUsage: NodeJS.MemoryUsage;\n  usage: number;\n  threshold: number;\n}> = `memoryThresholdExceeded`\n\nexport const LIFECYCLE_ERROR: StringToken<{ error: unknown, event: StringToken<any> }> = `lifecycleError`\n\nexport const CONFIG_CHANGE: StringToken<{\n  key: string;\n  value: any;\n  oldValue: any;\n}> = `change`;\n\nexport const CONFIG_RESET: StringToken<{\n  oldConfig: Record<string, any>;\n  newConfig: Record<string, any>;\n}> = `reset`;\n\nexport const LIFECYCLE_STARTING: StringToken<{}> = `starting`;\n\nexport const LIFECYCLE_STARTED: StringToken<{}> = `started`;\n\nexport const LIFECYCLE_STOPPING: StringToken<{}> = `stopping`;\n\nexport const LIFECYCLE_STOPPED: StringToken<{}> = `stopped`;\n\nexport const LIFECYCLE_STATE_CHANGED: StringToken<{\n  oldState: any;\n  newState: any;\n}> = `stateChanged`;\n\nexport const LIFECYCLE_HOOK_EXECUTING: StringToken<{\n  name: string;\n  phase: 'start' | 'stop';\n}> = `hookExecuting`;\n\nexport const LIFECYCLE_HOOK_EXECUTED: StringToken<{\n  name: string;\n  phase: 'start' | 'stop';\n}> = `hookExecuted`;\n\nexport const LIFECYCLE_HOOK_ERROR: StringToken<{\n  name: string;\n  phase: 'start' | 'stop';\n  error: unknown;\n}> = `hookError`;\n\nexport const MIDDLEWARE_ADDED: StringToken<{\n  middleware: any;\n}> = `middlewareAdded`;\n\nexport const MIDDLEWARE_REMOVED: StringToken<{\n  middleware: any;\n}> = `middlewareRemoved`;\n\nexport const MIDDLEWARE_ENABLED: StringToken<{\n  name: string;\n}> = `middlewareEnabled`;\n\nexport const MIDDLEWARE_DISABLED: StringToken<{\n  name: string;\n}> = `middlewareDisabled`;\n\nexport const MIDDLEWARES_CLEARED: StringToken<{\n  count: number;\n}> = `middlewaresCleared`;\n\nexport const MIDDLEWARE_EXECUTING: StringToken<{\n  name: string;\n  context: MiddlewareContext;\n}> = `middlewareExecuting`;\n\nexport const MIDDLEWARE_EXECUTED: StringToken<{\n  name: string;\n  context: MiddlewareContext;\n}> = `middlewareExecuted`;\n\nexport const MIDDLEWARE_ERROR: StringToken<{\n  name: string;\n  error: unknown;\n  context: MiddlewareContext;\n}> = `middlewareError`;\n\nexport const MIDDLEWARE_CHAIN_COMPLETED: StringToken<{\n  executedMiddlewares: string[];\n  context: MiddlewareContext;\n}> = `middlewareChainCompleted`;\n\nexport const MIDDLEWARE_CHAIN_FAILED: StringToken<{\n  error: unknown;\n  executedMiddlewares: string[];\n  context: MiddlewareContext;\n}> = `middlewareChainFailed`;\n\nexport const MIDDLEWARE_TIMEOUT: StringToken<{\n  timeout: number;\n  context: MiddlewareContext;\n}> = `middlewareTimeout`;\n\nexport const MIDDLEWARE_INSERTED: StringToken<{\n  middleware: any;\n  beforeName?: string;\n  afterName?: string;\n}> = `middlewareInserted`;\n\nexport const PLUGIN_REGISTERED: StringToken<{\n  name: string;\n  plugin: any;\n  config: PluginConfig;\n}> = `pluginRegistered`;\n\nexport const PLUGIN_UNREGISTERED: StringToken<{\n  name: string;\n}> = `pluginUnregistered`;\n\nexport const PLUGIN_SKIPPED: StringToken<{\n  name: string;\n  reason: string;\n}> = `pluginSkipped`;\n\nexport const PLUGIN_INITIALIZING: StringToken<{\n  name: string;\n}> = `pluginInitializing`;\n\nexport const PLUGIN_INITIALIZED: StringToken<{\n  name: string;\n}> = `pluginInitialized`;\n\nexport const PLUGIN_ERROR: StringToken<{\n  name: string;\n  error: unknown;\n  phase: string;\n}> = `pluginError`;\n\nexport const PLUGIN_DESTROYING: StringToken<{\n  name: string;\n}> = `pluginDestroying`;\n\nexport const PLUGIN_DESTROYED: StringToken<{\n  name: string;\n}> = `pluginDestroyed`;\n\nexport const PLUGIN_ENABLED: StringToken<{\n  name: string;\n}> = `pluginEnabled`;\n\nexport const PLUGIN_DISABLED: StringToken<{\n  name: string;\n}> = `pluginDisabled`;\n\nexport const PLUGIN_CONFIG_UPDATED: StringToken<{\n  name: string;\n  oldConfig: Record<string, any>;\n  newConfig: Record<string, any>;\n}> = `pluginConfigUpdated`;\n\nexport const CORE_INITIALIZED: StringToken<{\n  serviceName: string;\n  version: string;\n  environment: string;\n}> = `initialized`;\n\nexport const CORE_STARTING: StringToken<{}> = `starting`;\n\nexport const CORE_STARTED: StringToken<{\n  serviceName: string;\n  version: string;\n  uptime: number;\n}> = `started`;\n\nexport const CORE_START_FAILED: StringToken<{\n  error: unknown;\n}> = `startFailed`;\n\nexport const CORE_STOPPING: StringToken<{}> = `stopping`;\n\nexport const CORE_STOPPED: StringToken<{\n  serviceName: string;\n  uptime: number;\n}> = `stopped`;\n\nexport const CORE_STOP_FAILED: StringToken<{\n  error: unknown;\n}> = `stopFailed`;\n\nexport const CORE_RESTARTING: StringToken<{}> = `restarting`;\n\nexport const CORE_RESTARTED: StringToken<{}> = `restarted`;\n\nexport const CORE_RESTART_FAILED: StringToken<{\n  error: unknown;\n}> = `restartFailed`;\n\nexport const CORE_PLUGIN_ERROR: StringToken<{\n  name: string;\n  error: unknown;\n  phase: string;\n}> = `pluginError`;\n\nexport const CORE_MIDDLEWARE_ERROR: StringToken<{\n  name: string;\n  error: unknown;\n  context: MiddlewareContext;\n}> = `middlewareError`;\n\nexport const CORE_CONFIG_CHANGE: StringToken<{\n  key: string;\n  value: any;\n  oldValue: any;\n}> = `configChange`;","import { ErrorCodes } from '../types/index.js';\n\nexport class SkerError extends Error {\n  public readonly code: ErrorCodes;\n  public readonly details: Record<string, any> | undefined;\n  public override readonly cause: Error | undefined;\n\n  constructor(\n    code: ErrorCodes = ErrorCodes.UNKNOWN,\n    message?: string,\n    details?: Record<string, any>,\n    cause?: Error\n  ) {\n    super(message || code);\n    this.name = 'SkerError';\n    this.code = code;\n    this.details = details;\n    this.cause = cause;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, SkerError);\n    }\n  }\n\n  public toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      details: this.details,\n      stack: this.stack,\n      cause: this.cause?.message\n    };\n  }\n\n  public override toString(): string {\n    let result = `${this.name} [${this.code}]: ${this.message}`;\n\n    if (this.details) {\n      result += `\\nDetails: ${JSON.stringify(this.details, null, 2)}`;\n    }\n\n    if (this.cause) {\n      result += `\\nCaused by: ${this.cause.message}`;\n    }\n\n    return result;\n  }\n}\n\nexport function createError(\n  code: ErrorCodes,\n  message?: string,\n  details?: Record<string, any>,\n  cause?: Error\n): SkerError {\n  return new SkerError(code, message, details, cause);\n}\n\nexport function isError(error: any): error is Error {\n  return error instanceof Error;\n}\n\nexport function isSkerError(error: any): error is SkerError {\n  return error instanceof SkerError;\n}\n\nexport function wrapError(error: unknown, code: ErrorCodes, message?: string): SkerError {\n  if (isSkerError(error)) {\n    return error;\n  }\n\n  if (isError(error)) {\n    return new SkerError(code, message || error.message, undefined, error);\n  }\n\n  return new SkerError(code, message || String(error));\n}\n\nexport { ErrorCodes };","import { EventHandler, AsyncHandler, StringToken, ERROR } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\nexport class EventBus {\n  private listeners: Map<string, Set<EventHandler>> = new Map();\n  private maxListeners: number = 10;\n  private onceListeners: Map<string, Set<EventHandler>> = new Map();\n\n  public on<T = any>(event: StringToken<T>, handler: EventHandler<T>): void {\n    if (!event || typeof handler !== 'function') {\n      throw new SkerError(\n        ErrorCodes.EVENT_ERROR,\n        'Event name and handler are required'\n      );\n    }\n\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n\n    const handlers = this.listeners.get(event)!;\n\n    if (handlers.size >= this.maxListeners) {\n      console.warn(\n        `Warning: Maximum listeners (${this.maxListeners}) exceeded for event \"${event}\". ` +\n        'This could indicate a memory leak.'\n      );\n    }\n\n    handlers.add(handler);\n  }\n\n  public once<T = any>(event: StringToken<T>, handler: EventHandler<T>): void {\n    if (!event || typeof handler !== 'function') {\n      throw new SkerError(\n        ErrorCodes.EVENT_ERROR,\n        'Event name and handler are required'\n      );\n    }\n\n    if (!this.onceListeners.has(event)) {\n      this.onceListeners.set(event, new Set());\n    }\n\n    this.onceListeners.get(event)!.add(handler);\n  }\n\n  public off<T>(event: StringToken<T>, handler?: EventHandler<T>): void {\n    if (!event) {\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\n    }\n\n    if (handler) {\n      const handlers = this.listeners.get(event);\n      if (handlers) {\n        handlers.delete(handler);\n        if (handlers.size === 0) {\n          this.listeners.delete(event);\n        }\n      }\n\n      const onceHandlers = this.onceListeners.get(event);\n      if (onceHandlers) {\n        onceHandlers.delete(handler);\n        if (onceHandlers.size === 0) {\n          this.onceListeners.delete(event);\n        }\n      }\n    } else {\n      this.listeners.delete(event);\n      this.onceListeners.delete(event);\n    }\n  }\n\n  public emit<T = any>(event: StringToken<T>, data?: T): void {\n    if (!event) {\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\n    }\n\n    const handlers = this.listeners.get(event);\n    const onceHandlers = this.onceListeners.get(event);\n\n    if (!handlers?.size && !onceHandlers?.size) {\n      return;\n    }\n\n    try {\n      if (handlers) {\n        for (const handler of handlers) {\n          if (this.isAsyncHandler(handler)) {\n            handler(data).catch((error) => {\n              this.handleError(error, event);\n            });\n          } else {\n            handler(data);\n          }\n        }\n      }\n\n      if (onceHandlers) {\n        for (const handler of onceHandlers) {\n          if (this.isAsyncHandler(handler)) {\n            handler(data).catch((error) => {\n              this.handleError(error, event);\n            });\n          } else {\n            handler(data);\n          }\n        }\n        this.onceListeners.delete(event);\n      }\n    } catch (error) {\n      this.handleError(error, event);\n    }\n  }\n\n  public async emitAsync<T = any>(event: StringToken<T>, data?: T): Promise<void> {\n    if (!event) {\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\n    }\n\n    const handlers = this.listeners.get(event);\n    const onceHandlers = this.onceListeners.get(event);\n\n    if (!handlers?.size && !onceHandlers?.size) {\n      return;\n    }\n\n    const promises: Promise<void>[] = [];\n\n    try {\n      if (handlers) {\n        for (const handler of handlers) {\n          if (this.isAsyncHandler(handler)) {\n            promises.push(handler(data));\n          } else {\n            promises.push(Promise.resolve(handler(data)));\n          }\n        }\n      }\n\n      if (onceHandlers) {\n        for (const handler of onceHandlers) {\n          if (this.isAsyncHandler(handler)) {\n            promises.push(handler(data));\n          } else {\n            promises.push(Promise.resolve(handler(data)));\n          }\n        }\n        this.onceListeners.delete(event);\n      }\n\n      await Promise.all(promises);\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.EVENT_ERROR,\n        `Error emitting async event \"${event}\"`,\n        { event, data },\n        error as Error\n      );\n    }\n  }\n\n  public removeAllListeners<T = any>(event?: StringToken<T>): void {\n    if (event) {\n      this.listeners.delete(event);\n      this.onceListeners.delete(event);\n    } else {\n      this.listeners.clear();\n      this.onceListeners.clear();\n    }\n  }\n\n  public listenerCount<T = any>(event: StringToken<T>): number {\n    const handlersCount = this.listeners.get(event)?.size || 0;\n    const onceHandlersCount = this.onceListeners.get(event)?.size || 0;\n    return handlersCount + onceHandlersCount;\n  }\n\n  public eventNames<T = any>(): StringToken<T>[] {\n    const allEvents = new Set([\n      ...this.listeners.keys(),\n      ...this.onceListeners.keys()\n    ]);\n    return Array.from(allEvents);\n  }\n\n  public setMaxListeners(n: number): void {\n    if (n < 0 || !Number.isInteger(n)) {\n      throw new SkerError(\n        ErrorCodes.EVENT_ERROR,\n        'maxListeners must be a non-negative integer'\n      );\n    }\n    this.maxListeners = n;\n  }\n\n  public getMaxListeners(): number {\n    return this.maxListeners;\n  }\n\n  private isAsyncHandler<T = any>(handler: EventHandler<T>): handler is AsyncHandler<T> {\n    return handler.constructor.name === 'AsyncFunction';\n  }\n\n  private handleError<T>(error: unknown, event: StringToken<T>): void {\n    console.error(`EventBus error in event \"${event}\":`, error);\n\n    if (this.listenerCount('error') > 0) {\n      this.emit(ERROR, { error, event });\n    }\n  }\n}\n","import { readFileSync } from 'fs';\nimport { join } from 'path';\nimport { ConfigOptions, ConfigSource, CONFIG_CHANGE, CONFIG_RESET } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\nimport { EventBus } from '../events/index.js';\n\nexport class ConfigManager extends EventBus {\n  private config: Record<string, any> = {};\n  private readonly sources: ConfigSource[];\n  private readonly defaultConfig: Record<string, any>;\n  private readonly schema?: any;\n  private watchers: Map<string, Set<(value: any) => void>> = new Map();\n\n  constructor(options: ConfigOptions = {}) {\n    super();\n    this.sources = options.sources || [{ type: 'env' }];\n    this.defaultConfig = options.defaultConfig || {};\n    this.schema = options.schema;\n    \n    this.loadConfig();\n  }\n\n  public get<T = any>(key: string): T {\n    return this.getNestedValue(this.config, key) ?? this.getNestedValue(this.defaultConfig, key);\n  }\n\n  public set(key: string, value: any): void {\n    const oldValue = this.get(key);\n    this.setNestedValue(this.config, key, value);\n    \n    if (oldValue !== value) {\n      this.emit(CONFIG_CHANGE, { key, value, oldValue });\n      this.notifyWatchers(key, value);\n    }\n  }\n\n  public has(key: string): boolean {\n    return this.getNestedValue(this.config, key) !== undefined ||\n           this.getNestedValue(this.defaultConfig, key) !== undefined;\n  }\n\n  public delete(key: string): boolean {\n    if (this.has(key)) {\n      const oldValue = this.get(key);\n      this.deleteNestedValue(this.config, key);\n      this.emit(CONFIG_CHANGE, { key, value: undefined, oldValue });\n      this.notifyWatchers(key, undefined);\n      return true;\n    }\n    return false;\n  }\n\n  public getAll(): Record<string, any> {\n    return { ...this.defaultConfig, ...this.config };\n  }\n\n  public reset(): void {\n    const oldConfig = { ...this.config };\n    this.config = {};\n    this.loadConfig();\n    \n    this.emit(CONFIG_RESET, { oldConfig, newConfig: this.config });\n  }\n\n  public onChange(key: string, handler: (value: any) => void): () => void {\n    if (!this.watchers.has(key)) {\n      this.watchers.set(key, new Set());\n    }\n    \n    this.watchers.get(key)!.add(handler);\n    \n    return () => {\n      const handlers = this.watchers.get(key);\n      if (handlers) {\n        handlers.delete(handler);\n        if (handlers.size === 0) {\n          this.watchers.delete(key);\n        }\n      }\n    };\n  }\n\n  public validate(): boolean {\n    if (!this.schema) {\n      return true;\n    }\n\n    try {\n      if (typeof this.schema.validate === 'function') {\n        return this.schema.validate(this.getAll());\n      }\n      \n      return true;\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.CONFIG_ERROR,\n        'Configuration validation failed',\n        { config: this.getAll() },\n        error as Error\n      );\n    }\n  }\n\n  private loadConfig(): void {\n    try {\n      for (const source of this.sources) {\n        this.loadFromSource(source);\n      }\n      \n      this.validate();\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.CONFIG_ERROR,\n        'Failed to load configuration',\n        { sources: this.sources },\n        error as Error\n      );\n    }\n  }\n\n  private loadFromSource(source: ConfigSource): void {\n    try {\n      switch (source.type) {\n        case 'env':\n          this.loadFromEnv(source.prefix);\n          break;\n        case 'file':\n          this.loadFromFile(source.path);\n          break;\n        case 'remote':\n          this.loadFromRemote(source.url);\n          break;\n        default:\n          throw new SkerError(\n            ErrorCodes.CONFIG_ERROR,\n            `Unsupported config source type: ${source.type}`\n          );\n      }\n    } catch (error) {\n      console.warn(`Failed to load config from ${source.type} source:`, error);\n    }\n  }\n\n  private loadFromEnv(prefix?: string): void {\n    const envPrefix = prefix || '';\n    \n    for (const [key, value] of Object.entries(process.env)) {\n      if (!envPrefix || key.startsWith(envPrefix)) {\n        const configKey = envPrefix \n          ? key.slice(envPrefix.length).toLowerCase().replace(/_/g, '.')\n          : key.toLowerCase().replace(/_/g, '.');\n        \n        this.setNestedValue(this.config, configKey, this.parseEnvValue(value));\n      }\n    }\n  }\n\n  private loadFromFile(filePath?: string): void {\n    if (!filePath) {\n      throw new SkerError(ErrorCodes.CONFIG_ERROR, 'File path is required for file source');\n    }\n\n    try {\n      const fullPath = join(process.cwd(), filePath);\n      const content = readFileSync(fullPath, 'utf-8');\n      \n      let parsed: any;\n      if (filePath.endsWith('.json')) {\n        parsed = JSON.parse(content);\n      } else if (filePath.endsWith('.js') || filePath.endsWith('.mjs')) {\n        throw new SkerError(ErrorCodes.CONFIG_ERROR, 'JavaScript config files not supported yet');\n      } else {\n        throw new SkerError(ErrorCodes.CONFIG_ERROR, 'Unsupported config file format');\n      }\n      \n      Object.assign(this.config, parsed);\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.CONFIG_ERROR,\n        `Failed to load config from file: ${filePath}`,\n        { filePath },\n        error as Error\n      );\n    }\n  }\n\n  private loadFromRemote(url?: string): void {\n    if (!url) {\n      throw new SkerError(ErrorCodes.CONFIG_ERROR, 'URL is required for remote source');\n    }\n    \n    console.warn('Remote config loading not implemented yet');\n  }\n\n  private parseEnvValue(value: string | undefined): any {\n    if (value === undefined) return undefined;\n    if (value === '') return '';\n    \n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n    \n    if (/^\\d+$/.test(value)) return parseInt(value, 10);\n    if (/^\\d+\\.\\d+$/.test(value)) return parseFloat(value);\n    \n    try {\n      return JSON.parse(value);\n    } catch {\n      return value;\n    }\n  }\n\n  private getNestedValue(obj: Record<string, any>, key: string): any {\n    const keys = key.split('.');\n    let current = obj;\n    \n    for (const k of keys) {\n      if (current === null || current === undefined || typeof current !== 'object') {\n        return undefined;\n      }\n      current = current[k];\n    }\n    \n    return current;\n  }\n\n  private setNestedValue(obj: Record<string, any>, key: string, value: any): void {\n    const keys = key.split('.');\n    let current = obj;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      const k = keys[i]!;\n      if (current[k] === undefined || typeof current[k] !== 'object') {\n        current[k] = {};\n      }\n      current = current[k];\n    }\n    \n    current[keys[keys.length - 1]!] = value;\n  }\n\n  private deleteNestedValue(obj: Record<string, any>, key: string): void {\n    const keys = key.split('.');\n    let current = obj;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      const k = keys[i]!;\n      if (current[k] === undefined || typeof current[k] !== 'object') {\n        return;\n      }\n      current = current[k];\n    }\n    \n    delete current[keys[keys.length - 1]!];\n  }\n\n  private notifyWatchers(key: string, value: any): void {\n    const handlers = this.watchers.get(key);\n    if (handlers) {\n      for (const handler of handlers) {\n        try {\n          handler(value);\n        } catch (error) {\n          console.error(`Config watcher error for key \"${key}\":`, error);\n        }\n      }\n    }\n  }\n}","import { EventBus } from '../events/index.js';\nimport { LifecycleOptions, LifecycleHook, AsyncHandler, ERROR, LIFECYCLE_STARTING, LIFECYCLE_STARTED, LIFECYCLE_STOPPING, LIFECYCLE_STOPPED, LIFECYCLE_STATE_CHANGED, LIFECYCLE_HOOK_EXECUTING, LIFECYCLE_HOOK_EXECUTED, LIFECYCLE_HOOK_ERROR } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\n\nexport enum LifecycleState {\n  CREATED = 'created',\n  STARTING = 'starting',\n  STARTED = 'started',\n  STOPPING = 'stopping',\n  STOPPED = 'stopped',\n  ERROR = 'error'\n}\n\nexport class LifecycleManager extends EventBus {\n  private state: LifecycleState = LifecycleState.CREATED;\n  private readonly startHooks: LifecycleHook[] = [];\n  private readonly stopHooks: LifecycleHook[] = [];\n  private readonly options: LifecycleOptions;\n  private startPromise?: Promise<void>;\n  private stopPromise?: Promise<void>;\n\n  constructor(options: LifecycleOptions = {}) {\n    super();\n    this.options = {\n      startTimeout: 30000,\n      stopTimeout: 10000,\n      gracefulShutdown: true,\n      ...options\n    };\n\n    if (this.options.gracefulShutdown) {\n      this.setupGracefulShutdown();\n    }\n  }\n\n  public get currentState(): LifecycleState {\n    return this.state;\n  }\n\n  public get isStarted(): boolean {\n    return this.state === LifecycleState.STARTED;\n  }\n\n  public get isStopped(): boolean {\n    return this.state === LifecycleState.STOPPED;\n  }\n\n  public get isStarting(): boolean {\n    return this.state === LifecycleState.STARTING;\n  }\n\n  public get isStopping(): boolean {\n    return this.state === LifecycleState.STOPPING;\n  }\n\n  public onStart(handler: AsyncHandler, options?: { name?: string; timeout?: number }): void {\n    if (typeof handler !== 'function') {\n      throw new SkerError(ErrorCodes.INITIALIZATION_FAILED, 'Start handler must be a function');\n    }\n\n    this.startHooks.push({\n      handler,\n      name: options?.name || undefined,\n      timeout: options?.timeout || this.options.startTimeout\n    });\n  }\n\n  public onStop(handler: AsyncHandler, options?: { name?: string; timeout?: number }): void {\n    if (typeof handler !== 'function') {\n      throw new SkerError(ErrorCodes.INITIALIZATION_FAILED, 'Stop handler must be a function');\n    }\n\n    this.stopHooks.unshift({\n      handler,\n      name: options?.name || undefined,\n      timeout: options?.timeout || this.options.stopTimeout\n    });\n  }\n\n  public async start(): Promise<void> {\n    if (this.state === LifecycleState.STARTED) {\n      return;\n    }\n\n    if (this.state === LifecycleState.STARTING) {\n      return this.startPromise;\n    }\n\n    if (this.state !== LifecycleState.CREATED && this.state !== LifecycleState.STOPPED) {\n      throw new SkerError(\n        ErrorCodes.START_FAILED,\n        `Cannot start from state: ${this.state}`\n      );\n    }\n\n    this.startPromise = this.doStart();\n    return this.startPromise;\n  }\n\n  public async stop(): Promise<void> {\n    if (this.state === LifecycleState.STOPPED) {\n      return;\n    }\n\n    if (this.state === LifecycleState.STOPPING) {\n      return this.stopPromise;\n    }\n\n    if (this.state !== LifecycleState.STARTED) {\n      throw new SkerError(\n        ErrorCodes.STOP_FAILED,\n        `Cannot stop from state: ${this.state}`\n      );\n    }\n\n    this.stopPromise = this.doStop();\n    return this.stopPromise;\n  }\n\n  public async restart(): Promise<void> {\n    if (this.isStarted) {\n      await this.stop();\n    }\n    await this.start();\n  }\n\n  public removeStartHook(name: string): boolean {\n    const index = this.startHooks.findIndex(hook => hook.name === name);\n    if (index >= 0) {\n      this.startHooks.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  public removeStopHook(name: string): boolean {\n    const index = this.stopHooks.findIndex(hook => hook.name === name);\n    if (index >= 0) {\n      this.stopHooks.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  private async doStart(): Promise<void> {\n    try {\n      this.setState(LifecycleState.STARTING);\n      this.emit(LIFECYCLE_STARTING, {});\n\n      for (const hook of this.startHooks) {\n        await this.executeHook(hook, 'start');\n      }\n\n      this.setState(LifecycleState.STARTED);\n      this.emit(LIFECYCLE_STARTED, {});\n    } catch (error) {\n      this.setState(LifecycleState.ERROR);\n      this.emit(ERROR, { error, event: LIFECYCLE_STARTING });\n      \n      throw new SkerError(\n        ErrorCodes.START_FAILED,\n        'Failed to start lifecycle',\n        { state: this.state },\n        error as Error\n      );\n    }\n  }\n\n  private async doStop(): Promise<void> {\n    try {\n      this.setState(LifecycleState.STOPPING);\n      this.emit(LIFECYCLE_STOPPING, {});\n\n      for (const hook of this.stopHooks) {\n        await this.executeHook(hook, 'stop');\n      }\n\n      this.setState(LifecycleState.STOPPED);\n      this.emit(LIFECYCLE_STOPPED, {});\n    } catch (error) {\n      this.setState(LifecycleState.ERROR);\n      this.emit(ERROR, { error, event: LIFECYCLE_STOPPING });\n      \n      throw new SkerError(\n        ErrorCodes.STOP_FAILED,\n        'Failed to stop lifecycle',\n        { state: this.state },\n        error as Error\n      );\n    }\n  }\n\n  private async executeHook(hook: LifecycleHook, phase: 'start' | 'stop'): Promise<void> {\n    const hookName = hook.name || `anonymous-${phase}-hook`;\n    const timeout = hook.timeout || (phase === 'start' ? this.options.startTimeout : this.options.stopTimeout);\n\n    try {\n      this.emit(LIFECYCLE_HOOK_EXECUTING, { name: hookName, phase });\n      \n      await Promise.race([\n        hook.handler(),\n        this.createTimeoutPromise(timeout!, hookName, phase)\n      ]);\n\n      this.emit(LIFECYCLE_HOOK_EXECUTED, { name: hookName, phase });\n    } catch (error) {\n      this.emit(LIFECYCLE_HOOK_ERROR, { name: hookName, phase, error });\n      throw new SkerError(\n        phase === 'start' ? ErrorCodes.START_FAILED : ErrorCodes.STOP_FAILED,\n        `${phase} hook \"${hookName}\" failed`,\n        { hookName, phase, timeout },\n        error as Error\n      );\n    }\n  }\n\n  private createTimeoutPromise(timeout: number, hookName: string, phase: string): Promise<never> {\n    return new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new SkerError(\n          phase === 'start' ? ErrorCodes.START_FAILED : ErrorCodes.STOP_FAILED,\n          `${phase} hook \"${hookName}\" timed out after ${timeout}ms`\n        ));\n      }, timeout);\n    });\n  }\n\n  private setState(newState: LifecycleState): void {\n    const oldState = this.state;\n    this.state = newState;\n    this.emit(LIFECYCLE_STATE_CHANGED, { oldState, newState });\n  }\n\n  private setupGracefulShutdown(): void {\n    const signals: NodeJS.Signals[] = ['SIGINT', 'SIGTERM'];\n    \n    const shutdown = async (signal: string) => {\n      console.log(`Received ${signal}. Starting graceful shutdown...`);\n      \n      try {\n        await this.stop();\n        console.log('Graceful shutdown completed');\n        process.exit(0);\n      } catch (error) {\n        console.error('Graceful shutdown failed:', error);\n        process.exit(1);\n      }\n    };\n\n    signals.forEach(signal => {\n      process.on(signal, () => shutdown(signal));\n    });\n\n    process.on('uncaughtException', async (error) => {\n      console.error('Uncaught exception:', error);\n      try {\n        await this.stop();\n      } catch (stopError) {\n        console.error('Failed to stop gracefully after uncaught exception:', stopError);\n      }\n      process.exit(1);\n    });\n\n    process.on('unhandledRejection', async (reason) => {\n      console.error('Unhandled rejection:', reason);\n      try {\n        await this.stop();\n      } catch (stopError) {\n        console.error('Failed to stop gracefully after unhandled rejection:', stopError);\n      }\n      process.exit(1);\n    });\n  }\n}","import { EventBus } from '../events/index.js';\nimport { Plugin, PluginConfig, PluginContext, PLUGIN_REGISTERED, PLUGIN_UNREGISTERED, PLUGIN_SKIPPED, PLUGIN_INITIALIZING, PLUGIN_INITIALIZED, PLUGIN_ERROR, PLUGIN_DESTROYING, PLUGIN_DESTROYED, PLUGIN_ENABLED, PLUGIN_DISABLED, PLUGIN_CONFIG_UPDATED } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\n\ninterface PluginInstance {\n  plugin: Plugin;\n  config: PluginConfig;\n  context: PluginContext;\n  initialized: boolean;\n  instance?: any;\n}\n\nexport class PluginManager extends EventBus {\n  private plugins: Map<string, PluginInstance> = new Map();\n  private readonly core: any;\n  private initializationOrder: string[] = [];\n\n  constructor(core: any) {\n    super();\n    this.core = core;\n  }\n\n  public register(name: string, plugin: Plugin, config: PluginConfig = { name }): void {\n    if (!name) {\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, 'Plugin name is required');\n    }\n\n    if (!plugin || typeof plugin.initialize !== 'function') {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        'Plugin must have an initialize method'\n      );\n    }\n\n    if (this.plugins.has(name)) {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Plugin \"${name}\" is already registered`\n      );\n    }\n\n    const context: PluginContext = {\n      core: this.core,\n      config: config.options || {},\n      logger: this.core?.getLogger?.(name)\n    };\n\n    this.plugins.set(name, {\n      plugin,\n      config,\n      context,\n      initialized: false\n    });\n\n    this.emit(PLUGIN_REGISTERED, { name, plugin, config });\n  }\n\n  public unregister(name: string): void {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance) {\n      return;\n    }\n\n    if (pluginInstance.initialized) {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Cannot unregister initialized plugin \"${name}\". Destroy it first.`\n      );\n    }\n\n    this.plugins.delete(name);\n    this.emit(PLUGIN_UNREGISTERED, { name });\n  }\n\n  public async initialize(name: string): Promise<void> {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance) {\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\n    }\n\n    if (pluginInstance.initialized) {\n      return;\n    }\n\n    if (pluginInstance.config.enabled === false) {\n      this.emit(PLUGIN_SKIPPED, { name, reason: 'disabled' });\n      return;\n    }\n\n    try {\n      this.emit(PLUGIN_INITIALIZING, { name });\n      \n      pluginInstance.instance = await pluginInstance.plugin.initialize(pluginInstance.context);\n      pluginInstance.initialized = true;\n      this.initializationOrder.push(name);\n\n      this.emit(PLUGIN_INITIALIZED, { name });\n    } catch (error) {\n      this.emit(PLUGIN_ERROR, { name, error, phase: 'initialize' });\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Failed to initialize plugin \"${name}\"`,\n        { name },\n        error as Error\n      );\n    }\n  }\n\n  public async initializeAll(): Promise<void> {\n    const plugins = Array.from(this.plugins.entries());\n    const errors: Array<{ name: string; error: Error }> = [];\n\n    for (const [name] of plugins) {\n      try {\n        await this.initialize(name);\n      } catch (error) {\n        errors.push({ name, error: error as Error });\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Failed to initialize ${errors.length} plugin(s)`,\n        { errors: errors.map(e => ({ name: e.name, message: e.error.message })) }\n      );\n    }\n  }\n\n  public async destroy(name: string): Promise<void> {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance || !pluginInstance.initialized) {\n      return;\n    }\n\n    try {\n      this.emit(PLUGIN_DESTROYING, { name });\n      \n      if (typeof pluginInstance.plugin.destroy === 'function') {\n        await pluginInstance.plugin.destroy();\n      }\n      \n      pluginInstance.initialized = false;\n      pluginInstance.instance = undefined;\n      \n      const index = this.initializationOrder.indexOf(name);\n      if (index >= 0) {\n        this.initializationOrder.splice(index, 1);\n      }\n\n      this.emit(PLUGIN_DESTROYED, { name });\n    } catch (error) {\n      this.emit(PLUGIN_ERROR, { name, error, phase: 'destroy' });\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Failed to destroy plugin \"${name}\"`,\n        { name },\n        error as Error\n      );\n    }\n  }\n\n  public async destroyAll(): Promise<void> {\n    const errors: Array<{ name: string; error: Error }> = [];\n    \n    const destroyOrder = [...this.initializationOrder].reverse();\n    \n    for (const name of destroyOrder) {\n      try {\n        await this.destroy(name);\n      } catch (error) {\n        errors.push({ name, error: error as Error });\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Failed to destroy ${errors.length} plugin(s)`,\n        { errors: errors.map(e => ({ name: e.name, message: e.error.message })) }\n      );\n    }\n  }\n\n  public get<T = any>(name: string): T | undefined {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance || !pluginInstance.initialized) {\n      return undefined;\n    }\n    return pluginInstance.instance as T;\n  }\n\n  public has(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  public isInitialized(name: string): boolean {\n    const pluginInstance = this.plugins.get(name);\n    return pluginInstance?.initialized || false;\n  }\n\n  public getRegisteredPlugins(): string[] {\n    return Array.from(this.plugins.keys());\n  }\n\n  public getInitializedPlugins(): string[] {\n    return this.initializationOrder.slice();\n  }\n\n  public getPluginInfo(name: string): PluginConfig | undefined {\n    const pluginInstance = this.plugins.get(name);\n    return pluginInstance?.config;\n  }\n\n  public getAllPluginInfo(): Record<string, PluginConfig & { initialized: boolean }> {\n    const result: Record<string, PluginConfig & { initialized: boolean }> = {};\n    \n    for (const [name, instance] of this.plugins) {\n      result[name] = {\n        ...instance.config,\n        initialized: instance.initialized\n      };\n    }\n    \n    return result;\n  }\n\n  public async enable(name: string): Promise<void> {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance) {\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\n    }\n\n    if (pluginInstance.config.enabled !== false) {\n      return;\n    }\n\n    pluginInstance.config.enabled = true;\n    \n    if (!pluginInstance.initialized) {\n      await this.initialize(name);\n    }\n\n    this.emit(PLUGIN_ENABLED, { name });\n  }\n\n  public async disable(name: string): Promise<void> {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance) {\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\n    }\n\n    if (pluginInstance.config.enabled === false) {\n      return;\n    }\n\n    if (pluginInstance.initialized) {\n      await this.destroy(name);\n    }\n\n    pluginInstance.config.enabled = false;\n    this.emit(PLUGIN_DISABLED, { name });\n  }\n\n  public updatePluginConfig(name: string, config: Record<string, any>): void {\n    const pluginInstance = this.plugins.get(name);\n    if (!pluginInstance) {\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\n    }\n\n    const oldConfig = { ...pluginInstance.context.config };\n    pluginInstance.context.config = { ...pluginInstance.context.config, ...config };\n    pluginInstance.config.options = { ...pluginInstance.config.options, ...config };\n\n    this.emit(PLUGIN_CONFIG_UPDATED, { name, oldConfig, newConfig: pluginInstance.context.config });\n  }\n}","import { EventBus } from '../events/index.js';\nimport { MiddlewareHandler, MiddlewareContext, MIDDLEWARE_ADDED, MIDDLEWARE_REMOVED, MIDDLEWARE_ENABLED, MIDDLEWARE_DISABLED, MIDDLEWARES_CLEARED, MIDDLEWARE_EXECUTING, MIDDLEWARE_EXECUTED, MIDDLEWARE_ERROR, MIDDLEWARE_CHAIN_COMPLETED, MIDDLEWARE_CHAIN_FAILED, MIDDLEWARE_TIMEOUT, MIDDLEWARE_INSERTED } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\n\ninterface MiddlewareInfo {\n  handler: MiddlewareHandler;\n  name: string | undefined;\n  priority: number;\n  enabled: boolean;\n}\n\nexport class MiddlewareManager extends EventBus {\n  private middlewares: MiddlewareInfo[] = [];\n  private sorted = true;\n\n  public use(handler: MiddlewareHandler, options?: {\n    name?: string;\n    priority?: number;\n    enabled?: boolean;\n  }): void {\n    if (typeof handler !== 'function') {\n      throw new SkerError(\n        ErrorCodes.MIDDLEWARE_ERROR,\n        'Middleware handler must be a function'\n      );\n    }\n\n    const middleware: MiddlewareInfo = {\n      handler,\n      name: options?.name || undefined,\n      priority: options?.priority || 0,\n      enabled: options?.enabled !== false\n    };\n\n    this.middlewares.push(middleware);\n    this.sorted = false;\n\n    this.emit(MIDDLEWARE_ADDED, { middleware });\n  }\n\n  public remove(nameOrHandler: string | MiddlewareHandler): boolean {\n    const index = this.middlewares.findIndex(mw => \n      (typeof nameOrHandler === 'string' && mw.name === nameOrHandler) ||\n      (typeof nameOrHandler === 'function' && mw.handler === nameOrHandler)\n    );\n\n    if (index >= 0) {\n      const removed = this.middlewares.splice(index, 1)[0];\n      this.emit(MIDDLEWARE_REMOVED, { middleware: removed });\n      return true;\n    }\n\n    return false;\n  }\n\n  public enable(name: string): boolean {\n    const middleware = this.middlewares.find(mw => mw.name === name);\n    if (middleware) {\n      middleware.enabled = true;\n      this.emit(MIDDLEWARE_ENABLED, { name });\n      return true;\n    }\n    return false;\n  }\n\n  public disable(name: string): boolean {\n    const middleware = this.middlewares.find(mw => mw.name === name);\n    if (middleware) {\n      middleware.enabled = false;\n      this.emit(MIDDLEWARE_DISABLED, { name });\n      return true;\n    }\n    return false;\n  }\n\n  public clear(): void {\n    const count = this.middlewares.length;\n    this.middlewares = [];\n    this.sorted = true;\n    this.emit(MIDDLEWARES_CLEARED, { count });\n  }\n\n  public async execute(context: MiddlewareContext): Promise<void> {\n    const enabledMiddlewares = this.getEnabledMiddlewares();\n    \n    if (enabledMiddlewares.length === 0) {\n      return;\n    }\n\n    let currentIndex = 0;\n    const executedMiddlewares: string[] = [];\n\n    const next = async (): Promise<void> => {\n      if (currentIndex >= enabledMiddlewares.length) {\n        return;\n      }\n\n      const middleware = enabledMiddlewares[currentIndex++]!;\n      const middlewareName = middleware.name || `anonymous-${currentIndex}`;\n      \n      try {\n        this.emit(MIDDLEWARE_EXECUTING, { name: middlewareName, context });\n        executedMiddlewares.push(middlewareName);\n        \n        await middleware.handler(context, next);\n        \n        this.emit(MIDDLEWARE_EXECUTED, { name: middlewareName, context });\n      } catch (error) {\n        this.emit(MIDDLEWARE_ERROR, { name: middlewareName, error, context });\n        throw new SkerError(\n          ErrorCodes.MIDDLEWARE_ERROR,\n          `Middleware \"${middlewareName}\" failed`,\n          { middlewareName, executedMiddlewares },\n          error as Error\n        );\n      }\n    };\n\n    try {\n      await next();\n      this.emit(MIDDLEWARE_CHAIN_COMPLETED, { executedMiddlewares, context });\n    } catch (error) {\n      this.emit(MIDDLEWARE_CHAIN_FAILED, { error, executedMiddlewares, context });\n      throw error;\n    }\n  }\n\n  public async executeWithTimeout(\n    context: MiddlewareContext,\n    timeout: number\n  ): Promise<void> {\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      setTimeout(() => {\n        reject(new SkerError(\n          ErrorCodes.MIDDLEWARE_ERROR,\n          `Middleware execution timed out after ${timeout}ms`,\n          { timeout, context }\n        ));\n      }, timeout);\n    });\n\n    try {\n      await Promise.race([\n        this.execute(context),\n        timeoutPromise\n      ]);\n    } catch (error) {\n      if (error instanceof SkerError && error.message.includes('timed out')) {\n        this.emit(MIDDLEWARE_TIMEOUT, { timeout, context });\n      }\n      throw error;\n    }\n  }\n\n  public getMiddlewares(): Array<{\n    name?: string;\n    priority: number;\n    enabled: boolean;\n  }> {\n    return this.middlewares.map(mw => ({\n      name: mw.name,\n      priority: mw.priority || 0,\n      enabled: mw.enabled !== false\n    }));\n  }\n\n  public getEnabledMiddlewares(): MiddlewareInfo[] {\n    if (!this.sorted) {\n      this.sortMiddlewares();\n    }\n\n    return this.middlewares.filter(mw => mw.enabled !== false);\n  }\n\n  public getMiddlewareCount(): number {\n    return this.middlewares.length;\n  }\n\n  public getEnabledMiddlewareCount(): number {\n    return this.middlewares.filter(mw => mw.enabled !== false).length;\n  }\n\n  public hasMiddleware(nameOrHandler: string | MiddlewareHandler): boolean {\n    return this.middlewares.some(mw => \n      (typeof nameOrHandler === 'string' && mw.name === nameOrHandler) ||\n      (typeof nameOrHandler === 'function' && mw.handler === nameOrHandler)\n    );\n  }\n\n  public insertBefore(\n    beforeName: string,\n    handler: MiddlewareHandler,\n    options?: {\n      name?: string;\n      priority?: number;\n      enabled?: boolean;\n    }\n  ): boolean {\n    const index = this.middlewares.findIndex(mw => mw.name === beforeName);\n    if (index < 0) {\n      return false;\n    }\n\n    const middleware: MiddlewareInfo = {\n      handler,\n      name: options?.name || undefined,\n      priority: options?.priority || 0,\n      enabled: options?.enabled !== false\n    };\n\n    this.middlewares.splice(index, 0, middleware);\n    this.sorted = false;\n\n    this.emit(MIDDLEWARE_INSERTED, { middleware, beforeName });\n    return true;\n  }\n\n  public insertAfter(\n    afterName: string,\n    handler: MiddlewareHandler,\n    options?: {\n      name?: string;\n      priority?: number;\n      enabled?: boolean;\n    }\n  ): boolean {\n    const index = this.middlewares.findIndex(mw => mw.name === afterName);\n    if (index < 0) {\n      return false;\n    }\n\n    const middleware: MiddlewareInfo = {\n      handler,\n      name: options?.name || undefined,\n      priority: options?.priority || 0,\n      enabled: options?.enabled !== false\n    };\n\n    this.middlewares.splice(index + 1, 0, middleware);\n    this.sorted = false;\n\n    this.emit(MIDDLEWARE_INSERTED, { middleware, afterName });\n    return true;\n  }\n\n  private sortMiddlewares(): void {\n    this.middlewares.sort((a, b) => {\n      const priorityA = a.priority || 0;\n      const priorityB = b.priority || 0;\n      return priorityB - priorityA;\n    });\n    this.sorted = true;\n  }\n}","import { CoreOptions, ERROR, LIFECYCLE_ERROR, MEMORY_THRESHOLD_EXCEEDED, MEMORY_USAGE, CORE_INITIALIZED, CORE_STARTING, CORE_STARTED, CORE_START_FAILED, CORE_STOPPING, CORE_STOPPED, CORE_STOP_FAILED, CORE_RESTARTING, CORE_RESTARTED, CORE_RESTART_FAILED, CORE_PLUGIN_ERROR, CORE_MIDDLEWARE_ERROR, CORE_CONFIG_CHANGE } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\nimport { EventBus } from '../events/index.js';\nimport { ConfigManager } from '../config/index.js';\nimport { LifecycleManager, LifecycleState } from '../lifecycle/index.js';\nimport { PluginManager } from '../plugins/index.js';\nimport { MiddlewareManager } from '../middleware/index.js';\n\nexport class SkerCore extends EventBus {\n  private readonly options: CoreOptions;\n  private readonly configManager: ConfigManager;\n  private readonly lifecycleManager: LifecycleManager;\n  private readonly pluginManager: PluginManager;\n  private readonly middlewareManager: MiddlewareManager;\n  private readonly startTime: number;\n\n  constructor(options: CoreOptions) {\n    super();\n\n    if (!options.serviceName) {\n      throw new SkerError(\n        ErrorCodes.INITIALIZATION_FAILED,\n        'Service name is required'\n      );\n    }\n\n    if (!options.version) {\n      throw new SkerError(\n        ErrorCodes.INITIALIZATION_FAILED,\n        'Service version is required'\n      );\n    }\n\n    this.options = {\n      environment: 'development',\n      plugins: [],\n      ...options\n    };\n\n    this.startTime = Date.now();\n\n    try {\n      this.configManager = new ConfigManager(this.options.config);\n      this.lifecycleManager = new LifecycleManager(this.options.lifecycle);\n      this.pluginManager = new PluginManager(this);\n      this.middlewareManager = new MiddlewareManager();\n\n      this.setupEventHandlers();\n      this.registerPlugins();\n      this.setupLifecycleHooks();\n\n      this.emit(CORE_INITIALIZED, {\n        serviceName: this.options.serviceName,\n        version: this.options.version,\n        environment: this.options.environment\n      });\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.INITIALIZATION_FAILED,\n        'Failed to initialize SkerCore',\n        { options: this.options },\n        error as Error\n      );\n    }\n  }\n\n  public get serviceName(): string {\n    return this.options.serviceName;\n  }\n\n  public get version(): string {\n    return this.options.version;\n  }\n\n  public get environment(): string {\n    return this.options.environment || 'development';\n  }\n\n  public get uptime(): number {\n    return Date.now() - this.startTime;\n  }\n\n  public get state(): LifecycleState {\n    return this.lifecycleManager.currentState;\n  }\n\n  public get isStarted(): boolean {\n    return this.lifecycleManager.isStarted;\n  }\n\n  public get isStopped(): boolean {\n    return this.lifecycleManager.isStopped;\n  }\n\n  public async start(): Promise<void> {\n    try {\n      this.emit(CORE_STARTING, {});\n      await this.lifecycleManager.start();\n      this.emit(CORE_STARTED, {\n        serviceName: this.serviceName,\n        version: this.version,\n        uptime: this.uptime\n      });\n    } catch (error) {\n      this.emit(CORE_START_FAILED, { error });\n      throw error;\n    }\n  }\n\n  public async stop(): Promise<void> {\n    try {\n      this.emit(CORE_STOPPING, {});\n      await this.lifecycleManager.stop();\n      this.emit(CORE_STOPPED, {\n        serviceName: this.serviceName,\n        uptime: this.uptime\n      });\n    } catch (error) {\n      this.emit(CORE_STOP_FAILED, { error });\n      throw error;\n    }\n  }\n\n  public async restart(): Promise<void> {\n    try {\n      this.emit(CORE_RESTARTING, {});\n      await this.lifecycleManager.restart();\n      this.emit(CORE_RESTARTED, {});\n    } catch (error) {\n      this.emit(CORE_RESTART_FAILED, { error });\n      throw error;\n    }\n\n  }\n\n  public getConfig(): ConfigManager {\n    return this.configManager;\n  }\n\n  public getLifecycle(): LifecycleManager {\n    return this.lifecycleManager;\n  }\n\n  public getPlugins(): PluginManager {\n    return this.pluginManager;\n  }\n\n  public getMiddleware(): MiddlewareManager {\n    return this.middlewareManager;\n  }\n\n  public getPlugin<T = any>(name: string): T {\n    const plugin = this.pluginManager.get<T>(name);\n    if (!plugin) {\n      throw new SkerError(\n        ErrorCodes.PLUGIN_ERROR,\n        `Plugin \"${name}\" not found or not initialized`\n      );\n    }\n    return plugin;\n  }\n\n  public hasPlugin(name: string): boolean {\n    return this.pluginManager.isInitialized(name);\n  }\n\n  public getInfo(): {\n    serviceName: string;\n    version: string;\n    environment: string;\n    state: LifecycleState;\n    uptime: number;\n    plugins: string[];\n    config: Record<string, any>;\n  } {\n    return {\n      serviceName: this.serviceName,\n      version: this.version,\n      environment: this.environment,\n      state: this.state,\n      uptime: this.uptime,\n      plugins: this.pluginManager.getInitializedPlugins(),\n      config: this.configManager.getAll()\n    };\n  }\n\n  public enableMemoryMonitoring(options?: {\n    interval?: number;\n    threshold?: number;\n  }): void {\n    const interval = options?.interval || 30000;\n    const threshold = options?.threshold || 0.8;\n\n    setInterval(() => {\n      const memoryUsage = process.memoryUsage();\n      const totalMemory = memoryUsage.heapTotal;\n      const usedMemory = memoryUsage.heapUsed;\n      const usage = usedMemory / totalMemory;\n\n      this.emit(MEMORY_USAGE, {\n        memoryUsage,\n        usage,\n        threshold,\n      });\n\n      if (usage > threshold) {\n        this.emit(MEMORY_THRESHOLD_EXCEEDED, {\n          usage,\n          threshold,\n          memoryUsage\n        });\n      }\n    }, interval);\n  }\n\n  setupEventHandlers(): void {\n    this.lifecycleManager.on(ERROR, (error) => {\n      this.emit(LIFECYCLE_ERROR, error);\n    });\n\n    this.pluginManager.on('pluginError', (data) => {\n      this.emit(CORE_PLUGIN_ERROR, data);\n    });\n\n    this.middlewareManager.on('middlewareError', (data) => {\n      this.emit(CORE_MIDDLEWARE_ERROR, data);\n    });\n\n    this.configManager.on('change', (data) => {\n      this.emit(CORE_CONFIG_CHANGE, data);\n    });\n\n    this.on('error', (error) => {\n      console.error('SkerCore error:', error);\n    });\n  }\n\n  private registerPlugins(): void {\n    if (!this.options.plugins?.length) {\n      return;\n    }\n\n    for (const pluginConfig of this.options.plugins) {\n      if (pluginConfig.enabled === false) {\n        continue;\n      }\n\n      try {\n        if (pluginConfig.package) {\n          import(pluginConfig.package)\n            .then((pluginModule) => {\n              const plugin = pluginModule.default || pluginModule;\n              this.pluginManager.register(pluginConfig.name, plugin, pluginConfig);\n            })\n            .catch((error) => {\n              console.warn(`Failed to load plugin \"${pluginConfig.name}\":`, error);\n            });\n        }\n      } catch (error) {\n        console.warn(`Failed to register plugin \"${pluginConfig.name}\":`, error);\n      }\n    }\n  }\n\n  private setupLifecycleHooks(): void {\n    this.lifecycleManager.onStart(async () => {\n      await this.pluginManager.initializeAll();\n    });\n\n    this.lifecycleManager.onStop(async () => {\n      await this.pluginManager.destroyAll();\n    });\n  }\n}","import { AsyncLocalStorage } from 'async_hooks';\nimport { randomUUID } from 'crypto';\nimport { ContextData } from '../types/index.js';\nimport { SkerError, ErrorCodes } from '../errors/index.js';\n\nconst contextStorage = new AsyncLocalStorage<Context>();\n\nexport class Context {\n  private readonly data: Map<string, any>;\n  private readonly startTime: number;\n  private readonly parent: Context | undefined;\n\n  constructor(initialData: ContextData = {}, parent?: Context) {\n    this.data = new Map();\n    this.startTime = Date.now();\n    this.parent = parent;\n\n    this.set('requestId', initialData.requestId || randomUUID());\n    this.set('userId', initialData.userId);\n    this.set('traceId', initialData.traceId || randomUUID());\n\n    for (const [key, value] of Object.entries(initialData)) {\n      if (key !== 'requestId' && key !== 'userId' && key !== 'traceId') {\n        this.set(key, value);\n      }\n    }\n  }\n\n  public static current(): Context | undefined {\n    return contextStorage.getStore();\n  }\n\n  public static ensure(): Context {\n    const current = Context.current();\n    if (!current) {\n      throw new SkerError(\n        ErrorCodes.CONTEXT_ERROR,\n        'No active context found. Make sure to run code within a context.'\n      );\n    }\n    return current;\n  }\n\n  public static create(data: ContextData = {}): Context {\n    const parent = Context.current();\n    return new Context(data, parent);\n  }\n\n  public static fork(additionalData: ContextData = {}): Context {\n    const parent = Context.current();\n    if (!parent) {\n      return new Context(additionalData);\n    }\n\n    const forkedData: ContextData = {\n      ...parent.toObject(),\n      ...additionalData\n    };\n\n    return new Context(forkedData, parent);\n  }\n\n  public async run<T>(callback: () => T | Promise<T>): Promise<T> {\n    return contextStorage.run(this, callback);\n  }\n\n  public get<T = any>(key: string): T | undefined {\n    if (this.data.has(key)) {\n      return this.data.get(key);\n    }\n\n    if (this.parent) {\n      return this.parent.get<T>(key);\n    }\n\n    return undefined;\n  }\n\n  public set<T = any>(key: string, value: T): void {\n    if (!key) {\n      throw new SkerError(ErrorCodes.CONTEXT_ERROR, 'Context key cannot be empty');\n    }\n    this.data.set(key, value);\n  }\n\n  public has(key: string): boolean {\n    return this.data.has(key) || (this.parent?.has(key) ?? false);\n  }\n\n  public delete(key: string): boolean {\n    return this.data.delete(key);\n  }\n\n  public get requestId(): string {\n    return this.get<string>('requestId')!;\n  }\n\n  public get userId(): string | undefined {\n    return this.get<string>('userId');\n  }\n\n  public get traceId(): string {\n    return this.get<string>('traceId')!;\n  }\n\n  public get elapsedTime(): number {\n    return Date.now() - this.startTime;\n  }\n\n  public keys(): string[] {\n    const keys = new Set<string>();\n\n    for (const key of this.data.keys()) {\n      keys.add(key);\n    }\n\n    if (this.parent) {\n      for (const key of this.parent.keys()) {\n        keys.add(key);\n      }\n    }\n\n    return Array.from(keys);\n  }\n\n  public values(): any[] {\n    return this.keys().map(key => this.get(key));\n  }\n\n  public entries(): Array<[string, any]> {\n    return this.keys().map(key => [key, this.get(key)]);\n  }\n\n  public toObject(): ContextData {\n    const result: ContextData = {};\n\n    for (const key of this.keys()) {\n      result[key] = this.get(key);\n    }\n\n    return result;\n  }\n\n  public serialize(): string {\n    return JSON.stringify(this.toObject());\n  }\n\n  public static deserialize(serialized: string): Context {\n    try {\n      const data = JSON.parse(serialized);\n      return new Context(data);\n    } catch (error) {\n      throw new SkerError(\n        ErrorCodes.CONTEXT_ERROR,\n        'Failed to deserialize context',\n        { serialized },\n        error as Error\n      );\n    }\n  }\n\n  public clone(): Context {\n    return new Context(this.toObject(), this.parent);\n  }\n\n  public child(additionalData: ContextData = {}): Context {\n    const childData: ContextData = {\n      ...this.toObject(),\n      ...additionalData\n    };\n\n    return new Context(childData, this);\n  }\n\n  public merge(other: Context): Context {\n    const mergedData: ContextData = {\n      ...this.toObject(),\n      ...other.toObject()\n    };\n\n    return new Context(mergedData);\n  }\n\n  public clear(): void {\n    this.data.clear();\n  }\n\n  public size(): number {\n    return new Set([...this.data.keys(), ...(this.parent?.keys() || [])]).size;\n  }\n\n  public isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  public toString(): string {\n    return `Context(requestId=${this.requestId}, traceId=${this.traceId}, keys=[${this.keys().join(', ')}])`;\n  }\n\n  public inspect(): string {\n    return `Context {\n  requestId: ${this.requestId}\n  traceId: ${this.traceId}\n  userId: ${this.userId || 'undefined'}\n  elapsedTime: ${this.elapsedTime}ms\n  data: ${JSON.stringify(this.toObject(), null, 2)}\n}`;\n  }\n}\n\nexport async function withContext<T>(\n  data: ContextData,\n  callback: () => T | Promise<T>\n): Promise<T> {\n  const context = new Context(data);\n  return context.run(callback);\n}\n\nexport async function withCurrentContext<T>(\n  additionalData: ContextData,\n  callback: () => T | Promise<T>\n): Promise<T> {\n  const context = Context.fork(additionalData);\n  return context.run(callback);\n}\n\nexport function getCurrentContext(): Context | undefined {\n  return Context.current();\n}\n\nexport function ensureContext(): Context {\n  return Context.ensure();\n}"],"mappings":"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","names":["ErrorCodes","LifecycleState"]}