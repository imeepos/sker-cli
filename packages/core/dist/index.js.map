{"version":3,"sources":["../src/types/index.ts","../src/errors/index.ts","../src/events/index.ts","../src/config/index.ts","../src/lifecycle/index.ts","../src/plugins/index.ts","../src/middleware/index.ts","../src/core/index.ts","../src/context/index.ts"],"sourcesContent":["export type AsyncHandler<T = any> = (data?: T) => Promise<void>;\r\nexport type SyncHandler<T = any> = (data?: T) => void;\r\nexport type EventHandler<T = any> = AsyncHandler<T> | SyncHandler<T>;\r\n\r\nexport interface CoreOptions {\r\n  serviceName: string;\r\n  version: string;\r\n  environment?: string;\r\n  plugins?: PluginConfig[];\r\n  config?: ConfigOptions;\r\n  lifecycle?: LifecycleOptions;\r\n}\r\n\r\nexport interface PluginConfig {\r\n  name: string;\r\n  package?: string;\r\n  options?: Record<string, any>;\r\n  enabled?: boolean;\r\n}\r\n\r\nexport interface ConfigOptions {\r\n  sources?: ConfigSource[];\r\n  defaultConfig?: Record<string, any>;\r\n  schema?: any;\r\n}\r\n\r\nexport interface ConfigSource {\r\n  type: 'env' | 'file' | 'remote';\r\n  prefix?: string;\r\n  path?: string;\r\n  url?: string;\r\n}\r\n\r\nexport interface LifecycleOptions {\r\n  startTimeout?: number;\r\n  stopTimeout?: number;\r\n  gracefulShutdown?: boolean;\r\n}\r\n\r\nexport interface LifecycleHook {\r\n  name: string | undefined;\r\n  handler: AsyncHandler;\r\n  timeout: number | undefined;\r\n}\r\n\r\nexport interface Plugin {\r\n  name: string;\r\n  version: string;\r\n  initialize: (context: PluginContext) => Promise<void>;\r\n  destroy: () => Promise<void>;\r\n}\r\n\r\nexport interface PluginContext {\r\n  core: any;\r\n  config: Record<string, any>;\r\n  logger?: any;\r\n}\r\n\r\nexport interface MiddlewareContext {\r\n  request?: any;\r\n  response?: any;\r\n  data?: any;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport type MiddlewareHandler = (\r\n  context: MiddlewareContext,\r\n  next: () => Promise<void>\r\n) => Promise<void>;\r\n\r\nexport interface ContextData {\r\n  requestId?: string;\r\n  userId?: string;\r\n  traceId?: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport enum ErrorCodes {\r\n  UNKNOWN = 'UNKNOWN',\r\n  INITIALIZATION_FAILED = 'INITIALIZATION_FAILED',\r\n  START_FAILED = 'START_FAILED',\r\n  STOP_FAILED = 'STOP_FAILED',\r\n  CONFIG_ERROR = 'CONFIG_ERROR',\r\n  PLUGIN_ERROR = 'PLUGIN_ERROR',\r\n  CONTEXT_ERROR = 'CONTEXT_ERROR',\r\n  MIDDLEWARE_ERROR = 'MIDDLEWARE_ERROR',\r\n  EVENT_ERROR = 'EVENT_ERROR'\r\n}\r\n\r\nexport type StringToken<T> = string & { __type?: T }\r\nexport const ERROR: StringToken<{ error: unknown, event: StringToken<any> }> = `ERROR`;\r\nexport const MEMORY_USAGE: StringToken<{\r\n  memoryUsage: NodeJS.MemoryUsage;\r\n  usage: number;\r\n  threshold: number;\r\n}> = `MEMORY_USAGE`;\r\n\r\nexport const MEMORY_THRESHOLD_EXCEEDED: StringToken<{\r\n  memoryUsage: NodeJS.MemoryUsage;\r\n  usage: number;\r\n  threshold: number;\r\n}> = `memoryThresholdExceeded`\r\n\r\nexport const LIFECYCLE_ERROR: StringToken<{ error: unknown, event: StringToken<any> }> = `lifecycleError`\r\n\r\nexport const CONFIG_CHANGE: StringToken<{\r\n  key: string;\r\n  value: any;\r\n  oldValue: any;\r\n}> = `change`;\r\n\r\nexport const CONFIG_RESET: StringToken<{\r\n  oldConfig: Record<string, any>;\r\n  newConfig: Record<string, any>;\r\n}> = `reset`;\r\n\r\nexport const LIFECYCLE_STARTING: StringToken<{}> = `starting`;\r\n\r\nexport const LIFECYCLE_STARTED: StringToken<{}> = `started`;\r\n\r\nexport const LIFECYCLE_STOPPING: StringToken<{}> = `stopping`;\r\n\r\nexport const LIFECYCLE_STOPPED: StringToken<{}> = `stopped`;\r\n\r\nexport const LIFECYCLE_STATE_CHANGED: StringToken<{\r\n  oldState: any;\r\n  newState: any;\r\n}> = `stateChanged`;\r\n\r\nexport const LIFECYCLE_HOOK_EXECUTING: StringToken<{\r\n  name: string;\r\n  phase: 'start' | 'stop';\r\n}> = `hookExecuting`;\r\n\r\nexport const LIFECYCLE_HOOK_EXECUTED: StringToken<{\r\n  name: string;\r\n  phase: 'start' | 'stop';\r\n}> = `hookExecuted`;\r\n\r\nexport const LIFECYCLE_HOOK_ERROR: StringToken<{\r\n  name: string;\r\n  phase: 'start' | 'stop';\r\n  error: unknown;\r\n}> = `hookError`;\r\n\r\nexport const MIDDLEWARE_ADDED: StringToken<{\r\n  middleware: any;\r\n}> = `middlewareAdded`;\r\n\r\nexport const MIDDLEWARE_REMOVED: StringToken<{\r\n  middleware: any;\r\n}> = `middlewareRemoved`;\r\n\r\nexport const MIDDLEWARE_ENABLED: StringToken<{\r\n  name: string;\r\n}> = `middlewareEnabled`;\r\n\r\nexport const MIDDLEWARE_DISABLED: StringToken<{\r\n  name: string;\r\n}> = `middlewareDisabled`;\r\n\r\nexport const MIDDLEWARES_CLEARED: StringToken<{\r\n  count: number;\r\n}> = `middlewaresCleared`;\r\n\r\nexport const MIDDLEWARE_EXECUTING: StringToken<{\r\n  name: string;\r\n  context: MiddlewareContext;\r\n}> = `middlewareExecuting`;\r\n\r\nexport const MIDDLEWARE_EXECUTED: StringToken<{\r\n  name: string;\r\n  context: MiddlewareContext;\r\n}> = `middlewareExecuted`;\r\n\r\nexport const MIDDLEWARE_ERROR: StringToken<{\r\n  name: string;\r\n  error: unknown;\r\n  context: MiddlewareContext;\r\n}> = `middlewareError`;\r\n\r\nexport const MIDDLEWARE_CHAIN_COMPLETED: StringToken<{\r\n  executedMiddlewares: string[];\r\n  context: MiddlewareContext;\r\n}> = `middlewareChainCompleted`;\r\n\r\nexport const MIDDLEWARE_CHAIN_FAILED: StringToken<{\r\n  error: unknown;\r\n  executedMiddlewares: string[];\r\n  context: MiddlewareContext;\r\n}> = `middlewareChainFailed`;\r\n\r\nexport const MIDDLEWARE_TIMEOUT: StringToken<{\r\n  timeout: number;\r\n  context: MiddlewareContext;\r\n}> = `middlewareTimeout`;\r\n\r\nexport const MIDDLEWARE_INSERTED: StringToken<{\r\n  middleware: any;\r\n  beforeName?: string;\r\n  afterName?: string;\r\n}> = `middlewareInserted`;\r\n\r\nexport const PLUGIN_REGISTERED: StringToken<{\r\n  name: string;\r\n  plugin: any;\r\n  config: PluginConfig;\r\n}> = `pluginRegistered`;\r\n\r\nexport const PLUGIN_UNREGISTERED: StringToken<{\r\n  name: string;\r\n}> = `pluginUnregistered`;\r\n\r\nexport const PLUGIN_SKIPPED: StringToken<{\r\n  name: string;\r\n  reason: string;\r\n}> = `pluginSkipped`;\r\n\r\nexport const PLUGIN_INITIALIZING: StringToken<{\r\n  name: string;\r\n}> = `pluginInitializing`;\r\n\r\nexport const PLUGIN_INITIALIZED: StringToken<{\r\n  name: string;\r\n}> = `pluginInitialized`;\r\n\r\nexport const PLUGIN_ERROR: StringToken<{\r\n  name: string;\r\n  error: unknown;\r\n  phase: string;\r\n}> = `pluginError`;\r\n\r\nexport const PLUGIN_DESTROYING: StringToken<{\r\n  name: string;\r\n}> = `pluginDestroying`;\r\n\r\nexport const PLUGIN_DESTROYED: StringToken<{\r\n  name: string;\r\n}> = `pluginDestroyed`;\r\n\r\nexport const PLUGIN_ENABLED: StringToken<{\r\n  name: string;\r\n}> = `pluginEnabled`;\r\n\r\nexport const PLUGIN_DISABLED: StringToken<{\r\n  name: string;\r\n}> = `pluginDisabled`;\r\n\r\nexport const PLUGIN_CONFIG_UPDATED: StringToken<{\r\n  name: string;\r\n  oldConfig: Record<string, any>;\r\n  newConfig: Record<string, any>;\r\n}> = `pluginConfigUpdated`;\r\n\r\nexport const CORE_INITIALIZED: StringToken<{\r\n  serviceName: string;\r\n  version: string;\r\n  environment: string;\r\n}> = `initialized`;\r\n\r\nexport const CORE_STARTING: StringToken<{}> = `starting`;\r\n\r\nexport const CORE_STARTED: StringToken<{\r\n  serviceName: string;\r\n  version: string;\r\n  uptime: number;\r\n}> = `started`;\r\n\r\nexport const CORE_START_FAILED: StringToken<{\r\n  error: unknown;\r\n}> = `startFailed`;\r\n\r\nexport const CORE_STOPPING: StringToken<{}> = `stopping`;\r\n\r\nexport const CORE_STOPPED: StringToken<{\r\n  serviceName: string;\r\n  uptime: number;\r\n}> = `stopped`;\r\n\r\nexport const CORE_STOP_FAILED: StringToken<{\r\n  error: unknown;\r\n}> = `stopFailed`;\r\n\r\nexport const CORE_RESTARTING: StringToken<{}> = `restarting`;\r\n\r\nexport const CORE_RESTARTED: StringToken<{}> = `restarted`;\r\n\r\nexport const CORE_RESTART_FAILED: StringToken<{\r\n  error: unknown;\r\n}> = `restartFailed`;\r\n\r\nexport const CORE_PLUGIN_ERROR: StringToken<{\r\n  name: string;\r\n  error: unknown;\r\n  phase: string;\r\n}> = `pluginError`;\r\n\r\nexport const CORE_MIDDLEWARE_ERROR: StringToken<{\r\n  name: string;\r\n  error: unknown;\r\n  context: MiddlewareContext;\r\n}> = `middlewareError`;\r\n\r\nexport const CORE_CONFIG_CHANGE: StringToken<{\r\n  key: string;\r\n  value: any;\r\n  oldValue: any;\r\n}> = `configChange`;","import { ErrorCodes } from '../types/index.js';\r\n\r\nexport class SkerError extends Error {\r\n  public readonly code: ErrorCodes;\r\n  public readonly details: Record<string, any> | undefined;\r\n  public override readonly cause: Error | undefined;\r\n\r\n  constructor(\r\n    code: ErrorCodes = ErrorCodes.UNKNOWN,\r\n    message?: string,\r\n    details?: Record<string, any>,\r\n    cause?: Error\r\n  ) {\r\n    super(message || code);\r\n    this.name = 'SkerError';\r\n    this.code = code;\r\n    this.details = details;\r\n    this.cause = cause;\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, SkerError);\r\n    }\r\n  }\r\n\r\n  public toJSON(): Record<string, any> {\r\n    return {\r\n      name: this.name,\r\n      code: this.code,\r\n      message: this.message,\r\n      details: this.details,\r\n      stack: this.stack,\r\n      cause: this.cause?.message\r\n    };\r\n  }\r\n\r\n  public override toString(): string {\r\n    let result = `${this.name} [${this.code}]: ${this.message}`;\r\n\r\n    if (this.details) {\r\n      result += `\\nDetails: ${JSON.stringify(this.details, null, 2)}`;\r\n    }\r\n\r\n    if (this.cause) {\r\n      result += `\\nCaused by: ${this.cause.message}`;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport function createError(\r\n  code: ErrorCodes,\r\n  message?: string,\r\n  details?: Record<string, any>,\r\n  cause?: Error\r\n): SkerError {\r\n  return new SkerError(code, message, details, cause);\r\n}\r\n\r\nexport function isError(error: any): error is Error {\r\n  return error instanceof Error;\r\n}\r\n\r\nexport function isSkerError(error: any): error is SkerError {\r\n  return error instanceof SkerError;\r\n}\r\n\r\nexport function wrapError(error: unknown, code: ErrorCodes, message?: string): SkerError {\r\n  if (isSkerError(error)) {\r\n    return error;\r\n  }\r\n\r\n  if (isError(error)) {\r\n    return new SkerError(code, message || error.message, undefined, error);\r\n  }\r\n\r\n  return new SkerError(code, message || String(error));\r\n}\r\n\r\nexport { ErrorCodes };","import { EventHandler, AsyncHandler, StringToken, ERROR } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\nexport class EventBus {\r\n  private listeners: Map<string, Set<EventHandler>> = new Map();\r\n  private maxListeners: number = 10;\r\n  private onceListeners: Map<string, Set<EventHandler>> = new Map();\r\n\r\n  public on<T = any>(event: StringToken<T>, handler: EventHandler<T>): void {\r\n    if (!event || typeof handler !== 'function') {\r\n      throw new SkerError(\r\n        ErrorCodes.EVENT_ERROR,\r\n        'Event name and handler are required'\r\n      );\r\n    }\r\n\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, new Set());\r\n    }\r\n\r\n    const handlers = this.listeners.get(event)!;\r\n\r\n    if (handlers.size >= this.maxListeners) {\r\n      console.warn(\r\n        `Warning: Maximum listeners (${this.maxListeners}) exceeded for event \"${event}\". ` +\r\n        'This could indicate a memory leak.'\r\n      );\r\n    }\r\n\r\n    handlers.add(handler);\r\n  }\r\n\r\n  public once<T = any>(event: StringToken<T>, handler: EventHandler<T>): void {\r\n    if (!event || typeof handler !== 'function') {\r\n      throw new SkerError(\r\n        ErrorCodes.EVENT_ERROR,\r\n        'Event name and handler are required'\r\n      );\r\n    }\r\n\r\n    if (!this.onceListeners.has(event)) {\r\n      this.onceListeners.set(event, new Set());\r\n    }\r\n\r\n    this.onceListeners.get(event)!.add(handler);\r\n  }\r\n\r\n  public off<T>(event: StringToken<T>, handler?: EventHandler<T>): void {\r\n    if (!event) {\r\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\r\n    }\r\n\r\n    if (handler) {\r\n      const handlers = this.listeners.get(event);\r\n      if (handlers) {\r\n        handlers.delete(handler);\r\n        if (handlers.size === 0) {\r\n          this.listeners.delete(event);\r\n        }\r\n      }\r\n\r\n      const onceHandlers = this.onceListeners.get(event);\r\n      if (onceHandlers) {\r\n        onceHandlers.delete(handler);\r\n        if (onceHandlers.size === 0) {\r\n          this.onceListeners.delete(event);\r\n        }\r\n      }\r\n    } else {\r\n      this.listeners.delete(event);\r\n      this.onceListeners.delete(event);\r\n    }\r\n  }\r\n\r\n  public emit<T = any>(event: StringToken<T>, data?: T): void {\r\n    if (!event) {\r\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\r\n    }\r\n\r\n    const handlers = this.listeners.get(event);\r\n    const onceHandlers = this.onceListeners.get(event);\r\n\r\n    if (!handlers?.size && !onceHandlers?.size) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (handlers) {\r\n        for (const handler of handlers) {\r\n          if (this.isAsyncHandler(handler)) {\r\n            handler(data).catch((error) => {\r\n              this.handleError(error, event);\r\n            });\r\n          } else {\r\n            handler(data);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (onceHandlers) {\r\n        for (const handler of onceHandlers) {\r\n          if (this.isAsyncHandler(handler)) {\r\n            handler(data).catch((error) => {\r\n              this.handleError(error, event);\r\n            });\r\n          } else {\r\n            handler(data);\r\n          }\r\n        }\r\n        this.onceListeners.delete(event);\r\n      }\r\n    } catch (error) {\r\n      this.handleError(error, event);\r\n    }\r\n  }\r\n\r\n  public async emitAsync<T = any>(event: StringToken<T>, data?: T): Promise<void> {\r\n    if (!event) {\r\n      throw new SkerError(ErrorCodes.EVENT_ERROR, 'Event name is required');\r\n    }\r\n\r\n    const handlers = this.listeners.get(event);\r\n    const onceHandlers = this.onceListeners.get(event);\r\n\r\n    if (!handlers?.size && !onceHandlers?.size) {\r\n      return;\r\n    }\r\n\r\n    const promises: Promise<void>[] = [];\r\n\r\n    try {\r\n      if (handlers) {\r\n        for (const handler of handlers) {\r\n          if (this.isAsyncHandler(handler)) {\r\n            promises.push(handler(data));\r\n          } else {\r\n            promises.push(Promise.resolve(handler(data)));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (onceHandlers) {\r\n        for (const handler of onceHandlers) {\r\n          if (this.isAsyncHandler(handler)) {\r\n            promises.push(handler(data));\r\n          } else {\r\n            promises.push(Promise.resolve(handler(data)));\r\n          }\r\n        }\r\n        this.onceListeners.delete(event);\r\n      }\r\n\r\n      await Promise.all(promises);\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.EVENT_ERROR,\r\n        `Error emitting async event \"${event}\"`,\r\n        { event, data },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  public removeAllListeners<T = any>(event?: StringToken<T>): void {\r\n    if (event) {\r\n      this.listeners.delete(event);\r\n      this.onceListeners.delete(event);\r\n    } else {\r\n      this.listeners.clear();\r\n      this.onceListeners.clear();\r\n    }\r\n  }\r\n\r\n  public listenerCount<T = any>(event: StringToken<T>): number {\r\n    const handlersCount = this.listeners.get(event)?.size || 0;\r\n    const onceHandlersCount = this.onceListeners.get(event)?.size || 0;\r\n    return handlersCount + onceHandlersCount;\r\n  }\r\n\r\n  public eventNames<T = any>(): StringToken<T>[] {\r\n    const allEvents = new Set([\r\n      ...this.listeners.keys(),\r\n      ...this.onceListeners.keys()\r\n    ]);\r\n    return Array.from(allEvents);\r\n  }\r\n\r\n  public setMaxListeners(n: number): void {\r\n    if (n < 0 || !Number.isInteger(n)) {\r\n      throw new SkerError(\r\n        ErrorCodes.EVENT_ERROR,\r\n        'maxListeners must be a non-negative integer'\r\n      );\r\n    }\r\n    this.maxListeners = n;\r\n  }\r\n\r\n  public getMaxListeners(): number {\r\n    return this.maxListeners;\r\n  }\r\n\r\n  private isAsyncHandler<T = any>(handler: EventHandler<T>): handler is AsyncHandler<T> {\r\n    return handler.constructor.name === 'AsyncFunction';\r\n  }\r\n\r\n  private handleError<T>(error: unknown, event: StringToken<T>): void {\r\n    console.error(`EventBus error in event \"${event}\":`, error);\r\n\r\n    if (this.listenerCount('error') > 0) {\r\n      this.emit(ERROR, { error, event });\r\n    }\r\n  }\r\n}\r\n","import { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { ConfigOptions, ConfigSource, CONFIG_CHANGE, CONFIG_RESET } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\nimport { EventBus } from '../events/index.js';\r\n\r\nexport class ConfigManager extends EventBus {\r\n  private config: Record<string, any> = {};\r\n  private readonly sources: ConfigSource[];\r\n  private readonly defaultConfig: Record<string, any>;\r\n  private readonly schema?: any;\r\n  private watchers: Map<string, Set<(value: any) => void>> = new Map();\r\n\r\n  constructor(options: ConfigOptions = {}) {\r\n    super();\r\n    this.sources = options.sources || [{ type: 'env' }];\r\n    this.defaultConfig = options.defaultConfig || {};\r\n    this.schema = options.schema;\r\n    \r\n    this.loadConfig();\r\n  }\r\n\r\n  public get<T = any>(key: string): T {\r\n    return this.getNestedValue(this.config, key) ?? this.getNestedValue(this.defaultConfig, key);\r\n  }\r\n\r\n  public set(key: string, value: any): void {\r\n    const oldValue = this.get(key);\r\n    this.setNestedValue(this.config, key, value);\r\n    \r\n    if (oldValue !== value) {\r\n      this.emit(CONFIG_CHANGE, { key, value, oldValue });\r\n      this.notifyWatchers(key, value);\r\n    }\r\n  }\r\n\r\n  public has(key: string): boolean {\r\n    return this.getNestedValue(this.config, key) !== undefined ||\r\n           this.getNestedValue(this.defaultConfig, key) !== undefined;\r\n  }\r\n\r\n  public delete(key: string): boolean {\r\n    if (this.has(key)) {\r\n      const oldValue = this.get(key);\r\n      this.deleteNestedValue(this.config, key);\r\n      this.emit(CONFIG_CHANGE, { key, value: undefined, oldValue });\r\n      this.notifyWatchers(key, undefined);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public getAll(): Record<string, any> {\r\n    return { ...this.defaultConfig, ...this.config };\r\n  }\r\n\r\n  public reset(): void {\r\n    const oldConfig = { ...this.config };\r\n    this.config = {};\r\n    this.loadConfig();\r\n    \r\n    this.emit(CONFIG_RESET, { oldConfig, newConfig: this.config });\r\n  }\r\n\r\n  public onChange(key: string, handler: (value: any) => void): () => void {\r\n    if (!this.watchers.has(key)) {\r\n      this.watchers.set(key, new Set());\r\n    }\r\n    \r\n    this.watchers.get(key)!.add(handler);\r\n    \r\n    return () => {\r\n      const handlers = this.watchers.get(key);\r\n      if (handlers) {\r\n        handlers.delete(handler);\r\n        if (handlers.size === 0) {\r\n          this.watchers.delete(key);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  public validate(): boolean {\r\n    if (!this.schema) {\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      if (typeof this.schema.validate === 'function') {\r\n        return this.schema.validate(this.getAll());\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.CONFIG_ERROR,\r\n        'Configuration validation failed',\r\n        { config: this.getAll() },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private loadConfig(): void {\r\n    try {\r\n      for (const source of this.sources) {\r\n        this.loadFromSource(source);\r\n      }\r\n      \r\n      this.validate();\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.CONFIG_ERROR,\r\n        'Failed to load configuration',\r\n        { sources: this.sources },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private loadFromSource(source: ConfigSource): void {\r\n    try {\r\n      switch (source.type) {\r\n        case 'env':\r\n          this.loadFromEnv(source.prefix);\r\n          break;\r\n        case 'file':\r\n          this.loadFromFile(source.path);\r\n          break;\r\n        case 'remote':\r\n          this.loadFromRemote(source.url);\r\n          break;\r\n        default:\r\n          throw new SkerError(\r\n            ErrorCodes.CONFIG_ERROR,\r\n            `Unsupported config source type: ${source.type}`\r\n          );\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Failed to load config from ${source.type} source:`, error);\r\n    }\r\n  }\r\n\r\n  private loadFromEnv(prefix?: string): void {\r\n    const envPrefix = prefix || '';\r\n    \r\n    for (const [key, value] of Object.entries(process.env)) {\r\n      if (!envPrefix || key.startsWith(envPrefix)) {\r\n        const configKey = envPrefix \r\n          ? key.slice(envPrefix.length).toLowerCase().replace(/_/g, '.')\r\n          : key.toLowerCase().replace(/_/g, '.');\r\n        \r\n        this.setNestedValue(this.config, configKey, this.parseEnvValue(value));\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadFromFile(filePath?: string): void {\r\n    if (!filePath) {\r\n      throw new SkerError(ErrorCodes.CONFIG_ERROR, 'File path is required for file source');\r\n    }\r\n\r\n    try {\r\n      const fullPath = join(process.cwd(), filePath);\r\n      const content = readFileSync(fullPath, 'utf-8');\r\n      \r\n      let parsed: any;\r\n      if (filePath.endsWith('.json')) {\r\n        parsed = JSON.parse(content);\r\n      } else if (filePath.endsWith('.js') || filePath.endsWith('.mjs')) {\r\n        throw new SkerError(ErrorCodes.CONFIG_ERROR, 'JavaScript config files not supported yet');\r\n      } else {\r\n        throw new SkerError(ErrorCodes.CONFIG_ERROR, 'Unsupported config file format');\r\n      }\r\n      \r\n      Object.assign(this.config, parsed);\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.CONFIG_ERROR,\r\n        `Failed to load config from file: ${filePath}`,\r\n        { filePath },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private loadFromRemote(url?: string): void {\r\n    if (!url) {\r\n      throw new SkerError(ErrorCodes.CONFIG_ERROR, 'URL is required for remote source');\r\n    }\r\n    \r\n    console.warn('Remote config loading not implemented yet');\r\n  }\r\n\r\n  private parseEnvValue(value: string | undefined): any {\r\n    if (value === undefined) return undefined;\r\n    if (value === '') return '';\r\n    \r\n    if (value.toLowerCase() === 'true') return true;\r\n    if (value.toLowerCase() === 'false') return false;\r\n    \r\n    if (/^\\d+$/.test(value)) return parseInt(value, 10);\r\n    if (/^\\d+\\.\\d+$/.test(value)) return parseFloat(value);\r\n    \r\n    try {\r\n      return JSON.parse(value);\r\n    } catch {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  private getNestedValue(obj: Record<string, any>, key: string): any {\r\n    const keys = key.split('.');\r\n    let current = obj;\r\n    \r\n    for (const k of keys) {\r\n      if (current === null || current === undefined || typeof current !== 'object') {\r\n        return undefined;\r\n      }\r\n      current = current[k];\r\n    }\r\n    \r\n    return current;\r\n  }\r\n\r\n  private setNestedValue(obj: Record<string, any>, key: string, value: any): void {\r\n    const keys = key.split('.');\r\n    let current = obj;\r\n    \r\n    for (let i = 0; i < keys.length - 1; i++) {\r\n      const k = keys[i]!;\r\n      if (current[k] === undefined || typeof current[k] !== 'object') {\r\n        current[k] = {};\r\n      }\r\n      current = current[k];\r\n    }\r\n    \r\n    current[keys[keys.length - 1]!] = value;\r\n  }\r\n\r\n  private deleteNestedValue(obj: Record<string, any>, key: string): void {\r\n    const keys = key.split('.');\r\n    let current = obj;\r\n    \r\n    for (let i = 0; i < keys.length - 1; i++) {\r\n      const k = keys[i]!;\r\n      if (current[k] === undefined || typeof current[k] !== 'object') {\r\n        return;\r\n      }\r\n      current = current[k];\r\n    }\r\n    \r\n    delete current[keys[keys.length - 1]!];\r\n  }\r\n\r\n  private notifyWatchers(key: string, value: any): void {\r\n    const handlers = this.watchers.get(key);\r\n    if (handlers) {\r\n      for (const handler of handlers) {\r\n        try {\r\n          handler(value);\r\n        } catch (error) {\r\n          console.error(`Config watcher error for key \"${key}\":`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","import { EventBus } from '../events/index.js';\r\nimport { LifecycleOptions, LifecycleHook, AsyncHandler, ERROR, LIFECYCLE_STARTING, LIFECYCLE_STARTED, LIFECYCLE_STOPPING, LIFECYCLE_STOPPED, LIFECYCLE_STATE_CHANGED, LIFECYCLE_HOOK_EXECUTING, LIFECYCLE_HOOK_EXECUTED, LIFECYCLE_HOOK_ERROR } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\n\r\nexport enum LifecycleState {\r\n  CREATED = 'created',\r\n  STARTING = 'starting',\r\n  STARTED = 'started',\r\n  STOPPING = 'stopping',\r\n  STOPPED = 'stopped',\r\n  ERROR = 'error'\r\n}\r\n\r\nexport class LifecycleManager extends EventBus {\r\n  private state: LifecycleState = LifecycleState.CREATED;\r\n  private readonly startHooks: LifecycleHook[] = [];\r\n  private readonly stopHooks: LifecycleHook[] = [];\r\n  private readonly options: LifecycleOptions;\r\n  private startPromise?: Promise<void>;\r\n  private stopPromise?: Promise<void>;\r\n\r\n  constructor(options: LifecycleOptions = {}) {\r\n    super();\r\n    this.options = {\r\n      startTimeout: 30000,\r\n      stopTimeout: 10000,\r\n      gracefulShutdown: true,\r\n      ...options\r\n    };\r\n\r\n    if (this.options.gracefulShutdown) {\r\n      this.setupGracefulShutdown();\r\n    }\r\n  }\r\n\r\n  public get currentState(): LifecycleState {\r\n    return this.state;\r\n  }\r\n\r\n  public get isStarted(): boolean {\r\n    return this.state === LifecycleState.STARTED;\r\n  }\r\n\r\n  public get isStopped(): boolean {\r\n    return this.state === LifecycleState.STOPPED;\r\n  }\r\n\r\n  public get isStarting(): boolean {\r\n    return this.state === LifecycleState.STARTING;\r\n  }\r\n\r\n  public get isStopping(): boolean {\r\n    return this.state === LifecycleState.STOPPING;\r\n  }\r\n\r\n  public onStart(handler: AsyncHandler, options?: { name?: string; timeout?: number }): void {\r\n    if (typeof handler !== 'function') {\r\n      throw new SkerError(ErrorCodes.INITIALIZATION_FAILED, 'Start handler must be a function');\r\n    }\r\n\r\n    this.startHooks.push({\r\n      handler,\r\n      name: options?.name || undefined,\r\n      timeout: options?.timeout || this.options.startTimeout\r\n    });\r\n  }\r\n\r\n  public onStop(handler: AsyncHandler, options?: { name?: string; timeout?: number }): void {\r\n    if (typeof handler !== 'function') {\r\n      throw new SkerError(ErrorCodes.INITIALIZATION_FAILED, 'Stop handler must be a function');\r\n    }\r\n\r\n    this.stopHooks.unshift({\r\n      handler,\r\n      name: options?.name || undefined,\r\n      timeout: options?.timeout || this.options.stopTimeout\r\n    });\r\n  }\r\n\r\n  public async start(): Promise<void> {\r\n    if (this.state === LifecycleState.STARTED) {\r\n      return;\r\n    }\r\n\r\n    if (this.state === LifecycleState.STARTING) {\r\n      return this.startPromise;\r\n    }\r\n\r\n    if (this.state !== LifecycleState.CREATED && this.state !== LifecycleState.STOPPED) {\r\n      throw new SkerError(\r\n        ErrorCodes.START_FAILED,\r\n        `Cannot start from state: ${this.state}`\r\n      );\r\n    }\r\n\r\n    this.startPromise = this.doStart();\r\n    return this.startPromise;\r\n  }\r\n\r\n  public async stop(): Promise<void> {\r\n    if (this.state === LifecycleState.STOPPED) {\r\n      return;\r\n    }\r\n\r\n    if (this.state === LifecycleState.STOPPING) {\r\n      return this.stopPromise;\r\n    }\r\n\r\n    if (this.state !== LifecycleState.STARTED) {\r\n      throw new SkerError(\r\n        ErrorCodes.STOP_FAILED,\r\n        `Cannot stop from state: ${this.state}`\r\n      );\r\n    }\r\n\r\n    this.stopPromise = this.doStop();\r\n    return this.stopPromise;\r\n  }\r\n\r\n  public async restart(): Promise<void> {\r\n    if (this.isStarted) {\r\n      await this.stop();\r\n    }\r\n    await this.start();\r\n  }\r\n\r\n  public removeStartHook(name: string): boolean {\r\n    const index = this.startHooks.findIndex(hook => hook.name === name);\r\n    if (index >= 0) {\r\n      this.startHooks.splice(index, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public removeStopHook(name: string): boolean {\r\n    const index = this.stopHooks.findIndex(hook => hook.name === name);\r\n    if (index >= 0) {\r\n      this.stopHooks.splice(index, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private async doStart(): Promise<void> {\r\n    try {\r\n      this.setState(LifecycleState.STARTING);\r\n      this.emit(LIFECYCLE_STARTING, {});\r\n\r\n      for (const hook of this.startHooks) {\r\n        await this.executeHook(hook, 'start');\r\n      }\r\n\r\n      this.setState(LifecycleState.STARTED);\r\n      this.emit(LIFECYCLE_STARTED, {});\r\n    } catch (error) {\r\n      this.setState(LifecycleState.ERROR);\r\n      this.emit(ERROR, { error, event: LIFECYCLE_STARTING });\r\n      \r\n      throw new SkerError(\r\n        ErrorCodes.START_FAILED,\r\n        'Failed to start lifecycle',\r\n        { state: this.state },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private async doStop(): Promise<void> {\r\n    try {\r\n      this.setState(LifecycleState.STOPPING);\r\n      this.emit(LIFECYCLE_STOPPING, {});\r\n\r\n      for (const hook of this.stopHooks) {\r\n        await this.executeHook(hook, 'stop');\r\n      }\r\n\r\n      this.setState(LifecycleState.STOPPED);\r\n      this.emit(LIFECYCLE_STOPPED, {});\r\n    } catch (error) {\r\n      this.setState(LifecycleState.ERROR);\r\n      this.emit(ERROR, { error, event: LIFECYCLE_STOPPING });\r\n      \r\n      throw new SkerError(\r\n        ErrorCodes.STOP_FAILED,\r\n        'Failed to stop lifecycle',\r\n        { state: this.state },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private async executeHook(hook: LifecycleHook, phase: 'start' | 'stop'): Promise<void> {\r\n    const hookName = hook.name || `anonymous-${phase}-hook`;\r\n    const timeout = hook.timeout || (phase === 'start' ? this.options.startTimeout : this.options.stopTimeout);\r\n\r\n    try {\r\n      this.emit(LIFECYCLE_HOOK_EXECUTING, { name: hookName, phase });\r\n      \r\n      await Promise.race([\r\n        hook.handler(),\r\n        this.createTimeoutPromise(timeout!, hookName, phase)\r\n      ]);\r\n\r\n      this.emit(LIFECYCLE_HOOK_EXECUTED, { name: hookName, phase });\r\n    } catch (error) {\r\n      this.emit(LIFECYCLE_HOOK_ERROR, { name: hookName, phase, error });\r\n      throw new SkerError(\r\n        phase === 'start' ? ErrorCodes.START_FAILED : ErrorCodes.STOP_FAILED,\r\n        `${phase} hook \"${hookName}\" failed`,\r\n        { hookName, phase, timeout },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  private createTimeoutPromise(timeout: number, hookName: string, phase: string): Promise<never> {\r\n    return new Promise((_, reject) => {\r\n      setTimeout(() => {\r\n        reject(new SkerError(\r\n          phase === 'start' ? ErrorCodes.START_FAILED : ErrorCodes.STOP_FAILED,\r\n          `${phase} hook \"${hookName}\" timed out after ${timeout}ms`\r\n        ));\r\n      }, timeout);\r\n    });\r\n  }\r\n\r\n  private setState(newState: LifecycleState): void {\r\n    const oldState = this.state;\r\n    this.state = newState;\r\n    this.emit(LIFECYCLE_STATE_CHANGED, { oldState, newState });\r\n  }\r\n\r\n  private setupGracefulShutdown(): void {\r\n    const signals: NodeJS.Signals[] = ['SIGINT', 'SIGTERM'];\r\n    \r\n    const shutdown = async (signal: string) => {\r\n      console.log(`Received ${signal}. Starting graceful shutdown...`);\r\n      \r\n      try {\r\n        await this.stop();\r\n        console.log('Graceful shutdown completed');\r\n        process.exit(0);\r\n      } catch (error) {\r\n        console.error('Graceful shutdown failed:', error);\r\n        process.exit(1);\r\n      }\r\n    };\r\n\r\n    signals.forEach(signal => {\r\n      process.on(signal, () => shutdown(signal));\r\n    });\r\n\r\n    process.on('uncaughtException', async (error) => {\r\n      console.error('Uncaught exception:', error);\r\n      try {\r\n        await this.stop();\r\n      } catch (stopError) {\r\n        console.error('Failed to stop gracefully after uncaught exception:', stopError);\r\n      }\r\n      process.exit(1);\r\n    });\r\n\r\n    process.on('unhandledRejection', async (reason) => {\r\n      console.error('Unhandled rejection:', reason);\r\n      try {\r\n        await this.stop();\r\n      } catch (stopError) {\r\n        console.error('Failed to stop gracefully after unhandled rejection:', stopError);\r\n      }\r\n      process.exit(1);\r\n    });\r\n  }\r\n}","import { EventBus } from '../events/index.js';\r\nimport { Plugin, PluginConfig, PluginContext, PLUGIN_REGISTERED, PLUGIN_UNREGISTERED, PLUGIN_SKIPPED, PLUGIN_INITIALIZING, PLUGIN_INITIALIZED, PLUGIN_ERROR, PLUGIN_DESTROYING, PLUGIN_DESTROYED, PLUGIN_ENABLED, PLUGIN_DISABLED, PLUGIN_CONFIG_UPDATED } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\n\r\ninterface PluginInstance {\r\n  plugin: Plugin;\r\n  config: PluginConfig;\r\n  context: PluginContext;\r\n  initialized: boolean;\r\n  instance?: any;\r\n}\r\n\r\nexport class PluginManager extends EventBus {\r\n  private plugins: Map<string, PluginInstance> = new Map();\r\n  private readonly core: any;\r\n  private initializationOrder: string[] = [];\r\n\r\n  constructor(core: any) {\r\n    super();\r\n    this.core = core;\r\n  }\r\n\r\n  public register(name: string, plugin: Plugin, config: PluginConfig = { name }): void {\r\n    if (!name) {\r\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, 'Plugin name is required');\r\n    }\r\n\r\n    if (!plugin || typeof plugin.initialize !== 'function') {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        'Plugin must have an initialize method'\r\n      );\r\n    }\r\n\r\n    if (this.plugins.has(name)) {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Plugin \"${name}\" is already registered`\r\n      );\r\n    }\r\n\r\n    const context: PluginContext = {\r\n      core: this.core,\r\n      config: config.options || {},\r\n      logger: this.core?.getLogger?.(name)\r\n    };\r\n\r\n    this.plugins.set(name, {\r\n      plugin,\r\n      config,\r\n      context,\r\n      initialized: false\r\n    });\r\n\r\n    this.emit(PLUGIN_REGISTERED, { name, plugin, config });\r\n  }\r\n\r\n  public unregister(name: string): void {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance) {\r\n      return;\r\n    }\r\n\r\n    if (pluginInstance.initialized) {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Cannot unregister initialized plugin \"${name}\". Destroy it first.`\r\n      );\r\n    }\r\n\r\n    this.plugins.delete(name);\r\n    this.emit(PLUGIN_UNREGISTERED, { name });\r\n  }\r\n\r\n  public async initialize(name: string): Promise<void> {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance) {\r\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\r\n    }\r\n\r\n    if (pluginInstance.initialized) {\r\n      return;\r\n    }\r\n\r\n    if (pluginInstance.config.enabled === false) {\r\n      this.emit(PLUGIN_SKIPPED, { name, reason: 'disabled' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.emit(PLUGIN_INITIALIZING, { name });\r\n      \r\n      pluginInstance.instance = await pluginInstance.plugin.initialize(pluginInstance.context);\r\n      pluginInstance.initialized = true;\r\n      this.initializationOrder.push(name);\r\n\r\n      this.emit(PLUGIN_INITIALIZED, { name });\r\n    } catch (error) {\r\n      this.emit(PLUGIN_ERROR, { name, error, phase: 'initialize' });\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Failed to initialize plugin \"${name}\"`,\r\n        { name },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  public async initializeAll(): Promise<void> {\r\n    const plugins = Array.from(this.plugins.entries());\r\n    const errors: Array<{ name: string; error: Error }> = [];\r\n\r\n    for (const [name] of plugins) {\r\n      try {\r\n        await this.initialize(name);\r\n      } catch (error) {\r\n        errors.push({ name, error: error as Error });\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Failed to initialize ${errors.length} plugin(s)`,\r\n        { errors: errors.map(e => ({ name: e.name, message: e.error.message })) }\r\n      );\r\n    }\r\n  }\r\n\r\n  public async destroy(name: string): Promise<void> {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance || !pluginInstance.initialized) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.emit(PLUGIN_DESTROYING, { name });\r\n      \r\n      if (typeof pluginInstance.plugin.destroy === 'function') {\r\n        await pluginInstance.plugin.destroy();\r\n      }\r\n      \r\n      pluginInstance.initialized = false;\r\n      pluginInstance.instance = undefined;\r\n      \r\n      const index = this.initializationOrder.indexOf(name);\r\n      if (index >= 0) {\r\n        this.initializationOrder.splice(index, 1);\r\n      }\r\n\r\n      this.emit(PLUGIN_DESTROYED, { name });\r\n    } catch (error) {\r\n      this.emit(PLUGIN_ERROR, { name, error, phase: 'destroy' });\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Failed to destroy plugin \"${name}\"`,\r\n        { name },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  public async destroyAll(): Promise<void> {\r\n    const errors: Array<{ name: string; error: Error }> = [];\r\n    \r\n    const destroyOrder = [...this.initializationOrder].reverse();\r\n    \r\n    for (const name of destroyOrder) {\r\n      try {\r\n        await this.destroy(name);\r\n      } catch (error) {\r\n        errors.push({ name, error: error as Error });\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Failed to destroy ${errors.length} plugin(s)`,\r\n        { errors: errors.map(e => ({ name: e.name, message: e.error.message })) }\r\n      );\r\n    }\r\n  }\r\n\r\n  public get<T = any>(name: string): T | undefined {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance || !pluginInstance.initialized) {\r\n      return undefined;\r\n    }\r\n    return pluginInstance.instance as T;\r\n  }\r\n\r\n  public has(name: string): boolean {\r\n    return this.plugins.has(name);\r\n  }\r\n\r\n  public isInitialized(name: string): boolean {\r\n    const pluginInstance = this.plugins.get(name);\r\n    return pluginInstance?.initialized || false;\r\n  }\r\n\r\n  public getRegisteredPlugins(): string[] {\r\n    return Array.from(this.plugins.keys());\r\n  }\r\n\r\n  public getInitializedPlugins(): string[] {\r\n    return this.initializationOrder.slice();\r\n  }\r\n\r\n  public getPluginInfo(name: string): PluginConfig | undefined {\r\n    const pluginInstance = this.plugins.get(name);\r\n    return pluginInstance?.config;\r\n  }\r\n\r\n  public getAllPluginInfo(): Record<string, PluginConfig & { initialized: boolean }> {\r\n    const result: Record<string, PluginConfig & { initialized: boolean }> = {};\r\n    \r\n    for (const [name, instance] of this.plugins) {\r\n      result[name] = {\r\n        ...instance.config,\r\n        initialized: instance.initialized\r\n      };\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  public async enable(name: string): Promise<void> {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance) {\r\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\r\n    }\r\n\r\n    if (pluginInstance.config.enabled !== false) {\r\n      return;\r\n    }\r\n\r\n    pluginInstance.config.enabled = true;\r\n    \r\n    if (!pluginInstance.initialized) {\r\n      await this.initialize(name);\r\n    }\r\n\r\n    this.emit(PLUGIN_ENABLED, { name });\r\n  }\r\n\r\n  public async disable(name: string): Promise<void> {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance) {\r\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\r\n    }\r\n\r\n    if (pluginInstance.config.enabled === false) {\r\n      return;\r\n    }\r\n\r\n    if (pluginInstance.initialized) {\r\n      await this.destroy(name);\r\n    }\r\n\r\n    pluginInstance.config.enabled = false;\r\n    this.emit(PLUGIN_DISABLED, { name });\r\n  }\r\n\r\n  public updatePluginConfig(name: string, config: Record<string, any>): void {\r\n    const pluginInstance = this.plugins.get(name);\r\n    if (!pluginInstance) {\r\n      throw new SkerError(ErrorCodes.PLUGIN_ERROR, `Plugin \"${name}\" not found`);\r\n    }\r\n\r\n    const oldConfig = { ...pluginInstance.context.config };\r\n    pluginInstance.context.config = { ...pluginInstance.context.config, ...config };\r\n    pluginInstance.config.options = { ...pluginInstance.config.options, ...config };\r\n\r\n    this.emit(PLUGIN_CONFIG_UPDATED, { name, oldConfig, newConfig: pluginInstance.context.config });\r\n  }\r\n}","import { EventBus } from '../events/index.js';\r\nimport { MiddlewareHandler, MiddlewareContext, MIDDLEWARE_ADDED, MIDDLEWARE_REMOVED, MIDDLEWARE_ENABLED, MIDDLEWARE_DISABLED, MIDDLEWARES_CLEARED, MIDDLEWARE_EXECUTING, MIDDLEWARE_EXECUTED, MIDDLEWARE_ERROR, MIDDLEWARE_CHAIN_COMPLETED, MIDDLEWARE_CHAIN_FAILED, MIDDLEWARE_TIMEOUT, MIDDLEWARE_INSERTED } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\n\r\ninterface MiddlewareInfo {\r\n  handler: MiddlewareHandler;\r\n  name: string | undefined;\r\n  priority: number;\r\n  enabled: boolean;\r\n}\r\n\r\nexport class MiddlewareManager extends EventBus {\r\n  private middlewares: MiddlewareInfo[] = [];\r\n  private sorted = true;\r\n\r\n  public use(handler: MiddlewareHandler, options?: {\r\n    name?: string;\r\n    priority?: number;\r\n    enabled?: boolean;\r\n  }): void {\r\n    if (typeof handler !== 'function') {\r\n      throw new SkerError(\r\n        ErrorCodes.MIDDLEWARE_ERROR,\r\n        'Middleware handler must be a function'\r\n      );\r\n    }\r\n\r\n    const middleware: MiddlewareInfo = {\r\n      handler,\r\n      name: options?.name || undefined,\r\n      priority: options?.priority || 0,\r\n      enabled: options?.enabled !== false\r\n    };\r\n\r\n    this.middlewares.push(middleware);\r\n    this.sorted = false;\r\n\r\n    this.emit(MIDDLEWARE_ADDED, { middleware });\r\n  }\r\n\r\n  public remove(nameOrHandler: string | MiddlewareHandler): boolean {\r\n    const index = this.middlewares.findIndex(mw => \r\n      (typeof nameOrHandler === 'string' && mw.name === nameOrHandler) ||\r\n      (typeof nameOrHandler === 'function' && mw.handler === nameOrHandler)\r\n    );\r\n\r\n    if (index >= 0) {\r\n      const removed = this.middlewares.splice(index, 1)[0];\r\n      this.emit(MIDDLEWARE_REMOVED, { middleware: removed });\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public enable(name: string): boolean {\r\n    const middleware = this.middlewares.find(mw => mw.name === name);\r\n    if (middleware) {\r\n      middleware.enabled = true;\r\n      this.emit(MIDDLEWARE_ENABLED, { name });\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public disable(name: string): boolean {\r\n    const middleware = this.middlewares.find(mw => mw.name === name);\r\n    if (middleware) {\r\n      middleware.enabled = false;\r\n      this.emit(MIDDLEWARE_DISABLED, { name });\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public clear(): void {\r\n    const count = this.middlewares.length;\r\n    this.middlewares = [];\r\n    this.sorted = true;\r\n    this.emit(MIDDLEWARES_CLEARED, { count });\r\n  }\r\n\r\n  public async execute(context: MiddlewareContext): Promise<void> {\r\n    const enabledMiddlewares = this.getEnabledMiddlewares();\r\n    \r\n    if (enabledMiddlewares.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let currentIndex = 0;\r\n    const executedMiddlewares: string[] = [];\r\n\r\n    const next = async (): Promise<void> => {\r\n      if (currentIndex >= enabledMiddlewares.length) {\r\n        return;\r\n      }\r\n\r\n      const middleware = enabledMiddlewares[currentIndex++]!;\r\n      const middlewareName = middleware.name || `anonymous-${currentIndex}`;\r\n      \r\n      try {\r\n        this.emit(MIDDLEWARE_EXECUTING, { name: middlewareName, context });\r\n        executedMiddlewares.push(middlewareName);\r\n        \r\n        await middleware.handler(context, next);\r\n        \r\n        this.emit(MIDDLEWARE_EXECUTED, { name: middlewareName, context });\r\n      } catch (error) {\r\n        this.emit(MIDDLEWARE_ERROR, { name: middlewareName, error, context });\r\n        throw new SkerError(\r\n          ErrorCodes.MIDDLEWARE_ERROR,\r\n          `Middleware \"${middlewareName}\" failed`,\r\n          { middlewareName, executedMiddlewares },\r\n          error as Error\r\n        );\r\n      }\r\n    };\r\n\r\n    try {\r\n      await next();\r\n      this.emit(MIDDLEWARE_CHAIN_COMPLETED, { executedMiddlewares, context });\r\n    } catch (error) {\r\n      this.emit(MIDDLEWARE_CHAIN_FAILED, { error, executedMiddlewares, context });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async executeWithTimeout(\r\n    context: MiddlewareContext,\r\n    timeout: number\r\n  ): Promise<void> {\r\n    const timeoutPromise = new Promise<never>((_, reject) => {\r\n      setTimeout(() => {\r\n        reject(new SkerError(\r\n          ErrorCodes.MIDDLEWARE_ERROR,\r\n          `Middleware execution timed out after ${timeout}ms`,\r\n          { timeout, context }\r\n        ));\r\n      }, timeout);\r\n    });\r\n\r\n    try {\r\n      await Promise.race([\r\n        this.execute(context),\r\n        timeoutPromise\r\n      ]);\r\n    } catch (error) {\r\n      if (error instanceof SkerError && error.message.includes('timed out')) {\r\n        this.emit(MIDDLEWARE_TIMEOUT, { timeout, context });\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public getMiddlewares(): Array<{\r\n    name?: string;\r\n    priority: number;\r\n    enabled: boolean;\r\n  }> {\r\n    return this.middlewares.map(mw => ({\r\n      name: mw.name,\r\n      priority: mw.priority || 0,\r\n      enabled: mw.enabled !== false\r\n    }));\r\n  }\r\n\r\n  public getEnabledMiddlewares(): MiddlewareInfo[] {\r\n    if (!this.sorted) {\r\n      this.sortMiddlewares();\r\n    }\r\n\r\n    return this.middlewares.filter(mw => mw.enabled !== false);\r\n  }\r\n\r\n  public getMiddlewareCount(): number {\r\n    return this.middlewares.length;\r\n  }\r\n\r\n  public getEnabledMiddlewareCount(): number {\r\n    return this.middlewares.filter(mw => mw.enabled !== false).length;\r\n  }\r\n\r\n  public hasMiddleware(nameOrHandler: string | MiddlewareHandler): boolean {\r\n    return this.middlewares.some(mw => \r\n      (typeof nameOrHandler === 'string' && mw.name === nameOrHandler) ||\r\n      (typeof nameOrHandler === 'function' && mw.handler === nameOrHandler)\r\n    );\r\n  }\r\n\r\n  public insertBefore(\r\n    beforeName: string,\r\n    handler: MiddlewareHandler,\r\n    options?: {\r\n      name?: string;\r\n      priority?: number;\r\n      enabled?: boolean;\r\n    }\r\n  ): boolean {\r\n    const index = this.middlewares.findIndex(mw => mw.name === beforeName);\r\n    if (index < 0) {\r\n      return false;\r\n    }\r\n\r\n    const middleware: MiddlewareInfo = {\r\n      handler,\r\n      name: options?.name || undefined,\r\n      priority: options?.priority || 0,\r\n      enabled: options?.enabled !== false\r\n    };\r\n\r\n    this.middlewares.splice(index, 0, middleware);\r\n    this.sorted = false;\r\n\r\n    this.emit(MIDDLEWARE_INSERTED, { middleware, beforeName });\r\n    return true;\r\n  }\r\n\r\n  public insertAfter(\r\n    afterName: string,\r\n    handler: MiddlewareHandler,\r\n    options?: {\r\n      name?: string;\r\n      priority?: number;\r\n      enabled?: boolean;\r\n    }\r\n  ): boolean {\r\n    const index = this.middlewares.findIndex(mw => mw.name === afterName);\r\n    if (index < 0) {\r\n      return false;\r\n    }\r\n\r\n    const middleware: MiddlewareInfo = {\r\n      handler,\r\n      name: options?.name || undefined,\r\n      priority: options?.priority || 0,\r\n      enabled: options?.enabled !== false\r\n    };\r\n\r\n    this.middlewares.splice(index + 1, 0, middleware);\r\n    this.sorted = false;\r\n\r\n    this.emit(MIDDLEWARE_INSERTED, { middleware, afterName });\r\n    return true;\r\n  }\r\n\r\n  private sortMiddlewares(): void {\r\n    this.middlewares.sort((a, b) => {\r\n      const priorityA = a.priority || 0;\r\n      const priorityB = b.priority || 0;\r\n      return priorityB - priorityA;\r\n    });\r\n    this.sorted = true;\r\n  }\r\n}","import { CoreOptions, ERROR, LIFECYCLE_ERROR, MEMORY_THRESHOLD_EXCEEDED, MEMORY_USAGE, CORE_INITIALIZED, CORE_STARTING, CORE_STARTED, CORE_START_FAILED, CORE_STOPPING, CORE_STOPPED, CORE_STOP_FAILED, CORE_RESTARTING, CORE_RESTARTED, CORE_RESTART_FAILED, CORE_PLUGIN_ERROR, CORE_MIDDLEWARE_ERROR, CORE_CONFIG_CHANGE } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\nimport { EventBus } from '../events/index.js';\r\nimport { ConfigManager } from '../config/index.js';\r\nimport { LifecycleManager, LifecycleState } from '../lifecycle/index.js';\r\nimport { PluginManager } from '../plugins/index.js';\r\nimport { MiddlewareManager } from '../middleware/index.js';\r\n\r\nexport class SkerCore extends EventBus {\r\n  private readonly options: CoreOptions;\r\n  private readonly configManager: ConfigManager;\r\n  private readonly lifecycleManager: LifecycleManager;\r\n  private readonly pluginManager: PluginManager;\r\n  private readonly middlewareManager: MiddlewareManager;\r\n  private readonly startTime: number;\r\n\r\n  constructor(options: CoreOptions) {\r\n    super();\r\n\r\n    if (!options.serviceName) {\r\n      throw new SkerError(\r\n        ErrorCodes.INITIALIZATION_FAILED,\r\n        'Service name is required'\r\n      );\r\n    }\r\n\r\n    if (!options.version) {\r\n      throw new SkerError(\r\n        ErrorCodes.INITIALIZATION_FAILED,\r\n        'Service version is required'\r\n      );\r\n    }\r\n\r\n    this.options = {\r\n      environment: 'development',\r\n      plugins: [],\r\n      ...options\r\n    };\r\n\r\n    this.startTime = Date.now();\r\n\r\n    try {\r\n      this.configManager = new ConfigManager(this.options.config);\r\n      this.lifecycleManager = new LifecycleManager(this.options.lifecycle);\r\n      this.pluginManager = new PluginManager(this);\r\n      this.middlewareManager = new MiddlewareManager();\r\n\r\n      this.setupEventHandlers();\r\n      this.registerPlugins();\r\n      this.setupLifecycleHooks();\r\n\r\n      this.emit(CORE_INITIALIZED, {\r\n        serviceName: this.options.serviceName,\r\n        version: this.options.version,\r\n        environment: this.options.environment\r\n      });\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.INITIALIZATION_FAILED,\r\n        'Failed to initialize SkerCore',\r\n        { options: this.options },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  public get serviceName(): string {\r\n    return this.options.serviceName;\r\n  }\r\n\r\n  public get version(): string {\r\n    return this.options.version;\r\n  }\r\n\r\n  public get environment(): string {\r\n    return this.options.environment || 'development';\r\n  }\r\n\r\n  public get uptime(): number {\r\n    return Date.now() - this.startTime;\r\n  }\r\n\r\n  public get state(): LifecycleState {\r\n    return this.lifecycleManager.currentState;\r\n  }\r\n\r\n  public get isStarted(): boolean {\r\n    return this.lifecycleManager.isStarted;\r\n  }\r\n\r\n  public get isStopped(): boolean {\r\n    return this.lifecycleManager.isStopped;\r\n  }\r\n\r\n  public async start(): Promise<void> {\r\n    try {\r\n      this.emit(CORE_STARTING, {});\r\n      await this.lifecycleManager.start();\r\n      this.emit(CORE_STARTED, {\r\n        serviceName: this.serviceName,\r\n        version: this.version,\r\n        uptime: this.uptime\r\n      });\r\n    } catch (error) {\r\n      this.emit(CORE_START_FAILED, { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async stop(): Promise<void> {\r\n    try {\r\n      this.emit(CORE_STOPPING, {});\r\n      await this.lifecycleManager.stop();\r\n      this.emit(CORE_STOPPED, {\r\n        serviceName: this.serviceName,\r\n        uptime: this.uptime\r\n      });\r\n    } catch (error) {\r\n      this.emit(CORE_STOP_FAILED, { error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async restart(): Promise<void> {\r\n    try {\r\n      this.emit(CORE_RESTARTING, {});\r\n      await this.lifecycleManager.restart();\r\n      this.emit(CORE_RESTARTED, {});\r\n    } catch (error) {\r\n      this.emit(CORE_RESTART_FAILED, { error });\r\n      throw error;\r\n    }\r\n\r\n  }\r\n\r\n  public getConfig(): ConfigManager {\r\n    return this.configManager;\r\n  }\r\n\r\n  public getLifecycle(): LifecycleManager {\r\n    return this.lifecycleManager;\r\n  }\r\n\r\n  public getPlugins(): PluginManager {\r\n    return this.pluginManager;\r\n  }\r\n\r\n  public getMiddleware(): MiddlewareManager {\r\n    return this.middlewareManager;\r\n  }\r\n\r\n  public getPlugin<T = any>(name: string): T {\r\n    const plugin = this.pluginManager.get<T>(name);\r\n    if (!plugin) {\r\n      throw new SkerError(\r\n        ErrorCodes.PLUGIN_ERROR,\r\n        `Plugin \"${name}\" not found or not initialized`\r\n      );\r\n    }\r\n    return plugin;\r\n  }\r\n\r\n  public hasPlugin(name: string): boolean {\r\n    return this.pluginManager.isInitialized(name);\r\n  }\r\n\r\n  public getInfo(): {\r\n    serviceName: string;\r\n    version: string;\r\n    environment: string;\r\n    state: LifecycleState;\r\n    uptime: number;\r\n    plugins: string[];\r\n    config: Record<string, any>;\r\n  } {\r\n    return {\r\n      serviceName: this.serviceName,\r\n      version: this.version,\r\n      environment: this.environment,\r\n      state: this.state,\r\n      uptime: this.uptime,\r\n      plugins: this.pluginManager.getInitializedPlugins(),\r\n      config: this.configManager.getAll()\r\n    };\r\n  }\r\n\r\n  public enableMemoryMonitoring(options?: {\r\n    interval?: number;\r\n    threshold?: number;\r\n  }): void {\r\n    const interval = options?.interval || 30000;\r\n    const threshold = options?.threshold || 0.8;\r\n\r\n    setInterval(() => {\r\n      const memoryUsage = process.memoryUsage();\r\n      const totalMemory = memoryUsage.heapTotal;\r\n      const usedMemory = memoryUsage.heapUsed;\r\n      const usage = usedMemory / totalMemory;\r\n\r\n      this.emit(MEMORY_USAGE, {\r\n        memoryUsage,\r\n        usage,\r\n        threshold,\r\n      });\r\n\r\n      if (usage > threshold) {\r\n        this.emit(MEMORY_THRESHOLD_EXCEEDED, {\r\n          usage,\r\n          threshold,\r\n          memoryUsage\r\n        });\r\n      }\r\n    }, interval);\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    this.lifecycleManager.on(ERROR, (error) => {\r\n      this.emit(LIFECYCLE_ERROR, error);\r\n    });\r\n\r\n    this.pluginManager.on('pluginError', (data) => {\r\n      this.emit(CORE_PLUGIN_ERROR, data);\r\n    });\r\n\r\n    this.middlewareManager.on('middlewareError', (data) => {\r\n      this.emit(CORE_MIDDLEWARE_ERROR, data);\r\n    });\r\n\r\n    this.configManager.on('change', (data) => {\r\n      this.emit(CORE_CONFIG_CHANGE, data);\r\n    });\r\n\r\n    this.on('error', (error) => {\r\n      console.error('SkerCore error:', error);\r\n    });\r\n  }\r\n\r\n  private registerPlugins(): void {\r\n    if (!this.options.plugins?.length) {\r\n      return;\r\n    }\r\n\r\n    for (const pluginConfig of this.options.plugins) {\r\n      if (pluginConfig.enabled === false) {\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        if (pluginConfig.package) {\r\n          import(pluginConfig.package)\r\n            .then((pluginModule) => {\r\n              const plugin = pluginModule.default || pluginModule;\r\n              this.pluginManager.register(pluginConfig.name, plugin, pluginConfig);\r\n            })\r\n            .catch((error) => {\r\n              console.warn(`Failed to load plugin \"${pluginConfig.name}\":`, error);\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to register plugin \"${pluginConfig.name}\":`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setupLifecycleHooks(): void {\r\n    this.lifecycleManager.onStart(async () => {\r\n      await this.pluginManager.initializeAll();\r\n    });\r\n\r\n    this.lifecycleManager.onStop(async () => {\r\n      await this.pluginManager.destroyAll();\r\n    });\r\n  }\r\n}","import { AsyncLocalStorage } from 'async_hooks';\r\nimport { randomUUID } from 'crypto';\r\nimport { ContextData } from '../types/index.js';\r\nimport { SkerError, ErrorCodes } from '../errors/index.js';\r\n\r\nconst contextStorage = new AsyncLocalStorage<Context>();\r\n\r\nexport class Context {\r\n  private readonly data: Map<string, any>;\r\n  private readonly startTime: number;\r\n  private readonly parent: Context | undefined;\r\n\r\n  constructor(initialData: ContextData = {}, parent?: Context) {\r\n    this.data = new Map();\r\n    this.startTime = Date.now();\r\n    this.parent = parent;\r\n\r\n    this.set('requestId', initialData.requestId || randomUUID());\r\n    this.set('userId', initialData.userId);\r\n    this.set('traceId', initialData.traceId || randomUUID());\r\n\r\n    for (const [key, value] of Object.entries(initialData)) {\r\n      if (key !== 'requestId' && key !== 'userId' && key !== 'traceId') {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static current(): Context | undefined {\r\n    return contextStorage.getStore();\r\n  }\r\n\r\n  public static ensure(): Context {\r\n    const current = Context.current();\r\n    if (!current) {\r\n      throw new SkerError(\r\n        ErrorCodes.CONTEXT_ERROR,\r\n        'No active context found. Make sure to run code within a context.'\r\n      );\r\n    }\r\n    return current;\r\n  }\r\n\r\n  public static create(data: ContextData = {}): Context {\r\n    const parent = Context.current();\r\n    return new Context(data, parent);\r\n  }\r\n\r\n  public static fork(additionalData: ContextData = {}): Context {\r\n    const parent = Context.current();\r\n    if (!parent) {\r\n      return new Context(additionalData);\r\n    }\r\n\r\n    const forkedData: ContextData = {\r\n      ...parent.toObject(),\r\n      ...additionalData\r\n    };\r\n\r\n    return new Context(forkedData, parent);\r\n  }\r\n\r\n  public async run<T>(callback: () => T | Promise<T>): Promise<T> {\r\n    return contextStorage.run(this, callback);\r\n  }\r\n\r\n  public get<T = any>(key: string): T | undefined {\r\n    if (this.data.has(key)) {\r\n      return this.data.get(key);\r\n    }\r\n\r\n    if (this.parent) {\r\n      return this.parent.get<T>(key);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  public set<T = any>(key: string, value: T): void {\r\n    if (!key) {\r\n      throw new SkerError(ErrorCodes.CONTEXT_ERROR, 'Context key cannot be empty');\r\n    }\r\n    this.data.set(key, value);\r\n  }\r\n\r\n  public has(key: string): boolean {\r\n    return this.data.has(key) || (this.parent?.has(key) ?? false);\r\n  }\r\n\r\n  public delete(key: string): boolean {\r\n    return this.data.delete(key);\r\n  }\r\n\r\n  public get requestId(): string {\r\n    return this.get<string>('requestId')!;\r\n  }\r\n\r\n  public get userId(): string | undefined {\r\n    return this.get<string>('userId');\r\n  }\r\n\r\n  public get traceId(): string {\r\n    return this.get<string>('traceId')!;\r\n  }\r\n\r\n  public get elapsedTime(): number {\r\n    return Date.now() - this.startTime;\r\n  }\r\n\r\n  public keys(): string[] {\r\n    const keys = new Set<string>();\r\n\r\n    for (const key of this.data.keys()) {\r\n      keys.add(key);\r\n    }\r\n\r\n    if (this.parent) {\r\n      for (const key of this.parent.keys()) {\r\n        keys.add(key);\r\n      }\r\n    }\r\n\r\n    return Array.from(keys);\r\n  }\r\n\r\n  public values(): any[] {\r\n    return this.keys().map(key => this.get(key));\r\n  }\r\n\r\n  public entries(): Array<[string, any]> {\r\n    return this.keys().map(key => [key, this.get(key)]);\r\n  }\r\n\r\n  public toObject(): ContextData {\r\n    const result: ContextData = {};\r\n\r\n    for (const key of this.keys()) {\r\n      result[key] = this.get(key);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public serialize(): string {\r\n    return JSON.stringify(this.toObject());\r\n  }\r\n\r\n  public static deserialize(serialized: string): Context {\r\n    try {\r\n      const data = JSON.parse(serialized);\r\n      return new Context(data);\r\n    } catch (error) {\r\n      throw new SkerError(\r\n        ErrorCodes.CONTEXT_ERROR,\r\n        'Failed to deserialize context',\r\n        { serialized },\r\n        error as Error\r\n      );\r\n    }\r\n  }\r\n\r\n  public clone(): Context {\r\n    return new Context(this.toObject(), this.parent);\r\n  }\r\n\r\n  public child(additionalData: ContextData = {}): Context {\r\n    const childData: ContextData = {\r\n      ...this.toObject(),\r\n      ...additionalData\r\n    };\r\n\r\n    return new Context(childData, this);\r\n  }\r\n\r\n  public merge(other: Context): Context {\r\n    const mergedData: ContextData = {\r\n      ...this.toObject(),\r\n      ...other.toObject()\r\n    };\r\n\r\n    return new Context(mergedData);\r\n  }\r\n\r\n  public clear(): void {\r\n    this.data.clear();\r\n  }\r\n\r\n  public size(): number {\r\n    return new Set([...this.data.keys(), ...(this.parent?.keys() || [])]).size;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  public toString(): string {\r\n    return `Context(requestId=${this.requestId}, traceId=${this.traceId}, keys=[${this.keys().join(', ')}])`;\r\n  }\r\n\r\n  public inspect(): string {\r\n    return `Context {\r\n  requestId: ${this.requestId}\r\n  traceId: ${this.traceId}\r\n  userId: ${this.userId || 'undefined'}\r\n  elapsedTime: ${this.elapsedTime}ms\r\n  data: ${JSON.stringify(this.toObject(), null, 2)}\r\n}`;\r\n  }\r\n}\r\n\r\nexport async function withContext<T>(\r\n  data: ContextData,\r\n  callback: () => T | Promise<T>\r\n): Promise<T> {\r\n  const context = new Context(data);\r\n  return context.run(callback);\r\n}\r\n\r\nexport async function withCurrentContext<T>(\r\n  additionalData: ContextData,\r\n  callback: () => T | Promise<T>\r\n): Promise<T> {\r\n  const context = Context.fork(additionalData);\r\n  return context.run(callback);\r\n}\r\n\r\nexport function getCurrentContext(): Context | undefined {\r\n  return Context.current();\r\n}\r\n\r\nexport function ensureContext(): Context {\r\n  return Context.ensure();\r\n}"],"mappings":"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","names":["ErrorCodes","LifecycleState"]}