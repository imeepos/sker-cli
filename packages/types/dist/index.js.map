{"version":3,"sources":["../src/basic-types.ts","../src/collection-types.ts","../src/message-types.ts","../src/error-types.ts","../src/service-types.ts","../src/auth-types.ts","../src/validation.ts","../src/conversion.ts","../src/factories.ts","../src/index.ts"],"sourcesContent":["/**\n * 跨语言基础类型映射\n * Cross-language basic type mappings\n */\n\n/**\n * 布尔类型 - 映射到各语言的布尔类型\n * Boolean type - maps to boolean types in different languages\n * - JavaScript: boolean\n * - Go: bool\n * - Java: boolean\n * - Rust: bool\n * - C#: bool\n * - Python: bool\n */\nexport type SkerBoolean = boolean;\n\n/**\n * 整数类型 - 统一使用64位整数\n * Integer type - unified 64-bit integer\n * - JavaScript: number (IEEE 754 double precision)\n * - Go: int64\n * - Java: Long\n * - Rust: i64\n * - C#: long\n * - Python: int\n */\nexport type SkerInteger = number;\n\n/**\n * 浮点数类型 - 统一使用双精度浮点数\n * Float type - unified double precision floating point\n * - JavaScript: number\n * - Go: float64\n * - Java: Double\n * - Rust: f64\n * - C#: double\n * - Python: float\n */\nexport type SkerFloat = number;\n\n/**\n * 字符串类型 - UTF-8编码字符串\n * String type - UTF-8 encoded string\n * - JavaScript: string\n * - Go: string\n * - Java: String\n * - Rust: String\n * - C#: string\n * - Python: str\n */\nexport type SkerString = string;\n\n/**\n * 时间戳类型 - ISO8601格式时间戳\n * Timestamp type - ISO8601 formatted timestamp\n * - JavaScript: Date\n * - Go: time.Time\n * - Java: Instant\n * - Rust: DateTime<Utc>\n * - C#: DateTime\n * - Python: datetime\n */\nexport type SkerTimestamp = Date;\n\n/**\n * 高精度数值类型 - 用于货币计算等需要精确计算的场景\n * High precision decimal type - for monetary calculations and precise arithmetic\n * 在不同语言中以字符串形式传输，本地转换为对应的高精度数值类型\n * Transmitted as string across languages, converted to appropriate high-precision types locally\n * - JavaScript: string (can be converted to BigNumber/Decimal.js)\n * - Go: decimal.Decimal (shopspring/decimal)\n * - Java: BigDecimal\n * - Rust: rust_decimal::Decimal\n * - C#: decimal\n * - Python: decimal.Decimal\n */\nexport type SkerDecimal = string;\n\n/**\n * 类型品牌标记 - 用于创建名义类型\n * Type branding - for creating nominal types\n */\nexport type Brand<T, K> = T & { readonly __brand: K };\n\n/**\n * UUID类型 - 标准UUID字符串\n * UUID type - standard UUID string\n */\nexport type UUID = Brand<string, 'UUID'>;\n\n/**\n * 货币金额类型 - 使用高精度数值\n * Money amount type - using high precision decimal\n */\nexport type MoneyAmount = Brand<SkerDecimal, 'MoneyAmount'>;\n\n/**\n * URL类型 - 有效的URL字符串\n * URL type - valid URL string\n */\nexport type URL = Brand<string, 'URL'>;\n\n/**\n * Email类型 - 有效的邮箱地址字符串\n * Email type - valid email address string\n */\nexport type Email = Brand<string, 'Email'>;\n\n/**\n * 基础类型工具函数\n * Basic type utility functions\n */\nexport const BasicTypes = {\n  /**\n   * 创建UUID\n   * Create UUID\n   */\n  createUUID(): UUID {\n    return crypto.randomUUID() as UUID;\n  },\n\n  /**\n   * 验证UUID格式\n   * Validate UUID format\n   */\n  isValidUUID(value: string): value is UUID {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(value);\n  },\n\n  /**\n   * 创建货币金额\n   * Create money amount\n   */\n  createMoneyAmount(value: string | number): MoneyAmount {\n    return String(value) as MoneyAmount;\n  },\n\n  /**\n   * 验证货币金额格式\n   * Validate money amount format\n   */\n  isValidMoneyAmount(value: string): value is MoneyAmount {\n    const decimalRegex = /^-?\\d+(\\.\\d+)?$/;\n    return decimalRegex.test(value);\n  },\n\n  /**\n   * 验证URL格式\n   * Validate URL format\n   */\n  isValidURL(value: string): value is URL {\n    try {\n      new globalThis.URL(value);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n\n  /**\n   * 验证邮箱格式\n   * Validate email format\n   */\n  isValidEmail(value: string): value is Email {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(value);\n  },\n\n  /**\n   * 创建ISO8601时间戳\n   * Create ISO8601 timestamp\n   */\n  createTimestamp(date?: Date): SkerTimestamp {\n    return date || new Date();\n  },\n\n  /**\n   * 验证时间戳格式\n   * Validate timestamp format\n   */\n  isValidTimestamp(value: unknown): value is SkerTimestamp {\n    return value instanceof Date && !isNaN(value.getTime());\n  },\n\n  /**\n   * 将时间戳转换为ISO8601字符串\n   * Convert timestamp to ISO8601 string\n   */\n  timestampToISO8601(timestamp: SkerTimestamp): string {\n    return timestamp.toISOString();\n  },\n\n  /**\n   * 从ISO8601字符串创建时间戳\n   * Create timestamp from ISO8601 string\n   */\n  timestampFromISO8601(iso8601: string): SkerTimestamp {\n    return new Date(iso8601);\n  }\n};","/**\n * 跨语言集合类型映射\n * Cross-language collection type mappings\n */\n\n/**\n * 数组类型 - 有序集合\n * Array type - ordered collection\n * - JavaScript: Array<T>\n * - Go: []T\n * - Java: List<T>\n * - Rust: Vec<T>\n * - C#: List<T>\n * - Python: List[T]\n */\nexport type SkerArray<T> = T[];\n\n/**\n * 映射类型 - 键值对集合\n * Map type - key-value pair collection\n * - JavaScript: Map<K, V>\n * - Go: map[K]V\n * - Java: Map<K, V>\n * - Rust: HashMap<K, V>\n * - C#: Dictionary<K, V>\n * - Python: Dict[K, V]\n */\nexport type SkerMap<K, V> = Map<K, V>;\n\n/**\n * 集合类型 - 唯一值集合\n * Set type - unique value collection\n * - JavaScript: Set<T>\n * - Go: map[T]struct{}\n * - Java: Set<T>\n * - Rust: HashSet<T>\n * - C#: HashSet<T>\n * - Python: Set[T]\n */\nexport type SkerSet<T> = Set<T>;\n\n/**\n * 可选类型 - 可能为空的值\n * Optional type - value that might be null/undefined\n * - JavaScript: T | null | undefined\n * - Go: *T\n * - Java: Optional<T>\n * - Rust: Option<T>\n * - C#: T?\n * - Python: Optional[T]\n */\nexport type SkerOptional<T> = T | null | undefined;\n\n/**\n * 元组类型 - 固定长度和类型的数组\n * Tuple type - fixed-length array with specific types\n */\nexport type SkerTuple<T extends readonly unknown[]> = T;\n\n/**\n * 记录类型 - 键值对对象\n * Record type - key-value object\n */\nexport type SkerRecord<K extends string | number | symbol, V> = Record<K, V>;\n\n/**\n * 集合类型工具函数\n * Collection type utility functions\n */\nexport const CollectionTypes = {\n  /**\n   * 创建数组\n   * Create array\n   */\n  createArray<T>(items?: T[]): SkerArray<T> {\n    return items || [];\n  },\n\n  /**\n   * 验证数组\n   * Validate array\n   */\n  isArray<T>(value: unknown): value is SkerArray<T> {\n    return Array.isArray(value);\n  },\n\n  /**\n   * 数组转换为普通对象（用于序列化）\n   * Convert array to plain object (for serialization)\n   */\n  arrayToObject<T>(array: SkerArray<T>): Record<string, T> {\n    const obj: Record<string, T> = {};\n    array.forEach((item, index) => {\n      obj[index.toString()] = item;\n    });\n    return obj;\n  },\n\n  /**\n   * 从普通对象恢复数组\n   * Restore array from plain object\n   */\n  arrayFromObject<T>(obj: Record<string, T>): SkerArray<T> {\n    const keys = Object.keys(obj).map(Number).sort((a, b) => a - b);\n    return keys.map(key => obj[key.toString()]).filter((item): item is T => item !== undefined);\n  },\n\n  /**\n   * 创建映射\n   * Create map\n   */\n  createMap<K, V>(entries?: [K, V][]): SkerMap<K, V> {\n    return new Map(entries);\n  },\n\n  /**\n   * 验证映射\n   * Validate map\n   */\n  isMap<K, V>(value: unknown): value is SkerMap<K, V> {\n    return value instanceof Map;\n  },\n\n  /**\n   * 映射转换为普通对象（用于序列化）\n   * Convert map to plain object (for serialization)\n   */\n  mapToObject<K extends string, V>(map: SkerMap<K, V>): Record<K, V> {\n    const obj: Record<K, V> = {} as Record<K, V>;\n    map.forEach((value, key) => {\n      obj[key] = value;\n    });\n    return obj;\n  },\n\n  /**\n   * 从普通对象恢复映射\n   * Restore map from plain object\n   */\n  mapFromObject<K extends string, V>(obj: Record<K, V>): SkerMap<K, V> {\n    return new Map(Object.entries(obj) as [K, V][]);\n  },\n\n  /**\n   * 映射转换为数组（用于序列化复杂键类型）\n   * Convert map to array (for serializing complex key types)\n   */\n  mapToArray<K, V>(map: SkerMap<K, V>): Array<[K, V]> {\n    return Array.from(map.entries());\n  },\n\n  /**\n   * 从数组恢复映射\n   * Restore map from array\n   */\n  mapFromArray<K, V>(array: Array<[K, V]>): SkerMap<K, V> {\n    return new Map(array);\n  },\n\n  /**\n   * 创建集合\n   * Create set\n   */\n  createSet<T>(items?: T[]): SkerSet<T> {\n    return new Set(items);\n  },\n\n  /**\n   * 验证集合\n   * Validate set\n   */\n  isSet<T>(value: unknown): value is SkerSet<T> {\n    return value instanceof Set;\n  },\n\n  /**\n   * 集合转换为数组（用于序列化）\n   * Convert set to array (for serialization)\n   */\n  setToArray<T>(set: SkerSet<T>): SkerArray<T> {\n    return Array.from(set);\n  },\n\n  /**\n   * 从数组恢复集合\n   * Restore set from array\n   */\n  setFromArray<T>(array: SkerArray<T>): SkerSet<T> {\n    return new Set(array);\n  },\n\n  /**\n   * 验证可选值\n   * Validate optional value\n   */\n  isSome<T>(value: SkerOptional<T>): value is T {\n    return value !== null && value !== undefined;\n  },\n\n  /**\n   * 验证空值\n   * Validate null value\n   */\n  isNone<T>(value: SkerOptional<T>): value is null | undefined {\n    return value === null || value === undefined;\n  },\n\n  /**\n   * 获取可选值或默认值\n   * Get optional value or default\n   */\n  getOrDefault<T>(value: SkerOptional<T>, defaultValue: T): T {\n    return this.isSome(value) ? value : defaultValue;\n  },\n\n  /**\n   * 创建元组\n   * Create tuple\n   */\n  createTuple<T extends readonly unknown[]>(...items: T): SkerTuple<T> {\n    return items;\n  },\n\n  /**\n   * 验证元组\n   * Validate tuple\n   */\n  isTuple(value: unknown): value is SkerTuple<readonly unknown[]> {\n    return Array.isArray(value);\n  },\n\n  /**\n   * 创建记录\n   * Create record\n   */\n  createRecord<K extends string | number | symbol, V>(obj?: Record<K, V>): SkerRecord<K, V> {\n    return obj || {} as SkerRecord<K, V>;\n  },\n\n  /**\n   * 验证记录\n   * Validate record\n   */\n  isRecord<K extends string | number | symbol, V>(value: unknown): value is SkerRecord<K, V> {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n  },\n\n  /**\n   * 深度克隆集合\n   * Deep clone collection\n   */\n  deepClone<T>(value: T): T {\n    if (value === null || typeof value !== 'object') {\n      return value;\n    }\n\n    if (value instanceof Date) {\n      return new Date(value.getTime()) as T;\n    }\n\n    if (value instanceof Array) {\n      return value.map(item => this.deepClone(item)) as T;\n    }\n\n    if (value instanceof Set) {\n      return new Set(Array.from(value).map(item => this.deepClone(item))) as T;\n    }\n\n    if (value instanceof Map) {\n      return new Map(Array.from(value.entries()).map(([k, v]) => [this.deepClone(k), this.deepClone(v)])) as T;\n    }\n\n    if (typeof value === 'object') {\n      const cloned = {} as T;\n      for (const key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          (cloned as any)[key] = this.deepClone((value as any)[key]);\n        }\n      }\n      return cloned;\n    }\n\n    return value;\n  },\n\n  /**\n   * 检查集合是否为空\n   * Check if collection is empty\n   */\n  isEmpty(value: unknown): boolean {\n    if (value === null || value === undefined) {\n      return true;\n    }\n    \n    if (Array.isArray(value)) {\n      return value.length === 0;\n    }\n    \n    if (value instanceof Set || value instanceof Map) {\n      return value.size === 0;\n    }\n    \n    if (typeof value === 'object') {\n      return Object.keys(value).length === 0;\n    }\n    \n    if (typeof value === 'string') {\n      return value.length === 0;\n    }\n    \n    return false;\n  }\n};","/**\n * UDEF (Unified Data Exchange Format) 消息格式类型定义\n * UDEF message format type definitions\n */\n\nimport type { SkerString, SkerTimestamp, UUID } from './basic-types.js';\nimport type { SkerRecord, SkerArray } from './collection-types.js';\n\n/**\n * 内容类型枚举\n * Content type enumeration\n */\nexport enum ContentType {\n  JSON = 'application/json',\n  PROTOBUF = 'application/protobuf',\n  MESSAGEPACK = 'application/msgpack',\n  AVRO = 'application/avro',\n  XML = 'application/xml',\n  PLAIN_TEXT = 'text/plain',\n  BINARY = 'application/octet-stream'\n}\n\n/**\n * 消息类型枚举\n * Message type enumeration\n */\nexport enum MessageType {\n  REQUEST = 'request',\n  RESPONSE = 'response',\n  EVENT = 'event',\n  COMMAND = 'command',\n  NOTIFICATION = 'notification',\n  ERROR = 'error',\n  HEARTBEAT = 'heartbeat'\n}\n\n/**\n * 消息优先级枚举\n * Message priority enumeration\n */\nexport enum MessagePriority {\n  LOW = 1,\n  NORMAL = 5,\n  HIGH = 8,\n  CRITICAL = 10\n}\n\n/**\n * 服务信息接口\n * Service information interface\n */\nexport interface ServiceInfo {\n  service_name: SkerString;\n  service_version: SkerString;\n  service_id: SkerString;\n  instance_id?: SkerString;\n}\n\n/**\n * 消息头部接口\n * Message header interface\n */\nexport interface MessageHeader {\n  /** UUID格式消息ID */\n  message_id: UUID;\n  \n  /** 关联消息ID，用于请求响应匹配 */\n  correlation_id?: UUID;\n  \n  /** 创建时间戳 */\n  timestamp: SkerTimestamp;\n  \n  /** 发送方信息 */\n  source: ServiceInfo;\n  \n  /** 接收方信息 */\n  destination?: ServiceInfo;\n  \n  /** 内容类型 */\n  content_type: ContentType;\n  \n  /** 消息类型 */\n  message_type: MessageType;\n  \n  /** 消息版本 */\n  version?: SkerString;\n}\n\n/**\n * 消息元数据接口\n * Message metadata interface\n */\nexport interface MessageMetadata {\n  /** 分布式追踪ID */\n  trace_id?: SkerString;\n  \n  /** 跨度ID */\n  span_id?: SkerString;\n  \n  /** 父跨度ID */\n  parent_span_id?: SkerString;\n  \n  /** 消息优先级 */\n  priority?: MessagePriority;\n  \n  /** 生存时间（毫秒） */\n  ttl?: number;\n  \n  /** 重试次数 */\n  retry_count?: number;\n  \n  /** 最大重试次数 */\n  max_retries?: number;\n  \n  /** 延迟发送时间戳 */\n  delay_until?: SkerTimestamp;\n  \n  /** 消息标签 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 消息路由键 */\n  routing_key?: SkerString;\n  \n  /** 消息分区键 */\n  partition_key?: SkerString;\n  \n  /** 自定义属性 */\n  custom_properties?: SkerRecord<string, unknown>;\n}\n\n/**\n * 消息信封接口\n * Message envelope interface\n */\nexport interface MessageEnvelope {\n  header: MessageHeader;\n  metadata: MessageMetadata;\n}\n\n/**\n * 消息载荷接口\n * Message payload interface\n */\nexport interface MessagePayload {\n  /** 实际业务数据 */\n  data: unknown;\n  \n  /** 数据模式版本 */\n  schema_version: SkerString;\n  \n  /** 数据校验和 */\n  checksum?: SkerString;\n  \n  /** 数据大小（字节） */\n  size_bytes?: number;\n  \n  /** 数据编码方式 */\n  encoding?: SkerString;\n  \n  /** 数据压缩方式 */\n  compression?: SkerString;\n}\n\n/**\n * UDEF消息接口\n * UDEF message interface\n */\nexport interface UDEFMessage {\n  envelope: MessageEnvelope;\n  payload: MessagePayload;\n}\n\n/**\n * 类型化UDEF消息接口\n * Typed UDEF message interface\n */\nexport interface TypedUDEFMessage<TData = unknown> extends UDEFMessage {\n  payload: MessagePayload & {\n    data: TData;\n  };\n}\n\n/**\n * 请求消息接口\n * Request message interface\n */\nexport interface RequestMessage<TData = unknown> extends TypedUDEFMessage<TData> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.REQUEST;\n    };\n  };\n}\n\n/**\n * 响应消息接口\n * Response message interface\n */\nexport interface ResponseMessage<TData = unknown> extends TypedUDEFMessage<TData> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.RESPONSE;\n      correlation_id: UUID;\n    };\n  };\n}\n\n/**\n * 事件消息接口\n * Event message interface\n */\nexport interface EventMessage<TData = unknown> extends TypedUDEFMessage<TData> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.EVENT;\n    };\n  };\n}\n\n/**\n * 命令消息接口\n * Command message interface\n */\nexport interface CommandMessage<TData = unknown> extends TypedUDEFMessage<TData> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.COMMAND;\n    };\n  };\n}\n\n/**\n * 通知消息接口\n * Notification message interface\n */\nexport interface NotificationMessage<TData = unknown> extends TypedUDEFMessage<TData> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.NOTIFICATION;\n    };\n  };\n}\n\n/**\n * 心跳消息接口\n * Heartbeat message interface\n */\nexport interface HeartbeatMessage extends TypedUDEFMessage<{\n  status: 'alive' | 'healthy' | 'degraded';\n  timestamp: SkerTimestamp;\n  metrics?: SkerRecord<string, unknown>;\n}> {\n  envelope: MessageEnvelope & {\n    header: MessageHeader & {\n      message_type: MessageType.HEARTBEAT;\n    };\n  };\n}\n\n/**\n * 消息批处理接口\n * Message batch interface\n */\nexport interface MessageBatch {\n  batch_id: UUID;\n  messages: SkerArray<UDEFMessage>;\n  batch_size: number;\n  created_at: SkerTimestamp;\n  metadata?: MessageMetadata;\n}\n\n/**\n * 消息确认接口\n * Message acknowledgment interface\n */\nexport interface MessageAck {\n  message_id: UUID;\n  ack_type: 'positive' | 'negative' | 'reject';\n  timestamp: SkerTimestamp;\n  reason?: SkerString;\n  retry_after?: number;\n}\n\n/**\n * 消息统计接口\n * Message statistics interface\n */\nexport interface MessageStats {\n  total_messages: number;\n  success_count: number;\n  error_count: number;\n  average_processing_time_ms: number;\n  throughput_per_second: number;\n  last_message_timestamp: SkerTimestamp;\n}\n\n/**\n * 消息过滤器接口\n * Message filter interface\n */\nexport interface MessageFilter {\n  service_name?: SkerString;\n  message_type?: MessageType;\n  tags?: SkerArray<SkerString>;\n  priority?: MessagePriority;\n  timestamp_after?: SkerTimestamp;\n  timestamp_before?: SkerTimestamp;\n  custom_filter?: (message: UDEFMessage) => boolean;\n}\n\n/**\n * 消息路由规则接口\n * Message routing rule interface\n */\nexport interface MessageRoutingRule {\n  rule_id: UUID;\n  name: SkerString;\n  condition: MessageFilter;\n  destination: ServiceInfo;\n  transformation?: SkerString;\n  enabled: boolean;\n}\n\n/**\n * 消息转换接口\n * Message transformation interface\n */\nexport interface MessageTransformation {\n  from_format: ContentType;\n  to_format: ContentType;\n  schema_mapping?: SkerRecord<string, string>;\n  field_mappings?: SkerRecord<string, string>;\n  custom_transformer?: SkerString;\n}","/**\n * 标准错误处理类型定义\n * Standard error handling type definitions\n */\n\nimport type { SkerString, SkerTimestamp, UUID } from './basic-types.js';\nimport type { SkerArray, SkerRecord } from './collection-types.js';\n\n/**\n * 错误级别枚举\n * Error level enumeration\n */\nexport enum ErrorLevel {\n  /** 系统级错误 - 如网络错误、服务不可用等 */\n  SYSTEM = 'system',\n  \n  /** 业务逻辑错误 - 如验证失败、业务规则违反等 */\n  BUSINESS = 'business',\n  \n  /** 集成错误 - 如第三方服务错误、数据格式不匹配等 */\n  INTEGRATION = 'integration',\n  \n  /** 安全错误 - 如认证失败、权限不足等 */\n  SECURITY = 'security',\n  \n  /** 配置错误 - 如配置缺失、配置格式错误等 */\n  CONFIGURATION = 'configuration',\n  \n  /** 数据错误 - 如数据不一致、数据损坏等 */\n  DATA = 'data'\n}\n\n/**\n * 错误严重性枚举\n * Error severity enumeration\n */\nexport enum ErrorSeverity {\n  /** 低 - 不影响主要功能 */\n  LOW = 1,\n  \n  /** 中等 - 影响部分功能 */\n  MEDIUM = 2,\n  \n  /** 高 - 影响主要功能 */\n  HIGH = 3,\n  \n  /** 严重 - 导致服务不可用 */\n  CRITICAL = 4\n}\n\n/**\n * HTTP状态码枚举（常用）\n * HTTP status code enumeration (common ones)\n */\nexport enum HttpStatusCode {\n  // 2xx Success\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NO_CONTENT = 204,\n  \n  // 3xx Redirection\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  NOT_MODIFIED = 304,\n  \n  // 4xx Client Error\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  CONFLICT = 409,\n  UNPROCESSABLE_ENTITY = 422,\n  TOO_MANY_REQUESTS = 429,\n  \n  // 5xx Server Error\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504\n}\n\n/**\n * 标准错误码定义\n * Standard error code definitions\n */\nexport const ErrorCodes = {\n  // 系统级错误 (1xxxx)\n  SYSTEM: {\n    NETWORK_ERROR: '10001',\n    SERVICE_UNAVAILABLE: '10002',\n    TIMEOUT: '10003',\n    INTERNAL_ERROR: '10004',\n    RESOURCE_EXHAUSTED: '10005',\n    CIRCUIT_BREAKER_OPEN: '10006'\n  },\n  \n  // 业务逻辑错误 (2xxxx)\n  BUSINESS: {\n    VALIDATION_FAILED: '20001',\n    BUSINESS_RULE_VIOLATION: '20002',\n    DUPLICATE_RESOURCE: '20003',\n    RESOURCE_NOT_FOUND: '20004',\n    INVALID_OPERATION: '20005',\n    INSUFFICIENT_FUNDS: '20006',\n    QUOTA_EXCEEDED: '20007'\n  },\n  \n  // 集成错误 (3xxxx)\n  INTEGRATION: {\n    EXTERNAL_SERVICE_ERROR: '30001',\n    DATA_FORMAT_MISMATCH: '30002',\n    API_VERSION_INCOMPATIBLE: '30003',\n    SERIALIZATION_ERROR: '30004',\n    DESERIALIZATION_ERROR: '30005',\n    PROTOCOL_ERROR: '30006'\n  },\n  \n  // 安全错误 (4xxxx)\n  SECURITY: {\n    AUTHENTICATION_FAILED: '40001',\n    AUTHORIZATION_FAILED: '40002',\n    TOKEN_EXPIRED: '40003',\n    TOKEN_INVALID: '40004',\n    ACCESS_DENIED: '40005',\n    RATE_LIMIT_EXCEEDED: '40006',\n    SECURITY_VIOLATION: '40007'\n  },\n  \n  // 配置错误 (5xxxx)\n  CONFIGURATION: {\n    MISSING_CONFIGURATION: '50001',\n    INVALID_CONFIGURATION: '50002',\n    ENVIRONMENT_MISMATCH: '50003',\n    DEPENDENCY_MISSING: '50004'\n  },\n  \n  // 数据错误 (6xxxx)\n  DATA: {\n    DATA_CORRUPTION: '60001',\n    DATA_INCONSISTENCY: '60002',\n    SCHEMA_MISMATCH: '60003',\n    CONSTRAINT_VIOLATION: '60004',\n    DUPLICATE_KEY: '60005',\n    FOREIGN_KEY_VIOLATION: '60006'\n  }\n} as const;\n\n/**\n * 错误详情接口\n * Error detail interface\n */\nexport interface ErrorDetail {\n  /** 字段名（如果错误与特定字段相关） */\n  field?: SkerString;\n  \n  /** 具体错误码 */\n  error_code: SkerString;\n  \n  /** 错误描述 */\n  error_message: SkerString;\n  \n  /** 错误值（引起错误的具体值） */\n  error_value?: unknown;\n  \n  /** 期望值 */\n  expected_value?: unknown;\n  \n  /** 错误上下文 */\n  context?: SkerRecord<string, unknown>;\n}\n\n/**\n * 错误堆栈跟踪接口\n * Error stack trace interface\n */\nexport interface ErrorStackTrace {\n  /** 函数名 */\n  function_name: SkerString;\n  \n  /** 文件名 */\n  file_name: SkerString;\n  \n  /** 行号 */\n  line_number: number;\n  \n  /** 列号 */\n  column_number?: number;\n  \n  /** 源码片段 */\n  source_snippet?: SkerString;\n}\n\n/**\n * 错误响应接口\n * Error response interface\n */\nexport interface ErrorResponse {\n  /** 成功标识，错误时固定为false */\n  success: false;\n  \n  /** 错误信息 */\n  error: {\n    /** 错误码 */\n    code: SkerString;\n    \n    /** 错误消息 */\n    message: SkerString;\n    \n    /** 错误级别 */\n    level: ErrorLevel;\n    \n    /** 错误严重性 */\n    severity: ErrorSeverity;\n    \n    /** HTTP状态码 */\n    http_status?: HttpStatusCode;\n    \n    /** 错误详情列表 */\n    details?: SkerArray<ErrorDetail>;\n    \n    /** 错误发生时间 */\n    timestamp: SkerTimestamp;\n    \n    /** 追踪ID */\n    trace_id?: SkerString;\n    \n    /** 错误堆栈跟踪 */\n    stack_trace?: SkerArray<ErrorStackTrace>;\n    \n    /** 帮助链接 */\n    help_url?: SkerString;\n    \n    /** 错误原因（上游错误） */\n    cause?: ErrorResponse;\n    \n    /** 建议的解决方案 */\n    suggested_actions?: SkerArray<SkerString>;\n    \n    /** 是否可重试 */\n    retryable: boolean;\n    \n    /** 重试延迟（毫秒） */\n    retry_after_ms?: number;\n  };\n  \n  /** 元数据 */\n  metadata: {\n    /** 请求ID */\n    request_id?: UUID;\n    \n    /** API版本 */\n    api_version: SkerString;\n    \n    /** 处理时间（毫秒） */\n    processing_time_ms: number;\n    \n    /** 服务实例ID */\n    instance_id?: SkerString;\n    \n    /** 错误发生的服务名称 */\n    service_name?: SkerString;\n    \n    /** 错误发生的方法名称 */\n    method_name?: SkerString;\n    \n    /** 用户代理 */\n    user_agent?: SkerString;\n    \n    /** 客户端IP */\n    client_ip?: SkerString;\n    \n    /** 错误统计信息 */\n    error_stats?: {\n      /** 此错误今日发生次数 */\n      occurrence_count_today: number;\n      \n      /** 首次发生时间 */\n      first_occurrence: SkerTimestamp;\n      \n      /** 最后发生时间 */\n      last_occurrence: SkerTimestamp;\n    };\n  };\n}\n\n/**\n * 成功响应接口\n * Success response interface\n */\nexport interface SuccessResponse<TData = unknown> {\n  /** 成功标识，成功时固定为true */\n  success: true;\n  \n  /** 响应数据 */\n  data: TData;\n  \n  /** 元数据 */\n  metadata: {\n    /** 请求ID */\n    request_id?: UUID;\n    \n    /** API版本 */\n    api_version: SkerString;\n    \n    /** 处理时间（毫秒） */\n    processing_time_ms: number;\n    \n    /** 服务实例ID */\n    instance_id?: SkerString;\n    \n    /** 响应时间戳 */\n    timestamp: SkerTimestamp;\n    \n    /** 分页信息（如果适用） */\n    pagination?: {\n      page: number;\n      page_size: number;\n      total_count: number;\n      total_pages: number;\n      has_next: boolean;\n      has_previous: boolean;\n    };\n    \n    /** 数据版本（用于乐观锁） */\n    version?: SkerString;\n    \n    /** 缓存信息 */\n    cache_info?: {\n      cached: boolean;\n      cache_key?: SkerString;\n      cache_ttl_seconds?: number;\n      cache_timestamp?: SkerTimestamp;\n    };\n  };\n}\n\n/**\n * 服务结果联合类型\n * Service result union type\n */\nexport type ServiceResult<TData = unknown> = SuccessResponse<TData> | ErrorResponse;\n\n/**\n * 验证结果接口\n * Validation result interface\n */\nexport interface ValidationResult {\n  /** 是否验证通过 */\n  valid: boolean;\n  \n  /** 错误列表 */\n  errors: SkerArray<ErrorDetail>;\n  \n  /** 警告列表 */\n  warnings?: SkerArray<ErrorDetail>;\n}\n\n/**\n * 异常基类接口\n * Base exception interface\n */\nexport interface BaseException {\n  /** 异常名称 */\n  name: SkerString;\n  \n  /** 异常消息 */\n  message: SkerString;\n  \n  /** 错误码 */\n  code: SkerString;\n  \n  /** 错误级别 */\n  level: ErrorLevel;\n  \n  /** 错误严重性 */\n  severity: ErrorSeverity;\n  \n  /** 发生时间 */\n  timestamp: SkerTimestamp;\n  \n  /** 堆栈跟踪 */\n  stack?: SkerString;\n  \n  /** 内部错误 */\n  inner_error?: BaseException;\n  \n  /** 上下文数据 */\n  context?: SkerRecord<string, unknown>;\n}\n\n/**\n * 业务异常接口\n * Business exception interface\n */\nexport interface BusinessException extends BaseException {\n  level: ErrorLevel.BUSINESS;\n  \n  /** 业务规则ID */\n  business_rule_id?: SkerString;\n  \n  /** 违反的约束条件 */\n  violated_constraints?: SkerArray<SkerString>;\n}\n\n/**\n * 系统异常接口\n * System exception interface\n */\nexport interface SystemException extends BaseException {\n  level: ErrorLevel.SYSTEM;\n  \n  /** 系统组件 */\n  component?: SkerString;\n  \n  /** 系统资源 */\n  resource?: SkerString;\n  \n  /** 系统指标 */\n  metrics?: SkerRecord<string, number>;\n}\n\n/**\n * 安全异常接口\n * Security exception interface\n */\nexport interface SecurityException extends BaseException {\n  level: ErrorLevel.SECURITY;\n  \n  /** 安全策略ID */\n  security_policy_id?: SkerString;\n  \n  /** 尝试的操作 */\n  attempted_operation?: SkerString;\n  \n  /** 用户标识 */\n  user_identifier?: SkerString;\n  \n  /** IP地址 */\n  ip_address?: SkerString;\n}\n\n/**\n * 错误聚合接口\n * Error aggregation interface\n */\nexport interface ErrorAggregation {\n  /** 错误码 */\n  error_code: SkerString;\n  \n  /** 错误消息 */\n  error_message: SkerString;\n  \n  /** 发生次数 */\n  occurrence_count: number;\n  \n  /** 首次发生时间 */\n  first_occurrence: SkerTimestamp;\n  \n  /** 最后发生时间 */\n  last_occurrence: SkerTimestamp;\n  \n  /** 影响的用户数 */\n  affected_users?: number;\n  \n  /** 影响的请求数 */\n  affected_requests?: number;\n  \n  /** 平均响应时间（毫秒） */\n  average_response_time_ms?: number;\n}","/**\n * 服务相关类型定义\n * Service-related type definitions\n */\n\nimport type { SkerString, SkerTimestamp, UUID, URL } from './basic-types.js';\nimport type { SkerArray, SkerRecord, SkerMap } from './collection-types.js';\n\n/**\n * 协议类型枚举\n * Protocol type enumeration\n */\nexport enum Protocol {\n  UNKNOWN = 'unknown',\n  HTTP = 'http',\n  HTTPS = 'https',\n  GRPC = 'grpc',\n  GRPC_WEB = 'grpc-web',\n  WEBSOCKET = 'websocket',\n  WEBSOCKET_SECURE = 'wss',\n  TCP = 'tcp',\n  UDP = 'udp',\n  MQTT = 'mqtt',\n  AMQP = 'amqp',\n  KAFKA = 'kafka',\n  REDIS = 'redis'\n}\n\n/**\n * 健康状态枚举\n * Health status enumeration\n */\nexport enum HealthStatus {\n  /** 未知状态 */\n  UNKNOWN = 0,\n  \n  /** 健康状态 */\n  HEALTHY = 1,\n  \n  /** 不健康状态 */\n  UNHEALTHY = 2,\n  \n  /** 维护状态 */\n  MAINTENANCE = 3,\n  \n  /** 降级服务状态 */\n  DEGRADED = 4,\n  \n  /** 启动中状态 */\n  STARTING = 5,\n  \n  /** 关闭中状态 */\n  SHUTTING_DOWN = 6\n}\n\n/**\n * 负载均衡策略枚举\n * Load balance strategy enumeration\n */\nexport enum LoadBalanceStrategy {\n  /** 轮询 */\n  ROUND_ROBIN = 'round_robin',\n  \n  /** 随机 */\n  RANDOM = 'random',\n  \n  /** 最少连接 */\n  LEAST_CONNECTIONS = 'least_connections',\n  \n  /** 加权轮询 */\n  WEIGHTED_ROUND_ROBIN = 'weighted_round_robin',\n  \n  /** 加权随机 */\n  WEIGHTED_RANDOM = 'weighted_random',\n  \n  /** 最少响应时间 */\n  LEAST_RESPONSE_TIME = 'least_response_time',\n  \n  /** 一致性哈希 */\n  CONSISTENT_HASH = 'consistent_hash',\n  \n  /** IP哈希 */\n  IP_HASH = 'ip_hash'\n}\n\n/**\n * 服务状态枚举\n * Service state enumeration\n */\nexport enum ServiceState {\n  /** 初始化中 */\n  INITIALIZING = 'initializing',\n  \n  /** 运行中 */\n  RUNNING = 'running',\n  \n  /** 暂停 */\n  PAUSED = 'paused',\n  \n  /** 停止 */\n  STOPPED = 'stopped',\n  \n  /** 错误状态 */\n  ERROR = 'error',\n  \n  /** 重启中 */\n  RESTARTING = 'restarting'\n}\n\n/**\n * 网络信息接口\n * Network information interface\n */\nexport interface NetworkInfo {\n  /** 主机地址 */\n  host: SkerString;\n  \n  /** 端口号 */\n  port: number;\n  \n  /** 协议类型 */\n  protocol: Protocol;\n  \n  /** 基础路径 */\n  base_path?: SkerString;\n  \n  /** SSL/TLS配置 */\n  tls_config?: {\n    enabled: boolean;\n    cert_file?: SkerString;\n    key_file?: SkerString;\n    ca_file?: SkerString;\n    insecure_skip_verify?: boolean;\n  };\n  \n  /** 连接超时（毫秒） */\n  connect_timeout_ms?: number;\n  \n  /** 读取超时（毫秒） */\n  read_timeout_ms?: number;\n  \n  /** 写入超时（毫秒） */\n  write_timeout_ms?: number;\n  \n  /** 最大连接数 */\n  max_connections?: number;\n}\n\n/**\n * 服务健康检查配置接口\n * Service health check configuration interface\n */\nexport interface HealthCheckConfig {\n  /** 健康检查URL */\n  health_check_url?: URL;\n  \n  /** 检查间隔（秒） */\n  interval_seconds: number;\n  \n  /** 超时时间（秒） */\n  timeout_seconds: number;\n  \n  /** 健康阈值 */\n  healthy_threshold: number;\n  \n  /** 不健康阈值 */\n  unhealthy_threshold: number;\n  \n  /** 启用标识 */\n  enabled: boolean;\n  \n  /** 自定义健康检查方法 */\n  custom_check?: SkerString;\n}\n\n/**\n * 服务指标接口\n * Service metrics interface\n */\nexport interface ServiceMetrics {\n  /** CPU使用率（百分比） */\n  cpu_usage_percent?: number;\n  \n  /** 内存使用量（字节） */\n  memory_usage_bytes?: number;\n  \n  /** 内存使用率（百分比） */\n  memory_usage_percent?: number;\n  \n  /** 磁盘使用量（字节） */\n  disk_usage_bytes?: number;\n  \n  /** 网络输入字节数 */\n  network_in_bytes?: number;\n  \n  /** 网络输出字节数 */\n  network_out_bytes?: number;\n  \n  /** 活跃连接数 */\n  active_connections?: number;\n  \n  /** 平均响应时间（毫秒） */\n  average_response_time_ms?: number;\n  \n  /** 每秒请求数 */\n  requests_per_second?: number;\n  \n  /** 错误率（百分比） */\n  error_rate_percent?: number;\n  \n  /** 正常运行时间（秒） */\n  uptime_seconds?: number;\n  \n  /** 最后更新时间 */\n  last_updated: SkerTimestamp;\n  \n  /** 自定义指标 */\n  custom_metrics?: SkerRecord<string, number>;\n}\n\n/**\n * 服务信息接口\n * Service information interface\n */\nexport interface ServiceInfo {\n  /** 服务名称 */\n  service_name: SkerString;\n  \n  /** 服务版本 */\n  service_version: SkerString;\n  \n  /** 服务实例ID */\n  service_id: UUID;\n  \n  /** 实例ID（同一服务的不同实例） */\n  instance_id?: UUID;\n  \n  /** 网络信息 */\n  network_info: NetworkInfo;\n  \n  /** 健康状态 */\n  health_status: HealthStatus;\n  \n  /** 服务状态 */\n  service_state: ServiceState;\n  \n  /** 服务描述 */\n  description?: SkerString;\n  \n  /** 服务标签 */\n  tags: SkerArray<SkerString>;\n  \n  /** 服务能力列表 */\n  capabilities: SkerArray<SkerString>;\n  \n  /** 支持的API版本 */\n  supported_api_versions: SkerArray<SkerString>;\n  \n  /** 元数据 */\n  metadata: SkerRecord<string, unknown>;\n  \n  /** 注册时间 */\n  registered_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  last_updated: SkerTimestamp;\n  \n  /** 最后心跳时间 */\n  last_heartbeat?: SkerTimestamp;\n  \n  /** 健康检查配置 */\n  health_check?: HealthCheckConfig;\n  \n  /** 服务指标 */\n  metrics?: ServiceMetrics;\n  \n  /** 负载均衡权重 */\n  load_balance_weight?: number;\n  \n  /** 服务依赖 */\n  dependencies?: SkerArray<SkerString>;\n  \n  /** 服务端点列表 */\n  endpoints?: SkerArray<ServiceEndpoint>;\n}\n\n/**\n * 服务端点接口\n * Service endpoint interface\n */\nexport interface ServiceEndpoint {\n  /** 端点ID */\n  endpoint_id: UUID;\n  \n  /** 端点名称 */\n  name: SkerString;\n  \n  /** 端点路径 */\n  path: SkerString;\n  \n  /** HTTP方法 */\n  method?: SkerString;\n  \n  /** 端点描述 */\n  description?: SkerString;\n  \n  /** 输入模式 */\n  input_schema?: SkerString;\n  \n  /** 输出模式 */\n  output_schema?: SkerString;\n  \n  /** 是否已弃用 */\n  deprecated?: boolean;\n  \n  /** 版本信息 */\n  version?: SkerString;\n  \n  /** 标签 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 服务注册表接口\n * Service registry interface\n */\nexport interface ServiceRegistry {\n  /** 注册表ID */\n  registry_id: UUID;\n  \n  /** 注册表名称 */\n  name: SkerString;\n  \n  /** 服务列表 */\n  services: SkerMap<SkerString, SkerArray<ServiceInfo>>;\n  \n  /** 负载均衡策略 */\n  load_balance_strategy: LoadBalanceStrategy;\n  \n  /** 服务发现配置 */\n  discovery_config: {\n    /** 启用服务发现 */\n    enabled: boolean;\n    \n    /** 发现间隔（秒） */\n    discovery_interval_seconds: number;\n    \n    /** 缓存TTL（秒） */\n    cache_ttl_seconds: number;\n    \n    /** 故障转移启用 */\n    failover_enabled: boolean;\n    \n    /** 断路器配置 */\n    circuit_breaker?: {\n      failure_threshold: number;\n      recovery_timeout_seconds: number;\n      half_open_max_calls: number;\n    };\n  };\n  \n  /** 注册表元数据 */\n  metadata?: SkerRecord<string, unknown>;\n  \n  /** 创建时间 */\n  created_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  last_updated: SkerTimestamp;\n}\n\n/**\n * 服务发现查询接口\n * Service discovery query interface\n */\nexport interface ServiceDiscoveryQuery {\n  /** 服务名称 */\n  service_name?: SkerString;\n  \n  /** 服务版本 */\n  service_version?: SkerString;\n  \n  /** 标签过滤器 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 健康状态过滤器 */\n  health_status?: SkerArray<HealthStatus>;\n  \n  /** 能力过滤器 */\n  capabilities?: SkerArray<SkerString>;\n  \n  /** 元数据过滤器 */\n  metadata_filters?: SkerRecord<string, unknown>;\n  \n  /** 最大返回数量 */\n  max_results?: number;\n  \n  /** 排序方式 */\n  sort_by?: 'name' | 'version' | 'health' | 'load' | 'response_time';\n  \n  /** 排序方向 */\n  sort_order?: 'asc' | 'desc';\n}\n\n/**\n * 服务发现结果接口\n * Service discovery result interface\n */\nexport interface ServiceDiscoveryResult {\n  /** 查询ID */\n  query_id: UUID;\n  \n  /** 查询参数 */\n  query: ServiceDiscoveryQuery;\n  \n  /** 匹配的服务列表 */\n  services: SkerArray<ServiceInfo>;\n  \n  /** 总数量 */\n  total_count: number;\n  \n  /** 查询时间 */\n  query_time: SkerTimestamp;\n  \n  /** 查询耗时（毫秒） */\n  query_duration_ms: number;\n  \n  /** 是否来自缓存 */\n  from_cache: boolean;\n  \n  /** 缓存过期时间 */\n  cache_expires_at?: SkerTimestamp;\n}\n\n/**\n * 服务依赖关系接口\n * Service dependency interface\n */\nexport interface ServiceDependency {\n  /** 依赖ID */\n  dependency_id: UUID;\n  \n  /** 源服务 */\n  source_service: SkerString;\n  \n  /** 目标服务 */\n  target_service: SkerString;\n  \n  /** 依赖类型 */\n  dependency_type: 'required' | 'optional' | 'conditional';\n  \n  /** 依赖强度 */\n  strength: 'strong' | 'weak';\n  \n  /** 描述 */\n  description?: SkerString;\n  \n  /** 版本约束 */\n  version_constraint?: SkerString;\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n  \n  /** 创建时间 */\n  created_at: SkerTimestamp;\n}\n\n/**\n * 服务部署信息接口\n * Service deployment information interface\n */\nexport interface ServiceDeployment {\n  /** 部署ID */\n  deployment_id: UUID;\n  \n  /** 服务信息 */\n  service_info: ServiceInfo;\n  \n  /** 部署环境 */\n  environment: 'development' | 'testing' | 'staging' | 'production' | SkerString;\n  \n  /** 部署版本 */\n  deployment_version: SkerString;\n  \n  /** 镜像信息 */\n  image_info?: {\n    registry: SkerString;\n    repository: SkerString;\n    tag: SkerString;\n    digest?: SkerString;\n  };\n  \n  /** 配置信息 */\n  configuration: SkerRecord<string, unknown>;\n  \n  /** 资源限制 */\n  resource_limits?: {\n    cpu_cores?: number;\n    memory_mb?: number;\n    disk_gb?: number;\n    network_bandwidth_mbps?: number;\n  };\n  \n  /** 扩容配置 */\n  scaling_config?: {\n    min_instances: number;\n    max_instances: number;\n    target_cpu_utilization?: number;\n    target_memory_utilization?: number;\n    scale_up_threshold?: number;\n    scale_down_threshold?: number;\n  };\n  \n  /** 部署状态 */\n  deployment_status: 'deploying' | 'running' | 'failed' | 'rolling_back' | 'stopped';\n  \n  /** 部署时间 */\n  deployed_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  last_updated: SkerTimestamp;\n  \n  /** 部署日志 */\n  deployment_logs?: SkerArray<SkerString>;\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}","/**\n * 认证授权类型定义\n * Authentication and authorization type definitions\n */\n\nimport type { SkerString, SkerTimestamp, UUID, Email } from './basic-types.js';\nimport type { SkerArray, SkerRecord, SkerOptional } from './collection-types.js';\n\n/**\n * 认证方法枚举\n * Authentication method enumeration\n */\nexport enum AuthMethod {\n  /** API密钥认证 */\n  API_KEY = 'api_key',\n  \n  /** OAuth 2.0认证 */\n  OAUTH2 = 'oauth2',\n  \n  /** JWT令牌认证 */\n  JWT = 'jwt',\n  \n  /** 基础认证（用户名密码） */\n  BASIC = 'basic',\n  \n  /** 双向TLS认证 */\n  MTLS = 'mtls',\n  \n  /** SAML认证 */\n  SAML = 'saml',\n  \n  /** 单点登录 */\n  SSO = 'sso',\n  \n  /** 多因子认证 */\n  MFA = 'mfa',\n  \n  /** 生物特征认证 */\n  BIOMETRIC = 'biometric',\n  \n  /** 匿名访问 */\n  ANONYMOUS = 'anonymous'\n}\n\n/**\n * OAuth2授权类型枚举\n * OAuth2 grant type enumeration\n */\nexport enum OAuth2GrantType {\n  /** 授权码模式 */\n  AUTHORIZATION_CODE = 'authorization_code',\n  \n  /** 隐式授权模式 */\n  IMPLICIT = 'implicit',\n  \n  /** 客户端凭据模式 */\n  CLIENT_CREDENTIALS = 'client_credentials',\n  \n  /** 密码模式 */\n  PASSWORD = 'password',\n  \n  /** 刷新令牌模式 */\n  REFRESH_TOKEN = 'refresh_token',\n  \n  /** 设备授权模式 */\n  DEVICE_CODE = 'device_code'\n}\n\n/**\n * 令牌类型枚举\n * Token type enumeration\n */\nexport enum TokenType {\n  /** 访问令牌 */\n  ACCESS_TOKEN = 'access_token',\n  \n  /** 刷新令牌 */\n  REFRESH_TOKEN = 'refresh_token',\n  \n  /** ID令牌 */\n  ID_TOKEN = 'id_token',\n  \n  /** API密钥 */\n  API_KEY = 'api_key',\n  \n  /** 会话令牌 */\n  SESSION_TOKEN = 'session_token'\n}\n\n/**\n * 用户状态枚举\n * User status enumeration\n */\nexport enum UserStatus {\n  /** 活跃 */\n  ACTIVE = 'active',\n  \n  /** 非活跃 */\n  INACTIVE = 'inactive',\n  \n  /** 暂停 */\n  SUSPENDED = 'suspended',\n  \n  /** 锁定 */\n  LOCKED = 'locked',\n  \n  /** 待验证 */\n  PENDING_VERIFICATION = 'pending_verification',\n  \n  /** 已删除 */\n  DELETED = 'deleted'\n}\n\n/**\n * 权限操作枚举\n * Permission action enumeration\n */\nexport enum PermissionAction {\n  /** 创建 */\n  CREATE = 'create',\n  \n  /** 读取 */\n  READ = 'read',\n  \n  /** 更新 */\n  UPDATE = 'update',\n  \n  /** 删除 */\n  DELETE = 'delete',\n  \n  /** 执行 */\n  EXECUTE = 'execute',\n  \n  /** 管理 */\n  MANAGE = 'manage',\n  \n  /** 所有权限 */\n  ALL = '*'\n}\n\n/**\n * 权限效果枚举\n * Permission effect enumeration\n */\nexport enum PermissionEffect {\n  /** 允许 */\n  ALLOW = 'allow',\n  \n  /** 拒绝 */\n  DENY = 'deny'\n}\n\n/**\n * 基础认证信息接口\n * Basic authentication information interface\n */\nexport interface AuthenticationInfo {\n  /** 认证方法 */\n  method: AuthMethod;\n  \n  /** 认证凭据 */\n  credentials: SkerRecord<string, unknown>;\n  \n  /** 认证时间 */\n  authenticated_at: SkerTimestamp;\n  \n  /** 过期时间 */\n  expires_at?: SkerTimestamp;\n  \n  /** 认证来源 */\n  auth_source?: SkerString;\n  \n  /** 会话ID */\n  session_id?: UUID;\n  \n  /** 客户端信息 */\n  client_info?: {\n    ip_address: SkerString;\n    user_agent: SkerString;\n    device_id?: SkerString;\n    platform?: SkerString;\n  };\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 授权令牌接口\n * Authorization token interface\n */\nexport interface AuthorizationToken {\n  /** 令牌值 */\n  token: SkerString;\n  \n  /** 令牌类型 */\n  token_type: TokenType;\n  \n  /** 颁发时间 */\n  issued_at: SkerTimestamp;\n  \n  /** 过期时间 */\n  expires_at: SkerTimestamp;\n  \n  /** 不早于时间 */\n  not_before?: SkerTimestamp;\n  \n  /** 颁发者 */\n  issuer: SkerString;\n  \n  /** 受众 */\n  audience?: SkerArray<SkerString>;\n  \n  /** 主体（用户ID） */\n  subject: SkerString;\n  \n  /** 作用域 */\n  scopes?: SkerArray<SkerString>;\n  \n  /** 自定义声明 */\n  claims?: SkerRecord<string, unknown>;\n  \n  /** 令牌指纹 */\n  fingerprint?: SkerString;\n}\n\n/**\n * JWT令牌接口\n * JWT token interface\n */\nexport interface JWTToken extends AuthorizationToken {\n  token_type: TokenType.ACCESS_TOKEN | TokenType.ID_TOKEN;\n  \n  /** JWT头部 */\n  header: {\n    /** 算法 */\n    alg: SkerString;\n    \n    /** 类型 */\n    typ: 'JWT';\n    \n    /** 密钥ID */\n    kid?: SkerString;\n    \n    /** 内容类型 */\n    cty?: SkerString;\n  };\n  \n  /** JWT载荷 */\n  payload: {\n    /** 颁发者 */\n    iss: SkerString;\n    \n    /** 主体 */\n    sub: SkerString;\n    \n    /** 受众 */\n    aud: SkerString | SkerArray<SkerString>;\n    \n    /** 过期时间 */\n    exp: number;\n    \n    /** 不早于时间 */\n    nbf?: number;\n    \n    /** 颁发时间 */\n    iat: number;\n    \n    /** JWT ID */\n    jti: SkerString;\n    \n    /** 用户角色 */\n    roles?: SkerArray<SkerString>;\n    \n    /** 用户权限 */\n    permissions?: SkerArray<SkerString>;\n    \n    /** 租户ID */\n    tenant_id?: SkerString;\n    \n    /** 自定义声明 */\n    [key: string]: unknown;\n  };\n  \n  /** JWT签名 */\n  signature: SkerString;\n}\n\n/**\n * API密钥接口\n * API key interface\n */\nexport interface APIKey extends AuthorizationToken {\n  token_type: TokenType.API_KEY;\n  \n  /** 密钥名称 */\n  key_name: SkerString;\n  \n  /** 密钥描述 */\n  description?: SkerString;\n  \n  /** 密钥前缀 */\n  key_prefix?: SkerString;\n  \n  /** 是否启用 */\n  enabled: boolean;\n  \n  /** 使用次数限制 */\n  usage_limit?: number;\n  \n  /** 已使用次数 */\n  usage_count?: number;\n  \n  /** 最后使用时间 */\n  last_used_at?: SkerTimestamp;\n  \n  /** IP白名单 */\n  allowed_ips?: SkerArray<SkerString>;\n  \n  /** 引用站点白名单 */\n  allowed_referrers?: SkerArray<SkerString>;\n  \n  /** 限流配置 */\n  rate_limit?: {\n    requests_per_minute: number;\n    requests_per_hour: number;\n    requests_per_day: number;\n  };\n}\n\n/**\n * OAuth2令牌接口\n * OAuth2 token interface\n */\nexport interface OAuth2Token extends AuthorizationToken {\n  token_type: TokenType.ACCESS_TOKEN;\n  \n  /** 刷新令牌 */\n  refresh_token?: SkerString;\n  \n  /** 授权类型 */\n  grant_type: OAuth2GrantType;\n  \n  /** 客户端ID */\n  client_id: SkerString;\n  \n  /** 重定向URI */\n  redirect_uri?: SkerString;\n  \n  /** 授权码 */\n  authorization_code?: SkerString;\n  \n  /** 状态参数 */\n  state?: SkerString;\n  \n  /** PKCE码验证器 */\n  code_verifier?: SkerString;\n  \n  /** PKCE码挑战 */\n  code_challenge?: SkerString;\n  \n  /** PKCE码挑战方法 */\n  code_challenge_method?: 'plain' | 'S256';\n}\n\n/**\n * 权限接口\n * Permission interface\n */\nexport interface Permission {\n  /** 权限ID */\n  permission_id: UUID;\n  \n  /** 权限名称 */\n  name: SkerString;\n  \n  /** 资源类型 */\n  resource_type: SkerString;\n  \n  /** 资源ID */\n  resource_id?: SkerString;\n  \n  /** 操作 */\n  action: PermissionAction;\n  \n  /** 权限效果 */\n  effect: PermissionEffect;\n  \n  /** 条件表达式 */\n  conditions?: SkerRecord<string, unknown>;\n  \n  /** 权限描述 */\n  description?: SkerString;\n  \n  /** 权限标签 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 是否启用 */\n  enabled: boolean;\n  \n  /** 创建时间 */\n  created_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  updated_at: SkerTimestamp;\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 角色接口\n * Role interface\n */\nexport interface Role {\n  /** 角色ID */\n  role_id: UUID;\n  \n  /** 角色名称 */\n  role_name: SkerString;\n  \n  /** 角色显示名称 */\n  display_name?: SkerString;\n  \n  /** 角色描述 */\n  description?: SkerString;\n  \n  /** 权限列表 */\n  permissions: SkerArray<Permission>;\n  \n  /** 父角色ID */\n  parent_role_id?: UUID;\n  \n  /** 子角色ID列表 */\n  child_role_ids?: SkerArray<UUID>;\n  \n  /** 角色优先级 */\n  priority?: number;\n  \n  /** 是否内置角色 */\n  is_built_in: boolean;\n  \n  /** 是否启用 */\n  enabled: boolean;\n  \n  /** 角色标签 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 创建时间 */\n  created_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  updated_at: SkerTimestamp;\n  \n  /** 元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 用户主体接口\n * User principal interface\n */\nexport interface UserPrincipal {\n  /** 用户ID */\n  user_id: UUID;\n  \n  /** 用户名 */\n  username: SkerString;\n  \n  /** 显示名称 */\n  display_name?: SkerString;\n  \n  /** 邮箱地址 */\n  email?: Email;\n  \n  /** 手机号码 */\n  phone_number?: SkerString;\n  \n  /** 用户状态 */\n  status: UserStatus;\n  \n  /** 角色列表 */\n  roles: SkerArray<Role>;\n  \n  /** 权限列表 */\n  permissions: SkerArray<Permission>;\n  \n  /** 用户组列表 */\n  groups?: SkerArray<SkerString>;\n  \n  /** 租户ID */\n  tenant_id?: UUID;\n  \n  /** 部门ID */\n  department_id?: UUID;\n  \n  /** 最后登录时间 */\n  last_login_at?: SkerTimestamp;\n  \n  /** 密码最后修改时间 */\n  password_changed_at?: SkerTimestamp;\n  \n  /** 账户创建时间 */\n  created_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  updated_at: SkerTimestamp;\n  \n  /** 用户偏好设置 */\n  preferences?: SkerRecord<string, unknown>;\n  \n  /** 用户配置文件 */\n  profile?: {\n    first_name?: SkerString;\n    last_name?: SkerString;\n    avatar_url?: SkerString;\n    timezone?: SkerString;\n    locale?: SkerString;\n    biography?: SkerString;\n  };\n  \n  /** 安全设置 */\n  security_settings?: {\n    mfa_enabled: boolean;\n    mfa_methods?: SkerArray<SkerString>;\n    password_expiry_date?: SkerTimestamp;\n    login_attempts: number;\n    locked_until?: SkerTimestamp;\n    require_password_change: boolean;\n  };\n  \n  /** 用户元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 认证上下文接口\n * Authentication context interface\n */\nexport interface AuthenticationContext {\n  /** 用户主体 */\n  user: SkerOptional<UserPrincipal>;\n  \n  /** 认证信息 */\n  auth_info: AuthenticationInfo;\n  \n  /** 当前令牌 */\n  token?: AuthorizationToken;\n  \n  /** 会话ID */\n  session_id?: UUID;\n  \n  /** 认证是否有效 */\n  is_authenticated: boolean;\n  \n  /** 是否为匿名用户 */\n  is_anonymous: boolean;\n  \n  /** 权限列表 */\n  permissions: SkerArray<SkerString>;\n  \n  /** 角色列表 */\n  roles: SkerArray<SkerString>;\n  \n  /** 作用域列表 */\n  scopes: SkerArray<SkerString>;\n  \n  /** 租户ID */\n  tenant_id?: UUID;\n  \n  /** 客户端信息 */\n  client_info?: {\n    client_id?: SkerString;\n    ip_address?: SkerString;\n    user_agent?: SkerString;\n    device_id?: SkerString;\n  };\n  \n  /** 认证上下文元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 授权策略接口\n * Authorization policy interface\n */\nexport interface AuthorizationPolicy {\n  /** 策略ID */\n  policy_id: UUID;\n  \n  /** 策略名称 */\n  name: SkerString;\n  \n  /** 策略版本 */\n  version: SkerString;\n  \n  /** 策略描述 */\n  description?: SkerString;\n  \n  /** 策略规则 */\n  rules: SkerArray<{\n    rule_id: UUID;\n    name: SkerString;\n    condition: SkerString;\n    effect: PermissionEffect;\n    priority: number;\n    enabled: boolean;\n  }>;\n  \n  /** 是否启用 */\n  enabled: boolean;\n  \n  /** 策略标签 */\n  tags?: SkerArray<SkerString>;\n  \n  /** 创建时间 */\n  created_at: SkerTimestamp;\n  \n  /** 最后更新时间 */\n  updated_at: SkerTimestamp;\n  \n  /** 策略元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}\n\n/**\n * 授权请求接口\n * Authorization request interface\n */\nexport interface AuthorizationRequest {\n  /** 请求ID */\n  request_id: UUID;\n  \n  /** 用户主体 */\n  principal: UserPrincipal;\n  \n  /** 请求的资源 */\n  resource: SkerString;\n  \n  /** 请求的操作 */\n  action: PermissionAction;\n  \n  /** 请求上下文 */\n  context?: SkerRecord<string, unknown>;\n  \n  /** 请求时间 */\n  requested_at: SkerTimestamp;\n  \n  /** 请求来源 */\n  source?: {\n    ip_address?: SkerString;\n    user_agent?: SkerString;\n    service_id?: SkerString;\n  };\n}\n\n/**\n * 授权结果接口\n * Authorization result interface\n */\nexport interface AuthorizationResult {\n  /** 请求ID */\n  request_id: UUID;\n  \n  /** 授权是否通过 */\n  authorized: boolean;\n  \n  /** 决策原因 */\n  reason?: SkerString;\n  \n  /** 匹配的策略ID */\n  matched_policy_id?: UUID;\n  \n  /** 匹配的规则ID */\n  matched_rule_id?: UUID;\n  \n  /** 权限效果 */\n  effect: PermissionEffect;\n  \n  /** 决策时间 */\n  decision_time: SkerTimestamp;\n  \n  /** 决策耗时（毫秒） */\n  decision_duration_ms: number;\n  \n  /** 建议操作 */\n  suggested_actions?: SkerArray<SkerString>;\n  \n  /** 决策元数据 */\n  metadata?: SkerRecord<string, unknown>;\n}","/**\n * 类型验证工具函数（简化版）\n * Type validation utility functions (simplified version)\n */\n\nimport { BasicTypes } from './basic-types.js';\nimport type { UDEFMessage } from './message-types.js';\nimport type { ServiceInfo as ServiceInfoType } from './service-types.js';\nimport type { ValidationResult, ErrorDetail } from './error-types.js';\n\n/**\n * 验证器接口\n * Validator interface\n */\nexport interface Validator<T> {\n  validate(value: unknown): ValidationResult & { data?: T };\n}\n\n/**\n * 字段验证规则接口\n * Field validation rule interface\n */\nexport interface FieldValidationRule {\n  field: string;\n  required?: boolean;\n  type?: string;\n  validator?: (value: unknown) => boolean;\n}\n\n/**\n * 模式验证规则接口\n * Schema validation rule interface\n */\nexport interface SchemaValidationRule {\n  type: 'object' | 'array' | 'string' | 'number' | 'boolean' | 'null';\n  required?: string[];\n}\n\n/**\n * 基础类型验证器\n * Basic type validators\n */\nexport const BasicValidators = {\n  /**\n   * 验证布尔类型\n   * Validate boolean type\n   */\n  boolean(value: unknown): ValidationResult & { data?: boolean } {\n    if (typeof value === 'boolean') {\n      return { valid: true, errors: [], data: value };\n    }\n    return {\n      valid: false,\n      errors: [{\n        error_code: 'TYPE_MISMATCH',\n        error_message: 'Expected boolean type',\n        error_value: value\n      }]\n    };\n  },\n\n  /**\n   * 验证字符串类型\n   * Validate string type\n   */\n  string(value: unknown): ValidationResult & { data?: string } {\n    if (typeof value === 'string') {\n      return { valid: true, errors: [], data: value };\n    }\n    return {\n      valid: false,\n      errors: [{\n        error_code: 'TYPE_MISMATCH',\n        error_message: 'Expected string type',\n        error_value: value\n      }]\n    };\n  }\n};\n\n/**\n * 集合类型验证器\n * Collection type validators\n */\nexport const CollectionValidators = {\n  /**\n   * 验证数组类型\n   * Validate array type\n   */\n  array(value: unknown): ValidationResult {\n    if (Array.isArray(value)) {\n      return { valid: true, errors: [] };\n    }\n    return {\n      valid: false,\n      errors: [{\n        error_code: 'TYPE_MISMATCH',\n        error_message: 'Expected array type',\n        error_value: value\n      }]\n    };\n  }\n};\n\n/**\n * 消息类型验证器\n * Message type validators\n */\nexport const MessageValidators = {\n  /**\n   * 验证UDEF消息\n   * Validate UDEF message\n   */\n  udefMessage(value: unknown): ValidationResult {\n    if (!value || typeof value !== 'object') {\n      return {\n        valid: false,\n        errors: [{\n          error_code: 'INVALID_UDEF_MESSAGE',\n          error_message: 'UDEF message must be an object',\n          error_value: value\n        }]\n      };\n    }\n\n    const obj = value as Record<string, unknown>;\n    const errors: ErrorDetail[] = [];\n\n    // 基本验证\n    if (!obj.envelope) {\n      errors.push({\n        error_code: 'MISSING_ENVELOPE',\n        error_message: 'Message envelope is required',\n        field: 'envelope'\n      });\n    }\n\n    if (!obj.payload) {\n      errors.push({\n        error_code: 'MISSING_PAYLOAD',\n        error_message: 'Message payload is required',\n        field: 'payload'\n      });\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n};\n\n/**\n * 模式验证器\n * Schema validator\n */\nexport class SchemaValidator<T = unknown> implements Validator<T> {\n  constructor(_schema: SchemaValidationRule) {}\n\n  validate(value: unknown): ValidationResult & { data?: T } {\n    // 简化的验证实现\n    return {\n      valid: true,\n      errors: [],\n      data: value as T\n    };\n  }\n}\n\n/**\n * 通用验证函数\n * Generic validation functions\n */\nexport const Validators = {\n  /**\n   * 验证消息格式\n   * Validate message format\n   */\n  isValidMessage: (message: unknown): message is UDEFMessage => {\n    const result = MessageValidators.udefMessage(message);\n    return result.valid;\n  },\n\n  /**\n   * 验证时间戳\n   * Validate timestamp\n   */\n  isValidTimestamp: BasicTypes.isValidTimestamp,\n\n  /**\n   * 验证服务信息\n   * Validate service info\n   */\n  isValidServiceInfo: (serviceInfo: unknown): serviceInfo is ServiceInfoType => {\n    if (!serviceInfo || typeof serviceInfo !== 'object') {\n      return false;\n    }\n\n    const obj = serviceInfo as Record<string, unknown>;\n    return !!(\n      obj.service_name && \n      obj.service_version && \n      obj.service_id && \n      obj.network_info &&\n      typeof obj.health_status === 'number'\n    );\n  },\n\n  /**\n   * 通用类型验证\n   * Generic type validation\n   */\n  validateType: <T>(data: unknown, validator: Validator<T>): ValidationResult & { data?: T } => {\n    return validator.validate(data);\n  }\n};\n\n/**\n * 导出验证工具集合\n * Export validation utilities collection\n */\nexport const ValidationUtils = {\n  BasicValidators,\n  CollectionValidators,\n  MessageValidators,\n  SchemaValidator,\n  Validators\n};","/**\n * 类型转换工具函数（简化版）\n * Type conversion utility functions (simplified version)\n */\n\n/**\n * 序列化格式枚举\n * Serialization format enumeration\n */\nexport enum SerializationFormat {\n  JSON = 'json',\n  PROTOBUF = 'protobuf',\n  MESSAGEPACK = 'messagepack',\n  AVRO = 'avro',\n  XML = 'xml',\n  YAML = 'yaml',\n  CBOR = 'cbor'\n}\n\n/**\n * 序列化选项接口\n * Serialization options interface\n */\nexport interface SerializationOptions {\n  /** 是否美化输出（适用于JSON、XML等） */\n  pretty?: boolean;\n  \n  /** 缩进字符（适用于JSON、XML等） */\n  indent?: string | number;\n}\n\n/**\n * 反序列化选项接口\n * Deserialization options interface\n */\nexport interface DeserializationOptions {\n  /** 是否验证模式 */\n  validate_schema?: boolean;\n  \n  /** 模式版本 */\n  schema_version?: string;\n}\n\n/**\n * 转换结果接口\n * Conversion result interface\n */\nexport interface ConversionResult<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    original_size?: number;\n    converted_size?: number;\n    conversion_time_ms?: number;\n    format?: SerializationFormat;\n  };\n}\n\n/**\n * Protocol Buffers转换器\n * Protocol Buffers converter\n */\nexport const ProtobufConverter = {\n  /**\n   * 转换为Protocol Buffers格式\n   * Convert to Protocol Buffers format\n   */\n  toProtobuf(data: unknown): ConversionResult<Uint8Array> {\n    try {\n      // 简化实现\n      const jsonString = JSON.stringify(data);\n      const buffer = new TextEncoder().encode(jsonString);\n      \n      return {\n        success: true,\n        data: buffer,\n        metadata: {\n          format: SerializationFormat.PROTOBUF\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  },\n\n  /**\n   * 从Protocol Buffers格式转换\n   * Convert from Protocol Buffers format\n   */\n  fromProtobuf(buffer: Uint8Array): ConversionResult<unknown> {\n    try {\n      const jsonString = new TextDecoder().decode(buffer);\n      const data = JSON.parse(jsonString);\n      \n      return {\n        success: true,\n        data: data,\n        metadata: {\n          format: SerializationFormat.PROTOBUF\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n};\n\n/**\n * JSON转换器\n * JSON converter\n */\nexport const JSONConverter = {\n  /**\n   * 序列化为JSON\n   * Serialize to JSON\n   */\n  serialize(data: unknown, options?: SerializationOptions): ConversionResult<string> {\n    try {\n      const space = options?.pretty ? (options.indent || 2) : undefined;\n      const jsonString = JSON.stringify(data, null, space);\n      \n      return {\n        success: true,\n        data: jsonString,\n        metadata: {\n          format: SerializationFormat.JSON\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  },\n\n  /**\n   * 从JSON反序列化\n   * Deserialize from JSON\n   */\n  deserialize(jsonString: string): ConversionResult<unknown> {\n    try {\n      const data = JSON.parse(jsonString);\n      \n      return {\n        success: true,\n        data: data,\n        metadata: {\n          format: SerializationFormat.JSON\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n};\n\n/**\n * 消息序列化器\n * Message serializer\n */\nexport const MessageSerializer = {\n  /**\n   * 序列化消息\n   * Serialize message\n   */\n  serializeMessage(\n    message: unknown, \n    format: SerializationFormat = SerializationFormat.JSON,\n    options?: SerializationOptions\n  ): ConversionResult<string | Uint8Array> {\n    try {\n      switch (format) {\n        case SerializationFormat.JSON:\n          return JSONConverter.serialize(message, options);\n          \n        case SerializationFormat.PROTOBUF:\n          return ProtobufConverter.toProtobuf(message);\n          \n        default:\n          return {\n            success: false,\n            error: `Unsupported serialization format: ${format}`\n          };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  },\n\n  /**\n   * 反序列化消息\n   * Deserialize message\n   */\n  deserializeMessage(\n    data: string | Uint8Array,\n    format: SerializationFormat = SerializationFormat.JSON\n  ): ConversionResult<unknown> {\n    try {\n      switch (format) {\n        case SerializationFormat.JSON:\n          return JSONConverter.deserialize(data as string);\n          \n        case SerializationFormat.PROTOBUF:\n          return ProtobufConverter.fromProtobuf(data as Uint8Array);\n          \n        default:\n          return {\n            success: false,\n            error: `Unsupported deserialization format: ${format}`\n          };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n};\n\n/**\n * 导出转换工具集合\n * Export conversion utilities collection\n */\nexport const ConversionUtils = {\n  ProtobufConverter,\n  JSONConverter,\n  MessageSerializer,\n  SerializationFormat\n};","/**\n * 工厂函数（简化版） - 用于创建标准化的类型实例\n * Factory functions (simplified version) - for creating standardized type instances\n */\n\nimport { BasicTypes } from './basic-types.js';\nimport type { UUID, SkerString } from './basic-types.js';\nimport type { UDEFMessage, MessageEnvelope, MessagePayload, MessageHeader, MessageMetadata } from './message-types.js';\nimport type { ErrorResponse, ErrorDetail, SuccessResponse } from './error-types.js';\nimport type { ServiceInfo } from './service-types.js';\n\n/**\n * 消息创建选项接口\n * Message creation options interface\n */\nexport interface CreateMessageOptions {\n  message_type: string;\n  service_name: SkerString;\n  service_version?: SkerString;\n  service_id?: UUID;\n  content_type?: string;\n  priority?: number;\n  ttl?: number;\n  correlation_id?: UUID;\n  trace_id?: SkerString;\n}\n\n/**\n * 错误响应创建选项接口\n * Error response creation options interface\n */\nexport interface CreateErrorResponseOptions {\n  code: SkerString;\n  message: SkerString;\n  level?: string;\n  severity?: number;\n  http_status?: number;\n  details?: ErrorDetail[];\n  help_url?: SkerString;\n  retryable?: boolean;\n  retry_after_ms?: number;\n  api_version?: SkerString;\n  request_id?: UUID;\n}\n\n/**\n * 服务信息创建选项接口\n * Service info creation options interface\n */\nexport interface CreateServiceInfoOptions {\n  service_name: SkerString;\n  service_version: SkerString;\n  host: SkerString;\n  port: number;\n  protocol?: string;\n  description?: SkerString;\n  tags?: SkerString[];\n}\n\n/**\n * JWT令牌创建选项接口\n * JWT token creation options interface\n */\nexport interface CreateJWTTokenOptions {\n  user_id: SkerString;\n  issuer: SkerString;\n  audience?: SkerString;\n  expires_in_seconds?: number;\n  roles?: SkerString[];\n  permissions?: SkerString[];\n}\n\n/**\n * 消息工厂\n * Message factory\n */\nexport const MessageFactory = {\n  /**\n   * 创建标准消息\n   * Create standard message\n   */\n  createMessage<TData = unknown>(\n    data: TData,\n    options: CreateMessageOptions\n  ): UDEFMessage {\n    const now = BasicTypes.createTimestamp();\n    const messageId = BasicTypes.createUUID();\n    const serviceId = options.service_id || BasicTypes.createUUID();\n\n    const header: MessageHeader = {\n      message_id: messageId,\n      correlation_id: options.correlation_id,\n      timestamp: now,\n      source: {\n        service_name: options.service_name,\n        service_version: options.service_version || '1.0.0',\n        service_id: serviceId\n      },\n      content_type: 'application/json' as any,\n      message_type: options.message_type as any,\n      version: '1.0'\n    };\n\n    const metadata: MessageMetadata = {\n      trace_id: options.trace_id,\n      priority: options.priority || 5,\n      ttl: options.ttl\n    };\n\n    const envelope: MessageEnvelope = {\n      header,\n      metadata\n    };\n\n    const payload: MessagePayload = {\n      data,\n      schema_version: '1.0.0'\n    };\n\n    return {\n      envelope,\n      payload\n    };\n  }\n};\n\n/**\n * 错误工厂\n * Error factory\n */\nexport const ErrorFactory = {\n  /**\n   * 创建错误响应\n   * Create error response\n   */\n  createErrorResponse(options: CreateErrorResponseOptions): ErrorResponse {\n    const now = BasicTypes.createTimestamp();\n    \n    return {\n      success: false,\n      error: {\n        code: options.code,\n        message: options.message,\n        level: options.level || 'business' as any,\n        severity: options.severity || 2 as any,\n        http_status: options.http_status as any,\n        details: options.details,\n        timestamp: now,\n        help_url: options.help_url,\n        retryable: options.retryable || false,\n        retry_after_ms: options.retry_after_ms\n      },\n      metadata: {\n        request_id: options.request_id,\n        api_version: options.api_version || '1.0.0',\n        processing_time_ms: 0\n      }\n    };\n  },\n\n  /**\n   * 创建成功响应\n   * Create success response\n   */\n  createSuccessResponse<TData = unknown>(\n    data: TData,\n    options?: {\n      api_version?: SkerString;\n      request_id?: UUID;\n    }\n  ): SuccessResponse<TData> {\n    return {\n      success: true,\n      data,\n      metadata: {\n        api_version: options?.api_version || '1.0.0',\n        processing_time_ms: 0,\n        request_id: options?.request_id,\n        timestamp: BasicTypes.createTimestamp()\n      }\n    };\n  }\n};\n\n/**\n * 服务工厂\n * Service factory\n */\nexport const ServiceFactory = {\n  /**\n   * 创建服务信息\n   * Create service info\n   */\n  createServiceInfo(options: CreateServiceInfoOptions): ServiceInfo {\n    const now = BasicTypes.createTimestamp();\n    const serviceId = BasicTypes.createUUID();\n\n    return {\n      service_name: options.service_name,\n      service_version: options.service_version,\n      service_id: serviceId,\n      network_info: {\n        host: options.host,\n        port: options.port,\n        protocol: options.protocol || 'http' as any\n      },\n      health_status: 0 as any, // UNKNOWN\n      service_state: 'initializing' as any,\n      description: options.description,\n      tags: options.tags || [],\n      capabilities: [],\n      supported_api_versions: ['1.0.0'],\n      metadata: {},\n      registered_at: now,\n      last_updated: now\n    };\n  }\n};\n\n/**\n * 认证工厂\n * Auth factory\n */\nexport const AuthFactory = {\n  /**\n   * 创建JWT令牌（简化版）\n   * Create JWT token (simplified version)\n   */\n  createJWTToken(options: CreateJWTTokenOptions): any {\n    const now = BasicTypes.createTimestamp();\n    const expiresInSeconds = options.expires_in_seconds || 3600;\n    const expiresAt = new Date(now.getTime() + expiresInSeconds * 1000);\n    \n    return {\n      token: `jwt.${Math.random().toString(36).substring(2)}`,\n      token_type: 'access_token',\n      issued_at: now,\n      expires_at: expiresAt,\n      issuer: options.issuer,\n      subject: options.user_id,\n      scopes: options.roles\n    };\n  }\n};\n\n/**\n * 导出工厂函数集合\n * Export factory functions collection\n */\nexport const Factories = {\n  MessageFactory,\n  ErrorFactory,\n  ServiceFactory,\n  AuthFactory\n};","/**\n * @sker/types - Sker通用类型定义包\n * Universal type definitions package for Sker communication framework\n * \n * 提供跨语言类型映射和统一数据类型定义\n * Provides cross-language type mappings and unified data type definitions\n */\n\n// ==================== 基础类型 Basic Types ====================\nexport type {\n  SkerBoolean,\n  SkerInteger,\n  SkerFloat,\n  SkerString,\n  SkerTimestamp,\n  SkerDecimal,\n  Brand,\n  UUID,\n  MoneyAmount,\n  URL,\n  Email\n} from './basic-types.js';\n\nexport { BasicTypes } from './basic-types.js';\n\n// ==================== 集合类型 Collection Types ====================\nexport type {\n  SkerArray,\n  SkerMap,\n  SkerSet,\n  SkerOptional,\n  SkerTuple,\n  SkerRecord\n} from './collection-types.js';\n\nexport { CollectionTypes } from './collection-types.js';\n\n// ==================== 消息类型 Message Types ====================\nexport {\n  ContentType,\n  MessageType,\n  MessagePriority\n} from './message-types.js';\n\nexport type {\n  ServiceInfo,\n  MessageHeader,\n  MessageMetadata,\n  MessageEnvelope,\n  MessagePayload,\n  UDEFMessage,\n  TypedUDEFMessage,\n  RequestMessage,\n  ResponseMessage,\n  EventMessage,\n  CommandMessage,\n  NotificationMessage,\n  HeartbeatMessage,\n  MessageBatch,\n  MessageAck,\n  MessageStats,\n  MessageFilter,\n  MessageRoutingRule,\n  MessageTransformation\n} from './message-types.js';\n\n// ==================== 错误处理类型 Error Handling Types ====================\nexport {\n  ErrorLevel,\n  ErrorSeverity,\n  HttpStatusCode,\n  ErrorCodes\n} from './error-types.js';\n\nexport type {\n  ErrorDetail,\n  ErrorStackTrace,\n  ErrorResponse,\n  SuccessResponse,\n  ServiceResult,\n  ValidationResult,\n  BaseException,\n  BusinessException,\n  SystemException,\n  SecurityException,\n  ErrorAggregation\n} from './error-types.js';\n\n// ==================== 服务相关类型 Service Types ====================\nexport {\n  Protocol,\n  HealthStatus,\n  LoadBalanceStrategy,\n  ServiceState\n} from './service-types.js';\n\nexport type {\n  NetworkInfo,\n  HealthCheckConfig,\n  ServiceMetrics,\n  ServiceInfo as ServiceInfoType,\n  ServiceEndpoint,\n  ServiceRegistry,\n  ServiceDiscoveryQuery,\n  ServiceDiscoveryResult,\n  ServiceDependency,\n  ServiceDeployment\n} from './service-types.js';\n\n// ==================== 认证授权类型 Auth Types ====================\nexport {\n  AuthMethod,\n  OAuth2GrantType,\n  TokenType,\n  UserStatus,\n  PermissionAction,\n  PermissionEffect\n} from './auth-types.js';\n\nexport type {\n  AuthenticationInfo,\n  AuthorizationToken,\n  JWTToken,\n  APIKey,\n  OAuth2Token,\n  Permission,\n  Role,\n  UserPrincipal,\n  AuthenticationContext,\n  AuthorizationPolicy,\n  AuthorizationRequest,\n  AuthorizationResult\n} from './auth-types.js';\n\n// ==================== 验证工具 Validation Utilities ====================\nexport type {\n  Validator,\n  FieldValidationRule,\n  SchemaValidationRule\n} from './validation.js';\n\nexport {\n  BasicValidators,\n  CollectionValidators,\n  MessageValidators,\n  SchemaValidator,\n  Validators,\n  ValidationUtils\n} from './validation.js';\n\n// ==================== 转换工具 Conversion Utilities ====================\nexport {\n  SerializationFormat\n} from './conversion.js';\n\nexport type {\n  SerializationOptions,\n  DeserializationOptions,\n  ConversionResult\n} from './conversion.js';\n\nexport {\n  ProtobufConverter,\n  JSONConverter,\n  MessageSerializer,\n  ConversionUtils\n} from './conversion.js';\n\n// ==================== 工厂函数 Factory Functions ====================\nexport type {\n  CreateMessageOptions,\n  CreateErrorResponseOptions,\n  CreateServiceInfoOptions,\n  CreateJWTTokenOptions\n} from './factories.js';\n\nexport {\n  MessageFactory,\n  ErrorFactory,\n  ServiceFactory,\n  AuthFactory,\n  Factories\n} from './factories.js';\n\n// ==================== 版本信息 Version Information ====================\n\n/**\n * 包版本信息\n * Package version information\n */\nexport const VERSION = '1.0.0';\n\n/**\n * API版本信息\n * API version information\n */\nexport const API_VERSION = '1.0.0';\n\n/**\n * 支持的协议版本\n * Supported protocol versions\n */\nexport const SUPPORTED_PROTOCOL_VERSIONS = ['1.0.0'];\n\n/**\n * 默认配置\n * Default configuration\n */\nexport const DEFAULT_CONFIG = {\n  message: {\n    default_content_type: 'application/json' as const,\n    default_message_priority: 5 as const,\n    default_ttl_seconds: 3600,\n    default_schema_version: '1.0.0'\n  },\n  service: {\n    default_protocol: 'http' as const,\n    default_health_check_interval_seconds: 30,\n    default_health_check_timeout_seconds: 10,\n    default_load_balance_weight: 100\n  },\n  auth: {\n    default_token_expires_in_seconds: 3600,\n    default_jwt_algorithm: 'HS256'\n  },\n  validation: {\n    strict_mode: false,\n    validate_schema: true\n  },\n  serialization: {\n    default_format: 'json' as const,\n    pretty_print: false,\n    include_metadata: true\n  }\n} as const;\n\n// ==================== 类型保护函数 Type Guard Functions ====================\n\n/**\n * 检查值是否为成功响应\n * Check if value is success response\n */\nexport function isSuccessResponse(response: any): boolean {\n  return response && response.success === true;\n}\n\n/**\n * 检查值是否为错误响应\n * Check if value is error response\n */\nexport function isErrorResponse(response: any): boolean {\n  return response && response.success === false;\n}\n\n/**\n * 检查值是否为请求消息\n * Check if value is request message\n */\nexport function isRequestMessage(message: any): boolean {\n  return message && message.envelope?.header?.message_type === 'request';\n}\n\n/**\n * 检查值是否为响应消息\n * Check if value is response message\n */\nexport function isResponseMessage(message: any): boolean {\n  return message && message.envelope?.header?.message_type === 'response';\n}\n\n/**\n * 检查值是否为事件消息\n * Check if value is event message\n */\nexport function isEventMessage(message: any): boolean {\n  return message && message.envelope?.header?.message_type === 'event';\n}\n\n/**\n * 检查服务是否健康\n * Check if service is healthy\n */\nexport function isServiceHealthy(service: any): boolean {\n  return service && service.health_status === 1; // HealthStatus.HEALTHY\n}\n\n/**\n * 检查用户是否活跃\n * Check if user is active\n */\nexport function isUserActive(user: any): boolean {\n  return user && user.status === 'active'; // UserStatus.ACTIVE\n}"],"mappings":"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","names":["ContentType","MessageType","MessagePriority","ErrorLevel","ErrorSeverity","HttpStatusCode","Protocol","HealthStatus","LoadBalanceStrategy","ServiceState","AuthMethod","OAuth2GrantType","TokenType","UserStatus","PermissionAction","PermissionEffect","SerializationFormat"]}