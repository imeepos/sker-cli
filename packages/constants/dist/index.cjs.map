{"version":3,"sources":["../src/index.ts","../src/protocol.ts","../src/errors.ts","../src/service.ts","../src/security.ts","../src/monitoring.ts","../src/time.ts","../src/config.ts","../src/utils.ts"],"sourcesContent":["// Protocol constants\nexport * from './protocol.js';\n\n// Error code constants  \nexport * from './errors.js';\n\n// Service discovery constants\nexport * from './service.js';\n\n// Security and authentication constants\nexport * from './security.js';\n\n// Monitoring and logging constants\nexport * from './monitoring.js';\n\n// Time and configuration constants\nexport * from './time.js';\nexport * from './config.js';\n\n// Utility functions\nexport * from './utils.js';","// 协议类型\nexport const PROTOCOL_TYPES = {\n  UNKNOWN: 'unknown',\n  HTTP: 'http',\n  HTTPS: 'https',\n  GRPC: 'grpc',\n  WEBSOCKET: 'websocket',\n  TCP: 'tcp',\n  UDP: 'udp'\n} as const;\n\n// HTTP方法\nexport const HTTP_METHODS = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n  OPTIONS: 'OPTIONS',\n  HEAD: 'HEAD'\n} as const;\n\n// 消息类型\nexport const MESSAGE_TYPES = {\n  REQUEST: 'request',\n  RESPONSE: 'response',\n  EVENT: 'event',\n  COMMAND: 'command',\n  NOTIFICATION: 'notification'\n} as const;\n\n// 内容类型\nexport const CONTENT_TYPES = {\n  JSON: 'application/json',\n  PROTOBUF: 'application/protobuf',\n  MSGPACK: 'application/msgpack',\n  XML: 'application/xml',\n  FORM_DATA: 'multipart/form-data',\n  FORM_URLENCODED: 'application/x-www-form-urlencoded'\n} as const;\n\n// 类型定义\nexport type ProtocolType = typeof PROTOCOL_TYPES[keyof typeof PROTOCOL_TYPES];\nexport type HttpMethod = typeof HTTP_METHODS[keyof typeof HTTP_METHODS];\nexport type MessageType = typeof MESSAGE_TYPES[keyof typeof MESSAGE_TYPES];\nexport type ContentType = typeof CONTENT_TYPES[keyof typeof CONTENT_TYPES];","// 系统级错误码 (1xx-xxx)\nexport const SYSTEM_ERROR_CODES = {\n  // 通用系统错误 (100-xxx)\n  INTERNAL_ERROR: '100001',\n  SERVICE_UNAVAILABLE: '100002',\n  SERVICE_TIMEOUT: '100003',\n  RESOURCE_EXHAUSTED: '100004',\n  CONFIGURATION_ERROR: '100005',\n  \n  // 网络错误 (101-xxx)\n  NETWORK_CONNECTION_FAILED: '101001',\n  NETWORK_TIMEOUT: '101002',\n  NETWORK_INTERRUPTED: '101003',\n  DNS_RESOLUTION_FAILED: '101004',\n  \n  // 数据错误 (102-xxx)\n  SERIALIZATION_FAILED: '102001',\n  DESERIALIZATION_FAILED: '102002',\n  DATA_FORMAT_ERROR: '102003',\n  DATA_SIZE_EXCEEDED: '102004'\n} as const;\n\n// 业务级错误码 (2xx-xxx)\nexport const BUSINESS_ERROR_CODES = {\n  // 通用业务错误 (200-xxx)\n  BUSINESS_RULE_VIOLATION: '200001',\n  BUSINESS_PROCESS_ERROR: '200002',\n  BUSINESS_STATE_INVALID: '200003',\n  BUSINESS_DATA_INCONSISTENT: '200004',\n  \n  // 用户相关错误 (201-xxx)\n  USER_NOT_FOUND: '201001',\n  USER_ALREADY_EXISTS: '201002',\n  USER_STATE_INVALID: '201003',\n  USER_PERMISSION_DENIED: '201004',\n  \n  // 订单相关错误 (202-xxx)\n  ORDER_NOT_FOUND: '202001',\n  ORDER_STATE_INVALID: '202002',\n  ORDER_AMOUNT_INVALID: '202003',\n  INSUFFICIENT_INVENTORY: '202004'\n} as const;\n\n// 集成级错误码 (3xx-xxx)\nexport const INTEGRATION_ERROR_CODES = {\n  // 外部服务错误 (300-xxx)\n  EXTERNAL_SERVICE_UNAVAILABLE: '300001',\n  EXTERNAL_SERVICE_RESPONSE_INVALID: '300002',\n  API_VERSION_INCOMPATIBLE: '300003',\n  DATA_MAPPING_FAILED: '300004',\n  \n  // 数据库错误 (301-xxx)\n  DATABASE_CONNECTION_FAILED: '301001',\n  QUERY_TIMEOUT: '301002',\n  TRANSACTION_ROLLBACK: '301003',\n  CONSTRAINT_VIOLATION: '301004'\n} as const;\n\n// 安全级错误码 (4xx-xxx)\nexport const SECURITY_ERROR_CODES = {\n  // 认证错误 (400-xxx)\n  AUTHENTICATION_FAILED: '400001',\n  AUTHORIZATION_FAILED: '400002',\n  TOKEN_EXPIRED: '400003',\n  SIGNATURE_VERIFICATION_FAILED: '400004',\n  IP_RESTRICTED: '400005',\n  RATE_LIMITED: '400006',\n  \n  // 数据安全错误 (401-xxx)\n  SENSITIVE_DATA_ACCESS_DENIED: '401001',\n  DATA_ENCRYPTION_FAILED: '401002',\n  DATA_DECRYPTION_FAILED: '401003'\n} as const;\n\n// 错误响应接口\nexport interface ErrorDetail {\n  field: string;\n  error_code: string;\n  error_message: string;\n}\n\nexport interface ErrorResponse {\n  code: string;\n  message: string;\n  details?: ErrorDetail[];\n  timestamp?: string;\n  trace_id?: string;\n}\n\n// 创建标准错误响应\nexport function createErrorResponse(error: Omit<ErrorResponse, 'timestamp'>): ErrorResponse {\n  return {\n    ...error,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// 类型定义\nexport type SystemErrorCode = typeof SYSTEM_ERROR_CODES[keyof typeof SYSTEM_ERROR_CODES];\nexport type BusinessErrorCode = typeof BUSINESS_ERROR_CODES[keyof typeof BUSINESS_ERROR_CODES];\nexport type IntegrationErrorCode = typeof INTEGRATION_ERROR_CODES[keyof typeof INTEGRATION_ERROR_CODES];\nexport type SecurityErrorCode = typeof SECURITY_ERROR_CODES[keyof typeof SECURITY_ERROR_CODES];\n\nexport type ErrorCode = SystemErrorCode | BusinessErrorCode | IntegrationErrorCode | SecurityErrorCode;","// 服务状态\nexport const SERVICE_STATUS = {\n  UNKNOWN: 0,\n  HEALTHY: 1,\n  UNHEALTHY: 2,\n  MAINTENANCE: 3,\n  STARTING: 4,\n  STOPPING: 5\n} as const;\n\n// 负载均衡策略\nexport const LOAD_BALANCE_STRATEGIES = {\n  ROUND_ROBIN: 'round_robin',\n  WEIGHTED_ROUND_ROBIN: 'weighted_round_robin',\n  LEAST_CONNECTIONS: 'least_connections',\n  RANDOM: 'random',\n  CONSISTENT_HASHING: 'consistent_hashing',\n  IP_HASH: 'ip_hash'\n} as const;\n\n// 默认端口配置\nexport const DEFAULT_PORTS = {\n  HTTP: 80,\n  HTTPS: 443,\n  GRPC: 50051,\n  WEBSOCKET: 8080,\n  WEBSOCKET_SECURE: 8443,\n  REDIS: 6379,\n  MYSQL: 3306,\n  POSTGRESQL: 5432,\n  MONGODB: 27017,\n  ELASTICSEARCH: 9200\n} as const;\n\n// 健康检查配置\nexport const HEALTH_CHECK_CONFIG = {\n  DEFAULT_INTERVAL: 30000,      // 30秒\n  DEFAULT_TIMEOUT: 10000,       // 10秒  \n  DEFAULT_RETRIES: 3,           // 3次重试\n  DEFAULT_THRESHOLD: 3,         // 连续3次失败才标记为不健康\n  STARTUP_GRACE_PERIOD: 60000   // 启动宽限期60秒\n} as const;\n\n// 服务信息接口\nexport interface ServiceInfo {\n  name: string;\n  version: string;\n  host: string;\n  port: number;\n  status: ServiceStatusType;\n  loadBalanceStrategy: LoadBalanceStrategyType;\n  healthCheck?: {\n    endpoint: string;\n    interval: number;\n    timeout: number;\n    retries?: number;\n  };\n  metadata?: Record<string, any>;\n}\n\n// 类型定义\nexport type ServiceStatusType = typeof SERVICE_STATUS[keyof typeof SERVICE_STATUS];\nexport type LoadBalanceStrategyType = typeof LOAD_BALANCE_STRATEGIES[keyof typeof LOAD_BALANCE_STRATEGIES];\nexport type DefaultPortType = typeof DEFAULT_PORTS[keyof typeof DEFAULT_PORTS];","// 认证类型\nexport const AUTH_TYPES = {\n  API_KEY: 'api_key',\n  BEARER_TOKEN: 'bearer',\n  BASIC: 'basic',\n  OAUTH2: 'oauth2',\n  JWT: 'jwt',\n  MUTUAL_TLS: 'mtls',\n  DIGEST: 'digest'\n} as const;\n\n// 令牌类型\nexport const TOKEN_TYPES = {\n  ACCESS_TOKEN: 'access_token',\n  REFRESH_TOKEN: 'refresh_token',\n  ID_TOKEN: 'id_token',\n  API_KEY: 'api_key'\n} as const;\n\n// 权限级别\nexport const PERMISSION_LEVELS = {\n  READ: 'read',\n  WRITE: 'write',\n  DELETE: 'delete',\n  ADMIN: 'admin',\n  SUPER_ADMIN: 'super_admin'\n} as const;\n\n// 加密算法\nexport const CRYPTO_ALGORITHMS = {\n  // 对称加密\n  AES_128_GCM: 'aes-128-gcm',\n  AES_256_GCM: 'aes-256-gcm',\n  \n  // 非对称加密\n  RSA_2048: 'rsa-2048',\n  RSA_4096: 'rsa-4096',\n  ECDSA_P256: 'ecdsa-p256',\n  ECDSA_P384: 'ecdsa-p384',\n  \n  // 哈希算法\n  SHA256: 'sha256',\n  SHA512: 'sha512',\n  BCRYPT: 'bcrypt',\n  SCRYPT: 'scrypt'\n} as const;\n\n// JWT标准声明\nexport const JWT_CLAIMS = {\n  ISSUER: 'iss',              // 颁发者\n  SUBJECT: 'sub',             // 主题\n  AUDIENCE: 'aud',            // 受众\n  EXPIRATION: 'exp',          // 过期时间\n  NOT_BEFORE: 'nbf',          // 不早于时间\n  ISSUED_AT: 'iat',           // 颁发时间\n  JWT_ID: 'jti',              // JWT ID\n  \n  // 自定义声明\n  ROLES: 'roles',             // 角色\n  PERMISSIONS: 'permissions', // 权限\n  TENANT_ID: 'tenant_id',     // 租户ID\n  USER_ID: 'user_id',         // 用户ID\n  CLIENT_ID: 'client_id'      // 客户端ID\n} as const;\n\n// JWT算法\nexport const JWT_ALGORITHMS = {\n  HS256: 'HS256',             // HMAC SHA256\n  HS384: 'HS384',             // HMAC SHA384  \n  HS512: 'HS512',             // HMAC SHA512\n  RS256: 'RS256',             // RSA SHA256\n  RS384: 'RS384',             // RSA SHA384\n  RS512: 'RS512',             // RSA SHA512\n  ES256: 'ES256',             // ECDSA SHA256\n  ES384: 'ES384',             // ECDSA SHA384\n  ES512: 'ES512'              // ECDSA SHA512\n} as const;\n\n// JWT载荷接口\nexport interface JWTPayload {\n  [JWT_CLAIMS.ISSUER]?: string;\n  [JWT_CLAIMS.SUBJECT]?: string;\n  [JWT_CLAIMS.AUDIENCE]?: string | string[];\n  [JWT_CLAIMS.EXPIRATION]?: number;\n  [JWT_CLAIMS.NOT_BEFORE]?: number;\n  [JWT_CLAIMS.ISSUED_AT]?: number;\n  [JWT_CLAIMS.JWT_ID]?: string;\n  [JWT_CLAIMS.ROLES]?: string[];\n  [JWT_CLAIMS.PERMISSIONS]?: string[];\n  [JWT_CLAIMS.TENANT_ID]?: string;\n  [JWT_CLAIMS.USER_ID]?: string;\n  [JWT_CLAIMS.CLIENT_ID]?: string;\n  [key: string]: any;\n}\n\n// 类型定义\nexport type AuthType = typeof AUTH_TYPES[keyof typeof AUTH_TYPES];\nexport type TokenType = typeof TOKEN_TYPES[keyof typeof TOKEN_TYPES];\nexport type PermissionLevel = typeof PERMISSION_LEVELS[keyof typeof PERMISSION_LEVELS];\nexport type CryptoAlgorithm = typeof CRYPTO_ALGORITHMS[keyof typeof CRYPTO_ALGORITHMS];\nexport type JWTClaim = typeof JWT_CLAIMS[keyof typeof JWT_CLAIMS];\nexport type JWTAlgorithm = typeof JWT_ALGORITHMS[keyof typeof JWT_ALGORITHMS];","// 日志级别\nexport const LOG_LEVELS = {\n  TRACE: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  FATAL: 5\n} as const;\n\n// 指标类型\nexport const METRIC_TYPES = {\n  COUNTER: 'counter',         // 计数器\n  GAUGE: 'gauge',             // 仪表盘\n  HISTOGRAM: 'histogram',     // 直方图\n  SUMMARY: 'summary',         // 摘要\n  TIMER: 'timer'              // 计时器\n} as const;\n\n// 追踪头部\nexport const TRACE_HEADERS = {\n  TRACE_ID: 'x-trace-id',\n  SPAN_ID: 'x-span-id',\n  PARENT_SPAN_ID: 'x-parent-span-id',\n  TRACE_FLAGS: 'x-trace-flags',\n  BAGGAGE: 'baggage'\n} as const;\n\n// 日志字段标准\nexport const LOG_FIELDS = {\n  TIMESTAMP: 'timestamp',\n  LEVEL: 'level',\n  MESSAGE: 'message',\n  SERVICE: 'service',\n  VERSION: 'version',\n  TRACE_ID: 'trace_id',\n  SPAN_ID: 'span_id',\n  USER_ID: 'user_id',\n  REQUEST_ID: 'request_id',\n  ERROR: 'error',\n  DURATION: 'duration',\n  HTTP_METHOD: 'http_method',\n  HTTP_STATUS: 'http_status',\n  HTTP_PATH: 'http_path'\n} as const;\n\n// 指标标签\nexport const METRIC_LABELS = {\n  SERVICE_NAME: 'service_name',\n  VERSION: 'version',\n  ENVIRONMENT: 'environment',\n  METHOD: 'method',\n  STATUS: 'status',\n  ENDPOINT: 'endpoint',\n  ERROR_TYPE: 'error_type'\n} as const;\n\n// 日志结构接口\nexport interface LogEntry {\n  [LOG_FIELDS.TIMESTAMP]: string;\n  [LOG_FIELDS.LEVEL]: LogLevelType;\n  [LOG_FIELDS.MESSAGE]: string;\n  [LOG_FIELDS.SERVICE]?: string;\n  [LOG_FIELDS.VERSION]?: string;\n  [LOG_FIELDS.TRACE_ID]?: string;\n  [LOG_FIELDS.SPAN_ID]?: string;\n  [LOG_FIELDS.USER_ID]?: string;\n  [LOG_FIELDS.REQUEST_ID]?: string;\n  [LOG_FIELDS.ERROR]?: Error | string;\n  [LOG_FIELDS.DURATION]?: number;\n  [LOG_FIELDS.HTTP_METHOD]?: string;\n  [LOG_FIELDS.HTTP_STATUS]?: number;\n  [LOG_FIELDS.HTTP_PATH]?: string;\n  [key: string]: any;\n}\n\n// 指标数据接口\nexport interface MetricData {\n  name: string;\n  type: MetricType;\n  value: number;\n  labels?: Record<string, string>;\n  timestamp?: number;\n  unit?: string;\n  description?: string;\n}\n\n// 类型定义\nexport type LogLevel = typeof LOG_LEVELS[keyof typeof LOG_LEVELS];\nexport type LogLevelType = LogLevel;\nexport type MetricType = typeof METRIC_TYPES[keyof typeof METRIC_TYPES];\nexport type TraceHeader = typeof TRACE_HEADERS[keyof typeof TRACE_HEADERS];\nexport type LogField = typeof LOG_FIELDS[keyof typeof LOG_FIELDS];\nexport type MetricLabel = typeof METRIC_LABELS[keyof typeof METRIC_LABELS];","// 默认超时配置\nexport const DEFAULT_TIMEOUTS = {\n  CONNECTION: 5000,           // 连接超时5秒\n  REQUEST: 30000,             // 请求超时30秒\n  READ: 60000,                // 读取超时60秒\n  WRITE: 10000,               // 写入超时10秒\n  IDLE: 300000,               // 空闲超时5分钟\n  HEALTH_CHECK: 10000         // 健康检查超时10秒\n} as const;\n\n// 重试策略\nexport const RETRY_STRATEGIES = {\n  FIXED_DELAY: 'fixed_delay',\n  EXPONENTIAL_BACKOFF: 'exponential_backoff',\n  LINEAR_BACKOFF: 'linear_backoff',\n  RANDOM_JITTER: 'random_jitter'\n} as const;\n\n// 时间单位\nexport const TIME_UNITS = {\n  MILLISECOND: 1,\n  SECOND: 1000,\n  MINUTE: 60000,\n  HOUR: 3600000,\n  DAY: 86400000,\n  WEEK: 604800000\n} as const;\n\n// 重试配置接口\nexport interface RetryConfig {\n  strategy: RetryStrategyType;\n  maxAttempts: number;\n  baseDelay: number;\n  maxDelay?: number;\n  backoffMultiplier?: number;\n  jitterRange?: number;\n}\n\n// 超时配置接口\nexport interface TimeoutConfig {\n  connection?: number;\n  request?: number;\n  read?: number;\n  write?: number;\n  idle?: number;\n  healthCheck?: number;\n}\n\n// 类型定义\nexport type DefaultTimeout = typeof DEFAULT_TIMEOUTS[keyof typeof DEFAULT_TIMEOUTS];\nexport type RetryStrategyType = typeof RETRY_STRATEGIES[keyof typeof RETRY_STRATEGIES];\nexport type TimeUnit = typeof TIME_UNITS[keyof typeof TIME_UNITS];","// 环境类型\nexport const ENVIRONMENTS = {\n  DEVELOPMENT: 'development',\n  TESTING: 'testing',\n  STAGING: 'staging',\n  PRODUCTION: 'production'\n} as const;\n\n// 配置源\nexport const CONFIG_SOURCES = {\n  ENVIRONMENT: 'env',\n  FILE: 'file',\n  REMOTE: 'remote',\n  DATABASE: 'database',\n  CONSUL: 'consul',\n  ETCD: 'etcd'\n} as const;\n\n// 默认限制\nexport const DEFAULT_LIMITS = {\n  MAX_REQUEST_SIZE: 10485760,     // 10MB\n  MAX_RESPONSE_SIZE: 10485760,    // 10MB\n  MAX_CONNECTIONS: 1000,          // 最大连接数\n  MAX_CONCURRENT_REQUESTS: 100,   // 最大并发请求\n  RATE_LIMIT_PER_MINUTE: 1000,    // 每分钟限制数\n  MAX_RETRY_ATTEMPTS: 3,          // 最大重试次数\n  MAX_BATCH_SIZE: 100             // 最大批处理大小\n} as const;\n\n// 配置优先级\nexport const CONFIG_PRIORITIES = {\n  COMMAND_LINE: 0,      // 最高优先级\n  ENVIRONMENT: 1,\n  FILE: 2,\n  REMOTE: 3,\n  DEFAULT: 4            // 最低优先级\n} as const;\n\n// 配置接口\nexport interface ConfigEntry {\n  key: string;\n  value: any;\n  source: ConfigSourceType;\n  priority: number;\n  description?: string;\n  required?: boolean;\n  defaultValue?: any;\n}\n\nexport interface ApplicationConfig {\n  environment: EnvironmentType;\n  service: {\n    name: string;\n    version: string;\n    port: number;\n  };\n  database?: {\n    host: string;\n    port: number;\n    name: string;\n    username: string;\n    password: string;\n  };\n  cache?: {\n    host: string;\n    port: number;\n    ttl: number;\n  };\n  logging?: {\n    level: string;\n    format: string;\n    output: string;\n  };\n  security?: {\n    jwtSecret: string;\n    encryptionKey: string;\n    corsOrigins: string[];\n  };\n  limits?: Partial<typeof DEFAULT_LIMITS>;\n}\n\n// 类型定义\nexport type EnvironmentType = typeof ENVIRONMENTS[keyof typeof ENVIRONMENTS];\nexport type ConfigSourceType = typeof CONFIG_SOURCES[keyof typeof CONFIG_SOURCES];\nexport type DefaultLimit = typeof DEFAULT_LIMITS[keyof typeof DEFAULT_LIMITS];\nexport type ConfigPriority = typeof CONFIG_PRIORITIES[keyof typeof CONFIG_PRIORITIES];","import { \n  PROTOCOL_TYPES, \n  ProtocolType, \n  HTTP_METHODS, \n  HttpMethod \n} from './protocol.js';\nimport { \n  SYSTEM_ERROR_CODES, \n  BUSINESS_ERROR_CODES, \n  INTEGRATION_ERROR_CODES, \n  SECURITY_ERROR_CODES, \n  ErrorCode \n} from './errors.js';\nimport { SERVICE_STATUS, ServiceStatusType } from './service.js';\nimport { LOG_LEVELS, LogLevel } from './monitoring.js';\n\n// 协议验证\nexport function isValidProtocol(protocol: string): protocol is ProtocolType {\n  return Object.values(PROTOCOL_TYPES).includes(protocol as ProtocolType);\n}\n\n// HTTP方法验证\nexport function isValidHttpMethod(method: string): method is HttpMethod {\n  return Object.values(HTTP_METHODS).includes(method as HttpMethod);\n}\n\n// 错误码验证\nexport function isValidErrorCode(code: string): code is ErrorCode {\n  return (\n    Object.values(SYSTEM_ERROR_CODES).includes(code as any) ||\n    Object.values(BUSINESS_ERROR_CODES).includes(code as any) ||\n    Object.values(INTEGRATION_ERROR_CODES).includes(code as any) ||\n    Object.values(SECURITY_ERROR_CODES).includes(code as any)\n  );\n}\n\n// 获取错误码类别\nexport function getErrorCategory(code: string): string {\n  if (code.startsWith('1')) return 'system';\n  if (code.startsWith('2')) return 'business';\n  if (code.startsWith('3')) return 'integration';\n  if (code.startsWith('4')) return 'security';\n  return 'unknown';\n}\n\n// 格式化错误码\nexport function formatErrorCode(options: {\n  category: 'system' | 'business' | 'integration' | 'security';\n  subcategory: string;\n  error: string;\n}): string {\n  const categoryPrefix = {\n    system: '1',\n    business: '2',\n    integration: '3',\n    security: '4'\n  }[options.category];\n\n  const subcategoryMap: Record<string, string> = {\n    // System subcategories\n    general: '00',\n    network: '01',\n    data: '02',\n    \n    // Business subcategories  \n    common: '00',\n    user: '01',\n    order: '02',\n    \n    // Integration subcategories\n    external: '00',\n    database: '01',\n    \n    // Security subcategories\n    auth: '00',\n    data_security: '01'\n  };\n\n  const subcategoryCode = subcategoryMap[options.subcategory] || '99';\n  return `${categoryPrefix}${subcategoryCode}${options.error.padStart(3, '0')}`;\n}\n\n// 协议转换\nexport function protocolToString(protocol: ProtocolType): string {\n  return protocol;\n}\n\nexport function stringToProtocol(protocol: string): ProtocolType | null {\n  return isValidProtocol(protocol) ? protocol : null;\n}\n\n// 服务状态转换\nexport function statusToNumber(status: ServiceStatusType): number {\n  return status;\n}\n\nexport function numberToStatus(num: number): ServiceStatusType | null {\n  return Object.values(SERVICE_STATUS).includes(num as ServiceStatusType) \n    ? num as ServiceStatusType \n    : null;\n}\n\n// 日志级别转换\nexport function logLevelToNumber(level: string): LogLevel | null {\n  const levelUpper = level.toUpperCase();\n  return (LOG_LEVELS as any)[levelUpper] ?? null;\n}\n\nexport function numberToLogLevel(num: number): string | null {\n  const entry = Object.entries(LOG_LEVELS).find(([_, value]) => value === num);\n  return entry ? entry[0] : null;\n}\n\n// URL构建器\nexport function buildUrl(options: {\n  protocol: ProtocolType;\n  host: string;\n  port?: number;\n  path?: string;\n  query?: Record<string, string>;\n}): string {\n  let url = `${options.protocol}://${options.host}`;\n  \n  if (options.port) {\n    url += `:${options.port}`;\n  }\n  \n  if (options.path) {\n    if (!options.path.startsWith('/')) {\n      url += '/';\n    }\n    url += options.path;\n  }\n  \n  if (options.query && Object.keys(options.query).length > 0) {\n    const queryString = new URLSearchParams(options.query).toString();\n    url += `?${queryString}`;\n  }\n  \n  return url;\n}\n\n// 深度合并对象\nexport function deepMerge<T extends Record<string, any>>(target: T, source: Partial<T>): T {\n  const result = { ...target };\n  \n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      const sourceValue = source[key];\n      const targetValue = result[key];\n      \n      if (\n        typeof sourceValue === 'object' &&\n        sourceValue !== null &&\n        !Array.isArray(sourceValue) &&\n        typeof targetValue === 'object' &&\n        targetValue !== null &&\n        !Array.isArray(targetValue)\n      ) {\n        result[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        result[key] = sourceValue as T[Extract<keyof T, string>];\n      }\n    }\n  }\n  \n  return result;\n}\n\n// 延迟函数\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// 重试函数\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  delayMs: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      await delay(delayMs * attempt);\n    }\n  }\n  \n  throw lastError!;\n}\n\n// 生成UUID v4\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// 生成追踪ID\nexport function generateTraceId(): string {\n  return generateUUID().replace(/-/g, '');\n}\n\n// 时间戳工具\nexport function getCurrentTimestamp(): number {\n  return Date.now();\n}\n\nexport function formatTimestamp(timestamp: number, format: 'iso' | 'unix' = 'iso'): string | number {\n  if (format === 'unix') {\n    return Math.floor(timestamp / 1000);\n  }\n  return new Date(timestamp).toISOString();\n}"],"mappings":"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","names":[]}